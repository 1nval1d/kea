module kea-dhcp-types {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang::kea-dhcp-types";
  prefix "kea-dhcp-types";

  import ietf-inet-types {
    prefix inet;
  }
  import ietf-yang-types {
    prefix yang;
  }
  import kea-types {
    prefix kea;
  }

  organization "Internet Systems Consortium";
  contact "kea-dev@lists.isc.org";
  description "This file defines some commonly used Kea DHCP types and
               groupings.";
  revision 2018-08-20 {
    description "Initial revision";
    reference "";
  }

  /*
  * Typedef
  */
  typedef host-reservation-mode {
    type enumeration {
      enum "disabled";
      enum "out-of-pool";
      enum "all";
    }
    description "Host reservation mode.";
  }

  typedef lease-state {
    type enumeration {
      enum "default";
      enum "declined";
      enum "expired-reclaimed";
    }
    description "Defines state of the lease.";
  }

  /*
  * Grouping
  */
  grouping valid-lifetime {
    leaf valid-lifetime {
      type uint32;
      units "seconds";
      description "Valid lifetime.";
    }
  }

  grouping renew-timer {
    leaf renew-timer {
      type uint32;
      units "seconds";
      description "Renew timer.";
    }
  }

  grouping rebind-timer {
    leaf rebind-timer {
      type uint32;
      units "seconds";
      description "Rebind timer.";
    }
  }

  grouping database {
    leaf database-type {
      type string;
      mandatory true;
      description "Database type (e.g. mysql).";
    }
    leaf user {
      type string;
      description "Database user name.";
    }
    leaf password {
      type string;
      description "Database user password.";
    }
    leaf host {
      type string;
      description "Database host.";
    }
    leaf name {
      type string;
      description "Database name.";
    }
    leaf persist {
      type boolean;
      default true;
      description "Write lease to disk file. This parameter applies only to
                   memfile backend.";
    }
    leaf port {
      type uint16;
      description "Database port.";
    }
    leaf lfc-interval {
      type uint32;
      units "seconds";
      default 3600;
      description "Interval between two lease file cleanups.";
    }
    leaf readonly {
      type boolean;
      default false;
      description "If set to true, the database will be connected in
                   read-only mode. This does not make sense for lease
                   databases, only for host reservations and possibly
                   for upcoming config backend.";
    }
    leaf connect-timeout {
      type uint32;
      units "milliseconds";
      description "Database connection timeout.";
    }
    leaf contact-points {
      type string;
      description "Cassandra database contact points, a coma separated list of
                   IP addresses.";
    }
    leaf keyspace {
      type string;
      description "Cassandra database keyspace (this is Cassandra's equivalent
                   of a database name).";
    }
    leaf max-reconnect-tries {
      type uint32;
      default 0;
      description "Maximum of recovery attempts before exit.";
    }
    leaf reconnect-wait-time {
      type uint32;
      default 0;
      units "milliseconds";
      description "Waiting delay between two recovery attempts.";
    }
    leaf request-timeout {
      type uint32;
      units "milliseconds";
      description "Timeout waiting for a response.";
    }
    leaf tcp-keepalive {
      type uint32;
      units "seconds";
      default 0;
      description "TCP keepalive for the database connection.";
    }
    leaf tcp-nodelay {
      type boolean;
      default true;
      description "TCP nodelay for the database connection.";
    }
    uses kea:user-context {
      refine user-context {
        description "Database user context. Arbitrary JSON data can be
                     stored here.";
      }
    }
  }

  grouping databases {
    container lease-database {
      description "Lease database.";
      uses database;
    }
    container hosts-databases {
      description "Hosts databases.";
      list hosts-database {
        key database-type;
	uses database;
      }
    }
  }

  grouping expired-leases-processing {
    container expired-leases-processing {
      description "Expired leases processing setup.";
      leaf reclaim-timer-wait-time {
        type uint32;
        units "seconds";
        default 10;
        description "Interval between reclamation cycles.";
      }
      leaf flush-reclaimed-timer-wait-time {
        type uint32;
        units "seconds";
        default 25;
        description "Interval between reclaimed leases collection.";
      }
      leaf hold-reclaimed-time {
        type uint32;
        units "seconds";
        default 3600;
        description "Hold timer for re-assignment.";
      }
      leaf max-reclaim-leases {
        type uint32;
        default 100;
        description "Maximum number of reclaimed leases per cycle.";
      }
      leaf max-reclaim-time {
        type uint32;
        units "milliseconds";
        default 250;
        description "Maximum duration of a reclamation cycle.";
      }
      leaf unwarned-reclaim-cycles {
        type uint32;
        default 5;
        description "Maximum numbers of uncomplete cycles before warning.";
      }
    }
  }

  grouping control-socket {
    container control-socket {
      description "Control socket";
      uses kea:control-socket;
    }
  }

  grouping dhcp-ddns {
    container dhcp-ddns {
      description "DHCP-DDNS client setup.";
      leaf enable-updates {
        type boolean;
        default false;
        description "Enable DHCP-DDNS updates.";
      }
      leaf qualifying-suffix {
        type string;
        description "DHCP-DDNS qualifying suffix.";
      }
      leaf server-ip {
        type inet:ip-address;
        default "127.0.0.1";
        description "DHCP-DDNS server IP address.";
      }
      leaf server-port {
        type uint16;
        default 53001;
        description "DHCP-DDNS server port.";
      }
      leaf sender-ip {
        type inet:ip-address;
        description "DHCP-DDNS sender IP address.";
      }
      leaf sender-port {
        type uint16;
        description "DHCP-DDNS sender port.";
      }
      leaf max-queue-size {
        type uint32;
        default 1024;
        description "Maximum DHCP-DDNS queue size.";
      }
      leaf ncr-protocol {
        type enumeration {
          enum "UDP";
          enum "TCP";
        }
        default "UDP";
        description "Protocol to use for DHCP-DDNS communication.
                     Currently only UDP is supported.";
      }
      leaf ncr-format {
        type enumeration {
          enum "JSON";
        }
        default "JSON";
        description "Packet format to use for DHCP-DDNS.";
      }
      leaf always-include-fqdn {
        type boolean;
        description "???";
      }
      leaf override-no-update {
        type boolean;
        default false;
        description "Ignore client request and send update.";
      }
      leaf override-client-update {
        type boolean;
        default false;
        description "Ignore client delegation.";
      }
      leaf replace-client-name {
        type enumeration {
          enum "when-present";
          enum "never";
          enum "always";
          enum "when-not-present";
        }
        default "never";
        description "Replace the name provided by the client.";
      }
      leaf generated-prefix {
        type string;
        default "myhost";
        description "DHCP-DDNS generated prefix.";
      }
      leaf hostname-char-set {
        type string;
        description "A regex defining invalid characters. If detected, those
                     will be replaced by hostname-char-replacement.";
      }
      leaf hostname-char-replacement {
        type string;
        description "Replacement for invalid charaters. See
                     hostname-char-set.";
      }
      uses kea:user-context {
        refine user-context {
          description "DHCP-DDNS user context. Arbitrary JSON data can
                       be stored here.";
        }
      }
    }
  }

  grouping sanity-checks {
    container sanity-checks {
      description "Sanity checks.";
      leaf lease-checks {
        type enumeration {
          enum "none" {
            description "No checks.";
          }
          enum "warn" {
            description "When a check fails print a warning and accept the
                         lease.";
          }
          enum "fix" {
            description "When a check fails try to fix it and accept the
                         lease.";
          }
          enum "fix-del" {
            description "When a check fails try to fix it and reject the
                         lease if still bad.";
          }
          enum "del" {
            description "When a check fails reject the lease.";
          }
        }
        default "warn";
        description "Lease checks: verify subnet-id consistency on memfile
                     loading.";
      }
    }
  }

  grouping client-class {
    leaf client-class {
      type string;
    }
  }

  grouping pool-client-class {
    uses client-class {
      refine client-class {
        description "Pool client class guard (only clients belonging
                     to this class will be allowed in this pool).";
      }
    }
  }

  grouping subnet-client-class {
    uses client-class {
      refine client-class {
        description "Subnet client class guard (only clients belonging to this
                     class will be allowed in this subnet).";
      }
    }
  }

  grouping network-client-class {
    uses client-class {
      refine client-class {
        description "Shared network client class guard (only clients
                     belonging to this class will be allowed in this
                     shared network).";
      }
    }
  }

  grouping require-client-classes {
    leaf-list require-client-classes {
      type string;
    }
  }

  grouping pool-require-client-classes {
    uses require-client-classes {
      refine require-client-classes {
        description "Pool require client classes.";
      }
    }
  }

  grouping subnet-require-client-classes {
    uses require-client-classes {
      refine require-client-classes {
        description "Subnet require client classes.";
      }
    }
  }

  grouping network-require-client-classes {
    uses require-client-classes {
      refine require-client-classes {
        description "Shared network require client classes.";
      }
    }
  }

  grouping interface {
    leaf interface {
      type string;
    }
  }

  grouping subnet-interface {
    uses interface {
      refine interface {
        description "Name of the network interface this subnet is directly
                     accessible with (optional).";
      }
    }
  }

  grouping network-interface {
    uses interface {
      refine interface {
        description "Specifies the network interface this shared network is
                     directly accessible with. (optional)";
      }
    }
  }

  grouping interface-id {
    leaf interface-id {
      type string;
    }
  }

  grouping subnet-interface-id {
    uses interface-id {
      refine interface-id {
        description "Subnet interface-id option.";
      }
    }
  }

  grouping network-interface-id {
    uses interface-id {
      refine interface-id {
        description "Shared network interface-id option.";
      }
    }
  }

  grouping subnet-id {
    leaf id {
      type uint32 {
        range 1..max;
      }
      mandatory true;
      description "Subnet ID, a unique identifier used to locate or reference
                   a subnet.";
    }
  }

  grouping host-identifier {
    leaf identifier {
      type string;
      description "Host identifier.";
    }
  }

  grouping host-hostname {
    leaf hostname {
      type string;
      description "Host DNS name.";
    }
  }

  grouping host-client-classes {
    leaf-list client-classes {
      type string;
      description "Host client classes (if host identifier matches, a
                   client's packet will be added to the classes liste
                   here.)";
    }
  }

  grouping host-subnet-id {
    leaf subnet-id {
      type uint32;
      mandatory true;
      description "Host subnet ID.";
    }
  }

  grouping reservation-mode {
    leaf reservation-mode {
      type host-reservation-mode;
    }
  }

  grouping subnet-reservation-mode {
    uses reservation-mode {
      refine reservation-mode {
        description "Subnet host reservation mode.";
      }
    }
  }

  grouping network-reservation-mode {
    uses reservation-mode {
      refine reservation-mode {
        description "Shared network host reservation mode.";
      }
    }
  }

  grouping interfaces-re-detect {
    leaf re-detect {
      type boolean;
      default false;
      description "Re-detect interfaces at each reconfiguration.";
    }
  }

  grouping class-name {
    leaf name {
      type string;
      mandatory true;
      description "Name of the client class.";
    }
  }

  grouping class-test {
    leaf test {
      type string;
      description "Defines an expression that evaluates every incoming
                   packet.";
    }
  }

  grouping class-only-if-required {
    leaf only-if-required {
      type boolean;
      default false;
      description "Client class only if required flag.";
    }
  }

  grouping option-def-name {
    leaf name {
      type string;
      mandatory true;
      description "Name of the new option being defined.";
    }
  }

  grouping option-def-type {
    leaf type {
      type string;
      mandatory true;
      description "Type of the new option being defined (such as
                   string, record or uint8).";
    }
  }

  grouping option-def-record-types {
    leaf record-types {
      type string;
      description "Option definition record types.";
    }
  }

  grouping option-def-encapsulate {
    leaf encapsulate {
      type string;
      description "Defines option space this new option encapsulates.
                   Usually empty.";
    }
  }

  grouping option-data-name {
    leaf name {
      type string;
      description "Option name.";
    }
  }

  grouping option-data-data {
    leaf data {
      type string;
      description "Option data.";
    }
  }

  grouping option-data-csv-format {
    leaf csv-format {
      type boolean;
      default true;
      description "If true, the option is specified as comma separated
                   values.  If false, it is expected as a hex string.";
    }
  }

  grouping option-data-always-send {
    leaf always-send {
      type boolean;
      default false;
      description "Defines whether to always send the option,
                   regardless if the client requested it or not.";
    }
  }

  grouping option-def-array {
    leaf array {
      type boolean;
      default false;
      description "Option definition array flag.";
    }
  }

  grouping decline-probation-period {
    leaf decline-probation-period {
      type uint32;
      units "seconds";
      default 86400;
      description "Decline probabation period.";
    }
  }

  grouping network-name {
    leaf name {
      type string;
      mandatory true;
      description "Shared network name.";
    }
  }

  grouping dhcp4o6-port {
    leaf dhcp4o6-port {
      type uint16;
      description "DHCPv4-over-DHCPv6 interserver port.";
    }
  }

  grouping pool-user-context {
    uses kea:user-context {
      refine user-context {
        description "Pool user context. Arbitrary JSON data can be
                     stored here.";
      }
    }
  }   

  grouping host-user-context {
    uses kea:user-context {
      refine user-context {
        description "Host user context. Arbitrary JSON data can be
                     stored here.";
      }
    }
  }

  grouping subnet-user-context {
    uses kea:user-context {
      refine user-context {
        description "Subnet user context. Arbitrary JSON data can be
                     stored here.";
      }
    }
  }   

  grouping network-user-context {
    uses kea:user-context {
      refine user-context {
        description "Shared network user context. Arbitrary JSON data can be
                     stored here.";
      }
    }
  }

  grouping interfaces-user-context {
    uses kea:user-context {
      refine user-context {
        description "Interfaces user context. Arbitrary JSON data can
                     be stored here.";
      }
    }
  }

  grouping class-user-context {
    uses kea:user-context {
      refine user-context {
        description "Client class user context. Arbitrary JSON data can
                     be stored here.";
      }
    }
  }

  grouping option-def-user-context {
    uses kea:user-context {
      refine user-context {
        description "Option definition user context. Arbitrary JSON data
	             can be stored here.";
      }
    }
  }

  grouping option-data-user-context {
    uses kea:user-context {
      refine user-context {
        description "Option user context. Arbitrary JSON data can be
                     stored here.";
      }
    }
  }

}

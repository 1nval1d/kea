#line 2 "dhcp4_lexer.cc"

#line 4 "dhcp4_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer parser4__create_buffer
#define yy_delete_buffer parser4__delete_buffer
#define yy_flex_debug parser4__flex_debug
#define yy_init_buffer parser4__init_buffer
#define yy_flush_buffer parser4__flush_buffer
#define yy_load_buffer_state parser4__load_buffer_state
#define yy_switch_to_buffer parser4__switch_to_buffer
#define yyin parser4_in
#define yyleng parser4_leng
#define yylex parser4_lex
#define yylineno parser4_lineno
#define yyout parser4_out
#define yyrestart parser4_restart
#define yytext parser4_text
#define yywrap parser4_wrap
#define yyalloc parser4_alloc
#define yyrealloc parser4_realloc
#define yyfree parser4_free

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE parser4_restart(parser4_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t parser4_leng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *parser4_in, *parser4_out;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parser4_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up parser4_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via parser4_restart()), so that the user can continue scanning by
	 * just pointing parser4_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when parser4_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t parser4_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow parser4_wrap()'s to do buffer switches
 * instead of setting up a fresh parser4_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void parser4_restart (FILE *input_file  );
void parser4__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE parser4__create_buffer (FILE *file,int size  );
void parser4__delete_buffer (YY_BUFFER_STATE b  );
void parser4__flush_buffer (YY_BUFFER_STATE b  );
void parser4_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void parser4_pop_buffer_state (void );

static void parser4_ensure_buffer_stack (void );
static void parser4__load_buffer_state (void );
static void parser4__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER parser4__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE parser4__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE parser4__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE parser4__scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *parser4_alloc (yy_size_t  );
void *parser4_realloc (void *,yy_size_t  );
void parser4_free (void *  );

#define yy_new_buffer parser4__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        parser4_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parser4__create_buffer(parser4_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        parser4_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            parser4__create_buffer(parser4_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] parser4_text/parser4_in/parser4_out/yy_state_type/parser4_lineno etc. def's & init go here */
/* Begin user sect3 */

#define parser4_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *parser4_in = (FILE *) 0, *parser4_out = (FILE *) 0;

typedef int yy_state_type;

extern int parser4_lineno;

int parser4_lineno = 1;

extern char *parser4_text;
#define yytext_ptr parser4_text

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up parser4_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle parser4_text and parser4_leng for yymore() goes here \ */\
	parser4_leng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to parser4_text[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 184
#define YY_END_OF_BUFFER 185
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
<<<<<<< HEAD
<<<<<<< HEAD
static yyconst flex_int16_t yy_accept[1587] =
=======
static const flex_int16_t yy_accept[1591] =
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
static const flex_int16_t yy_accept[1591] =
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
    {   0,
      177,  177,    0,    0,    0,    0,    0,    0,    0,    0,
      185,  183,   10,   11,  183,    1,  177,  174,  177,  177,
      183,  176,  175,  183,  183,  183,  183,  183,  170,  171,
      183,  183,  183,  172,  173,    5,    5,    5,  183,  183,
      183,   10,   11,    0,    0,  166,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
      177,  177,    0,  176,  177,    3,    2,    6,    0,  177,
        0,    0,    0,    0,    0,    0,    4,    0,    0,    9,

        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  169,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,    0,    0,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  168,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,  182,  180,    0,  179,
=======
        0,    0,    0,    0,    0,  182,  180,    0,  179,  178,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

      178,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  146,    0,  145,    0,    0,   78,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
       35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=======
=======
        0,    0,    0,    0,    0,  182,  180,    0,  179,  178,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      146,    0,  145,    0,    0,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   35,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   75,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   18,    0,
        0,    0,    0,  181,  178,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  147,    0,    0,  149,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   79,    0,
        0,    0,    0,    0,    0,    0,   64,    0,    0,    0,
        0,    0,  100,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,   63,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   67,    0,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,   76,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   18,    0,    0,    0,
        0,  181,  178,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  147,    0,    0,  149,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   80,    0,    0,    0,
        0,    0,    0,    0,   65,    0,    0,    0,    0,    0,
      100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   64,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   68,    0,   39,    0,    0,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

       39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
       31,    0,    0,   36,    0,    0,    0,    0,    0,    0,
        0,    0,   12,  154,    0,  151,    0,  150,    0,    0,
        0,  110,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,   89,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

        0,   33,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
        0,    0,    0,    0,  111,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
        0,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,   77,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   91,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   87,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   70,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   84,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  104,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  116,   85,    0,    0,    0,    0,    0,   90,   32,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   92,   40,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,   97,   31,    0,    0,
       36,    0,    0,    0,    0,    0,    0,    0,    0,   12,
      154,    0,  151,    0,  150,    0,    0,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   90,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   33,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
        0,  111,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  106,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    7,    0,    0,  152,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   78,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   92,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   88,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   71,
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   70,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,   86,

        0,    0,    0,    0,    0,    0,   91,   32,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   60,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  155,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,   74,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  105,    0,    0,    0,
=======
        0,    0,    0,   75,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,   43,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

        0,    0,   43,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,   37,    0,    0,    0,   30,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      129,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   71,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  134,    0,    0,    0,  132,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  159,    0,    0,    0,    0,    0,    0,
        0,  103,    0,    0,    0,    0,    0,    0,    0,    0,
      107,   88,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  101,   22,    0,
      112,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  138,    0,    0,    0,    0,   61,    0,    0,    0,
        0,    0,  115,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       58,    0,    0,    0,   82,   83,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   65,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
        0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  163,    0,   62,   76,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   55,    0,

        0,    0,    0,    0,    0,    0,  135,    0,    0,  133,
        0,  127,  126,    0,   49,    0,   21,    0,    0,    0,
        0,    0,  148,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  124,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  113,
       15,    0,   41,    0,    0,    0,    0,    0,    0,    0,
      137,    0,    0,    0,    0,    0,    0,   56,    0,    0,
      108,    0,    0,    0,    0,   99,    0,    0,    0,    0,
        0,    0,    0,   68,    0,  157,    0,  156,    0,  162,
=======
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   37,    0,    0,    0,   30,    0,    0,    0,    0,
=======
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   85,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   70,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  104,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  116,   86,

        0,    0,    0,    0,    0,    0,   91,   32,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       40,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   60,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  155,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  134,    0,    0,    0,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  159,    0,    0,    0,    0,    0,    0,    0,
      103,    0,    0,    0,    0,    0,    0,    0,    0,  107,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  101,   22,    0,  112,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
=======
        0,    0,    0,   75,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,    0,    0,    0,    0,    0,   43,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   37,    0,    0,    0,   30,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  102,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  129,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,    0,    0,    0,    0,    0,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

        0,  138,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,  115,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,    0,    0,    0,   83,   84,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
        0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,  163,    0,   63,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,

        0,    0,    0,    0,    0,    0,    0,  135,    0,    0,
      133,    0,  127,  126,    0,   49,    0,   21,    0,    0,
        0,    0,    0,  148,    0,    0,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  124,    0,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,   15,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,  137,    0,    0,    0,    0,    0,    0,   57,
        0,    0,  108,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,    0,   69,    0,  157,    0,  156,
        0,  162,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
<<<<<<< HEAD
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,    0,    0,    0,   48,    0,
        0,    0,    0,  165,    0,   94,   27,    0,    0,    0,
       50,  125,    0,    0,    0,  160,  130,    0,    0,    0,
        0,    0,    0,    0,    0,   25,    0,    0,   24,    0,
      136,    0,    0,    0,    0,    0,    0,    0,   86,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   52,    0,    0,    0,    0,    0,   42,

        0,    0,    0,    0,    0,    0,    0,  114,    0,    0,
        0,   26,    0,  161,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   47,    0,    0,
       20,    0,  164,   60,    0,  158,  153,    0,   28,    0,
        0,    0,   16,    0,    0,  142,    0,    0,    0,    0,
        0,    0,  122,    0,    0,    0,   98,    0,    0,    0,
        0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  143,   13,    0,
        0,    0,    0,    0,    0,    0,  131,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  128,    0,    0,    0,

        0,    0,  121,    0,   54,   53,   19,    0,  139,    0,
        0,    0,    0,   45,    0,   81,    0,    0,    0,    0,
      120,    0,    0,   51,    0,    0,   46,  141,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       29,    0,    0,    0,    0,    0,  140,    0,   95,    0,
        0,    0,    0,    0,    0,  118,  123,   57,    0,    0,
        0,    0,  117,    0,    0,  144,    0,    0,    0,    0,
        0,   80,    0,    0,  119,    0
=======
=======
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  134,    0,    0,    0,  132,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  159,    0,    0,    0,    0,    0,    0,    0,
      103,    0,    0,    0,    0,    0,    0,    0,    0,  107,
       89,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  101,   22,    0,  112,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  138,    0,    0,    0,    0,   62,    0,    0,    0,
        0,    0,  115,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       59,    0,    0,    0,   83,   84,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
        0,    0,    0,    0,    0,   44,    0,    0,    0,    0,
        0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  163,    0,   63,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,

        0,    0,    0,    0,    0,    0,    0,  135,    0,    0,
      133,    0,  127,  126,    0,   49,    0,   21,    0,    0,
        0,    0,    0,  148,    0,    0,    0,   96,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  124,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      113,   15,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,  137,    0,    0,    0,    0,    0,    0,   57,
        0,    0,  108,    0,    0,    0,    0,   99,    0,    0,
        0,    0,    0,    0,    0,   69,    0,  157,    0,  156,
        0,  162,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   14,    0,    0,
        0,   48,    0,    0,    0,    0,  165,    0,   94,   27,
        0,    0,    0,   50,  125,    0,    0,    0,  160,  130,
        0,    0,    0,    0,    0,    0,    0,    0,   25,    0,
        0,   24,    0,  136,    0,    0,    0,   52,    0,    0,
        0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   53,    0,    0,

        0,    0,    0,   42,    0,    0,    0,    0,    0,    0,
        0,  114,    0,    0,    0,   26,    0,  161,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   47,    0,    0,   20,    0,  164,   61,    0,  158,
      153,    0,   28,    0,    0,    0,   16,    0,    0,  142,
        0,    0,    0,    0,    0,    0,  122,    0,    0,    0,
       98,    0,    0,    0,    0,    0,    0,    0,    0,   74,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  143,   13,    0,    0,    0,    0,    0,    0,    0,
      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      128,    0,    0,    0,    0,    0,  121,    0,   55,   54,
       19,    0,  139,    0,    0,    0,    0,   45,    0,   82,
        0,    0,    0,    0,  120,    0,    0,   51,    0,    0,
       46,  141,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   29,    0,    0,    0,    0,    0,
      140,    0,   95,    0,    0,    0,    0,    0,    0,  118,
      123,   58,    0,    0,    0,    0,  117,    0,    0,  144,
        0,    0,    0,    0,    0,   81,    0,    0,  119,    0
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    5,    5,    5,    5,    5,
        5,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       14,   17,   14,   18,   14,   14,   14,   19,    5,   20,
        5,   21,   22,    5,   23,   24,   25,   26,   27,   28,
        5,   29,    5,   30,    5,   31,    5,   32,   33,   34,
        5,   35,   36,   37,   38,   39,   40,    5,   41,    5,
       42,   43,   44,    5,   45,    5,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,    5,   73,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    2,    3,    3,    4,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
        5,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3
    } ;

<<<<<<< HEAD
<<<<<<< HEAD
static yyconst flex_int16_t yy_base[1599] =
    {   0,
        0,   72,   21,   31,   43,   51,   54,   60,   91,   99,
     1987, 1988,   34, 1983,  145,    0,  207, 1988,  214,  221,
       13,  228, 1988, 1963,  118,   25,    2,    6, 1988, 1988,
       73,   11,   17, 1988, 1988, 1988,  104, 1971, 1924,    0,
     1961,  108, 1978,   24,  262, 1988, 1920,   67, 1919, 1925,
       84,   75, 1917,   88,  226,   91,   89,  290,  196, 1916,
      206,  285,  206,  210,  219,   60,  223, 1925,  247,  290,
      315,  303,  231, 1908,  297,  321,  343,  324, 1927,    0,
      380,  387,  401,  408,  424, 1988,    0, 1988,  429,  438,
      216,  249,  220,  315,  335,  266, 1988, 1924, 1965, 1988,

      342, 1988,  421, 1952,  312, 1910, 1920,  400,   10, 1915,
      361,  323,  370,  387,  359, 1960,    0,  474,  392, 1902,
     1899, 1903, 1905, 1898, 1906,  412, 1902, 1891, 1892,   78,
     1908, 1891, 1900, 1900,   95, 1891,  400, 1892, 1890,  405,
     1938, 1942, 1882, 1935, 1875, 1898, 1895, 1895, 1889,  310,
     1882, 1880, 1874, 1879, 1873,  436, 1884, 1877, 1868, 1867,
     1881,  413, 1867,  419, 1883, 1860,  470,  191,  400, 1881,
     1878, 1879, 1877, 1912, 1911,  451, 1857, 1859,  472, 1851,
     1868, 1860,    0,  471,  462,  446,  472,  473,  487, 1859,
     1988,    0, 1904,  492, 1849, 1852,  475,  481, 1860,  499,

     1905,  501, 1904,  509, 1903, 1988,  555, 1902,  519, 1861,
     1853, 1840, 1856, 1855, 1852, 1851, 1842,  493, 1893, 1887,
     1851, 1830, 1838, 1833, 1847, 1843, 1831, 1843, 1843, 1834,
     1818, 1822, 1835, 1837, 1834, 1826, 1816, 1834, 1988, 1829,
     1832, 1813, 1812, 1864, 1811, 1821, 1824,  483, 1820, 1859,
     1807, 1818, 1856, 1801, 1859, 1794, 1809,  498, 1799, 1815,
     1796, 1794, 1794, 1800, 1791, 1790, 1797, 1847, 1803, 1802,
     1796,  486, 1803, 1798, 1790, 1780, 1795, 1794, 1789, 1793,
      322, 1791, 1777, 1783, 1790, 1778, 1775, 1774,  542, 1769,
     1783, 1826, 1785,  366, 1776,  527, 1988, 1988,  534, 1988,

     1988, 1763,    0,  241,  515, 1765,  549,  536, 1821, 1772,
      525, 1988, 1819, 1988, 1813,  593, 1988,  521, 1753, 1762,
     1810, 1754, 1753, 1759, 1811, 1766, 1761, 1764, 1759,  530,
     1988, 1761, 1805, 1758, 1755,  578, 1761, 1801, 1795, 1748,
     1743, 1740, 1791, 1748, 1737, 1753, 1787, 1733,  586, 1747,
     1732, 1745, 1732, 1742, 1737, 1744, 1739, 1735,  560, 1733,
     1736, 1731, 1717, 1726, 1776,  513, 1770, 1988, 1769, 1719,
     1718, 1717, 1710, 1712, 1716, 1705, 1722, 1717,  549, 1764,
     1717, 1714, 1988, 1717, 1706, 1706, 1718,  531, 1693, 1694,
     1715,  546, 1697, 1748, 1693, 1707, 1710, 1705, 1691, 1703,

     1702, 1701, 1700, 1699, 1698,  556, 1741, 1740, 1988, 1682,
     1681,  618, 1694, 1988, 1988, 1693,    0, 1682, 1674,  562,
     1679, 1732, 1731, 1687, 1729, 1988, 1675, 1727, 1988,  596,
      644,  589, 1726, 1668, 1679, 1672, 1674, 1662, 1988, 1667,
     1673, 1676, 1659, 1674, 1661, 1660, 1988, 1662, 1659,  584,
     1657, 1659, 1988, 1667, 1664, 1649, 1662, 1657,  625, 1664,
     1652, 1645, 1696, 1988, 1643, 1659, 1693, 1654, 1651, 1652,
     1654, 1688, 1639, 1634, 1633, 1684, 1628, 1643, 1646, 1620,
     1627, 1632, 1642, 1681, 1988, 1626, 1622, 1620, 1629, 1623,
     1630, 1614, 1614, 1624, 1627, 1616, 1612, 1610, 1988, 1667,

     1988, 1609, 1620, 1605, 1610, 1619, 1613, 1607, 1616, 1658,
     1652, 1614, 1597, 1597, 1592, 1612, 1587, 1593, 1598, 1591,
     1599, 1603, 1586, 1644, 1584, 1585, 1584, 1596, 1585, 1988,
     1988, 1585, 1583, 1988, 1594, 1630, 1590,    0, 1574, 1591,
     1631, 1579, 1988, 1988, 1576, 1988, 1582, 1988,  554,  600,
      626, 1988, 1579, 1578, 1585, 1565, 1618, 1563, 1616, 1561,
     1560, 1559, 1566, 1559, 1571, 1570, 1570, 1552, 1557, 1598,
     1565, 1557, 1602, 1546, 1562, 1561, 1988, 1546, 1543, 1601,
     1556, 1548, 1554, 1545, 1553, 1538, 1554, 1536, 1550,  603,
     1532, 1526, 1531, 1546, 1543, 1544, 1534, 1540, 1583, 1538,

     1530, 1988, 1523, 1525, 1534, 1532, 1571, 1570, 1521,   16,
     1530, 1513, 1514, 1517, 1510, 1988, 1524, 1503, 1522, 1514,
     1559, 1511, 1518, 1556, 1988, 1501, 1515, 1499, 1513, 1516,
     1497, 1549, 1548, 1547, 1546, 1491, 1544, 1543, 1988,  328,
     1505, 1504, 1501, 1501, 1499, 1482, 1487, 1489, 1988, 1495,
     1485, 1988, 1532, 1478, 1535,  601,  627, 1476, 1474, 1481,
     1472, 1525,  625, 1529,  627, 1523, 1483, 1521, 1520, 1472,
     1462, 1517, 1468, 1476, 1477, 1513, 1474, 1468, 1455, 1463,
     1508, 1512, 1467, 1466, 1988, 1467, 1460, 1449, 1462, 1465,
     1460, 1461, 1458, 1457, 1453, 1459, 1454, 1497, 1496, 1444,

     1434,  623, 1445, 1492, 1988, 1491, 1442, 1437, 1429, 1430,
     1481, 1442, 1429, 1440, 1988,  160,  233,  340,  362,  427,
      489,  446,  545,  586,  577,  584,  645,  616,  600,  620,
      670,  671,  673,  620,  675,  639,  635,  640,  644,  629,
      641,  642, 1988,  696,  653,  654,  645,  658,  661,  646,
      653,  659,  651,  665,  670,  711, 1988,  707,  683,  670,
      675,  672,  673,  670,  668,  677, 1988,  667,  682,  679,
      665,  672,  671,  669,  688,  685,  675,  673,  672,  683,
      679,  735,  692,  682,  698,  688, 1988,  698,  699,  692,
      703,  701,  746,  688,  690,  705,  692,  752,  709,  695,

      698, 1988, 1988,  708,  713,  718,  706,  717, 1988, 1988,
      718,  722,  709,  703,  708,  726,  713,  763,  714,  766,
      715,  773, 1988, 1988,  718,  722,  717,  777,  730,  720,
      721,  717,  730,  741,  725,  743,  738,  739,  741,  734,
      736,  737,  738,  738,  740,  755,  796,  753,  758,  735,
     1988,  747,  748,  762,  752,  799,  757,  747,  762,  763,
      750,  764, 1988,  783,  791,  760,  755,  810,  811,  774,
      778,  819,  767,  762,  763,  775,  782,  771,  772,  768,
      777,  772,  830,  787,  788,  779, 1988,  781,  793,  778,
      795,  789,  836,  802,  786,  787, 1988,  803,  806,  789,

      848,  791, 1988,  808,  811,  791,  809,  849,  807,  803,
      852,  853,  800,  818,  817,  818,  804,  819,  811,  818,
      808,  826,  811, 1988,  819,  825,  872, 1988,  821,  826,
      870,  821,  833,  827,  832,  830,  828,  830,  840,  885,
      829,  834,  830,  889,  833,  845, 1988,  833,  841,  839,
      836,  837,  846,  858,  842,  847,  857,  858,  863,  904,
      861,  878,  883,  865,  862,  858,  853,  913,  856, 1988,
      856,  876,  875,  866,  855,  872,  879,  922,  923,  870,
     1988,  920,  867,  870,  869,  889,  886,  891,  892,  878,
      886,  897,  877,  892,  899,  941, 1988,  942,  943,  894,

      904,  906,  895,  891,  898,  907,  901,  902,  954,  901,
      899,  901,  918,  959,  909,  908,  914,  912,  910,  965,
      966,  962, 1988,  924,  917,  908,  927,  915,  925,  922,
      927,  923,  936,  936, 1988,  920,  922,  922, 1988,  923,
      983,  922,  941,  942,  988,  989,  942,  927,  948,  947,
      931,  936,  954, 1988,  944,  977,  968, 1000,  940,  962,
      959, 1988,  946,  948,  965,  960,  964, 1009,  957,  961,
     1988, 1988,  971,  971, 1009,  956, 1011,  958, 1018,  961,
      972,  965,  971,  967,  985,  986,  988, 1988, 1988,  987,
     1988,  972,  973,  992,  982,  975,  987, 1031,  995,  990,

      991, 1988,  989, 1041,  982, 1043, 1988, 1044,  986,  992,
      999, 1043, 1988, 1988,  991,  993, 1007, 1012,  995, 1054,
     1011, 1012, 1013, 1053, 1005, 1010, 1061, 1014, 1010, 1064,
     1988, 1011, 1066, 1067, 1988, 1988, 1007, 1069, 1028, 1071,
     1013, 1025, 1030, 1016, 1046, 1077, 1988, 1034, 1027, 1036,
     1081, 1028, 1043, 1079, 1031, 1988, 1027, 1043, 1048, 1035,
     1031, 1091, 1044, 1049, 1988, 1050, 1043, 1052, 1053, 1050,
     1040, 1043, 1043, 1048, 1103, 1105, 1048, 1107, 1103, 1044,
     1059, 1053, 1068, 1069, 1115, 1988, 1068, 1988, 1988, 1073,
     1066, 1076, 1061, 1062, 1123, 1067, 1078, 1127, 1988, 1075,

     1075, 1077, 1079, 1132, 1073, 1076, 1988, 1077, 1096, 1988,
     1080, 1988, 1988, 1094, 1988, 1088, 1988, 1140, 1089, 1142,
     1143, 1123, 1988, 1145, 1102, 1143, 1988, 1091, 1099, 1093,
     1090, 1093, 1096, 1096, 1097, 1104, 1094, 1988, 1116, 1102,
     1103, 1118, 1118, 1121, 1121, 1118, 1163, 1125, 1117, 1988,
     1988, 1127, 1988, 1124, 1129, 1130, 1127, 1171, 1133, 1134,
     1988, 1122, 1123, 1123, 1129, 1128, 1139, 1988, 1180, 1127,
     1988, 1128, 1128, 1130, 1136, 1988, 1138, 1192, 1134, 1142,
     1145, 1196, 1157, 1988, 1154, 1988, 1151, 1988, 1174, 1988,
     1201, 1143, 1203, 1204, 1161, 1166, 1148, 1208, 1209, 1162,

     1152, 1157, 1213, 1214, 1210, 1173, 1169, 1213, 1161, 1166,
     1164, 1223, 1179, 1225, 1183, 1228, 1189, 1178, 1172, 1173,
     1174, 1190, 1190, 1236, 1178, 1195, 1194, 1178, 1236, 1237,
     1184, 1239, 1202, 1203, 1988, 1203, 1204, 1191, 1988, 1202,
     1251, 1209, 1223, 1988, 1205, 1988, 1988, 1197, 1208, 1257,
     1988, 1988, 1204, 1202, 1216, 1988, 1988, 1206, 1257, 1200,
     1205, 1265, 1213, 1223, 1224, 1988, 1269, 1222, 1988, 1271,
     1988, 1214, 1229, 1217, 1227, 1228, 1234, 1238, 1988, 1274,
     1240, 1235, 1244, 1226, 1233, 1287, 1246, 1245, 1290, 1238,
     1292, 1293, 1242, 1988, 1295, 1296, 1245, 1298, 1240, 1988,

     1247, 1247, 1302, 1246, 1245, 1305, 1258, 1988, 1302, 1253,
     1250, 1988, 1264, 1988, 1267, 1312, 1265, 1262, 1263, 1316,
     1275, 1258, 1260, 1257, 1273, 1274, 1283, 1988, 1273, 1325,
     1988, 1284, 1988, 1988, 1322, 1988, 1988, 1284, 1988, 1324,
     1325, 1280, 1988, 1278, 1285, 1988, 1282, 1287, 1285, 1337,
     1338, 1281, 1988, 1296, 1297, 1298, 1988, 1299, 1289, 1301,
     1346, 1288, 1296, 1297, 1310, 1988, 1287, 1310, 1295, 1295,
     1300, 1356, 1315, 1306, 1315, 1317, 1321, 1988, 1988, 1362,
     1305, 1364, 1365, 1366, 1324, 1368, 1988, 1364, 1326, 1327,
     1314, 1373, 1310, 1375, 1328, 1333, 1988, 1334, 1335, 1380,

     1337, 1340, 1988, 1383, 1988, 1988, 1988, 1344, 1988, 1326,
     1386, 1387, 1330, 1988, 1347, 1988, 1338, 1334, 1334, 1336,
     1988, 1341, 1351, 1988, 1337, 1349, 1988, 1988, 1354, 1348,
     1356, 1353, 1344, 1398, 1345, 1353, 1362, 1355, 1350, 1365,
     1410, 1357, 1364, 1351, 1366, 1371, 1416, 1373, 1418, 1361,
     1988, 1377, 1368, 1382, 1378, 1371, 1988, 1425, 1988, 1426,
     1427, 1382, 1381, 1382, 1372, 1988, 1988, 1988, 1432, 1374,
     1390, 1435, 1988, 1431, 1380, 1988, 1379, 1381, 1392, 1441,
     1390, 1988, 1399, 1444, 1988, 1988, 1450, 1455, 1460, 1465,
     1470, 1475, 1480, 1483, 1457, 1462, 1464, 1477

    } ;

static yyconst flex_int16_t yy_def[1599] =
    {   0,
     1587, 1587, 1588, 1588, 1587, 1587, 1587, 1587, 1587, 1587,
     1586, 1586, 1586, 1586, 1586, 1589, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1590,
     1586, 1586, 1586, 1591,   15, 1586,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1592,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1589,
     1586, 1586, 1586, 1586, 1586, 1586, 1593, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1590, 1586,

     1591, 1586, 1586,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1594,   45, 1592,   45,   45,
=======
static const flex_int16_t yy_base[1603] =
    {   0,
        0,   72,   21,   31,   43,   51,   54,   60,   91,   99,
     1991, 1992,   34, 1987,  145,    0,  207, 1992,  214,  221,
       13,  228, 1992, 1967,  118,   25,    2,    6, 1992, 1992,
       73,   11,   17, 1992, 1992, 1992,  104, 1975, 1928,    0,
     1965,  108, 1982,   24,  262, 1992, 1924,   67, 1923, 1929,
       84,   75, 1921,   88,  226,   91,   89,  290,  196, 1920,
      206,  285,  206,  210,  219,   60,  223, 1929,  247,  290,
      315,  303,  231, 1912,  297,  321,  343,  324, 1931,    0,
      380,  387,  401,  408,  424, 1992,    0, 1992,  429,  438,
      216,  249,  220,  315,  335,  266, 1992, 1928, 1969, 1992,

      342, 1992,  421, 1956,  312, 1914, 1924,  400,   10, 1919,
      361,  323,  370,  387,  359, 1964,    0,  474,  392, 1906,
     1903, 1907, 1909, 1902, 1910,  412, 1906, 1895, 1896,   78,
     1912, 1895, 1904, 1904,   95, 1895,  400, 1896, 1894,  405,
     1942, 1946, 1886, 1939, 1879, 1902, 1899, 1899, 1893,  310,
     1886, 1884, 1878, 1883, 1877,  436, 1888, 1881, 1872, 1871,
     1885,  186, 1871,  413, 1887, 1864,  470,  318,  400, 1885,
     1882, 1883, 1881, 1916, 1915,  445, 1861, 1863,  448, 1855,
     1872, 1864,    0,  447,  447,  458,  471,  462,  483, 1863,
     1992,    0, 1908,  490, 1853, 1856,  476,  482, 1864,  488,

     1909,  499, 1908,  496, 1907, 1992,  542, 1906,  507, 1865,
     1857, 1844, 1860, 1859, 1856, 1855, 1846,  486, 1897, 1891,
     1855, 1834, 1842, 1837, 1851, 1847, 1835, 1847, 1847, 1838,
     1822, 1826, 1839, 1841, 1838, 1830, 1820, 1838, 1992, 1833,
     1836, 1817, 1816, 1868, 1815, 1825, 1828,  531, 1824, 1863,
     1811, 1822, 1860, 1805, 1863, 1798, 1813,  533, 1803, 1819,
     1800, 1799, 1805, 1796, 1795, 1802, 1852, 1808, 1807, 1801,
      486, 1808, 1803, 1795, 1785, 1800, 1799, 1794, 1798,  485,
     1796, 1782, 1788, 1795, 1783, 1780, 1779,  565, 1774, 1788,
     1831, 1790,  484, 1781,  527, 1992, 1992,  534, 1992, 1992,

     1768,    0,  241,  531, 1770,  556,  535, 1826, 1777,  540,
     1992, 1824, 1992, 1818,  590, 1992,  540, 1758, 1767, 1815,
     1759, 1758, 1764, 1816, 1771, 1766, 1769, 1764,  533, 1992,
     1766, 1810, 1763, 1760,  608, 1766, 1806, 1800, 1753, 1748,
     1745, 1796, 1753, 1742, 1758, 1792, 1738,  591, 1752, 1737,
     1750, 1737, 1747, 1742, 1749, 1744, 1740,  559, 1738, 1741,
     1736, 1722, 1731, 1781,  548, 1775, 1992, 1774, 1724, 1723,
     1722, 1715, 1717, 1721, 1710, 1723,  580, 1770, 1723, 1720,
     1992, 1723, 1712, 1712, 1724,  370, 1699, 1700, 1721,  533,
     1703, 1754, 1699, 1713, 1716, 1711, 1697, 1709, 1708, 1707,

     1706, 1705, 1704,  564, 1747, 1746, 1992, 1688, 1687,  618,
     1700, 1992, 1992, 1699,    0, 1688, 1680,  564, 1685, 1738,
     1737, 1693, 1735, 1992, 1681, 1733, 1992,  598,  646,  611,
     1732, 1674, 1685, 1678, 1680, 1668, 1992, 1673, 1679, 1682,
     1665, 1680, 1667, 1666, 1992, 1668, 1665,  584, 1663, 1665,
     1992, 1673, 1670, 1655, 1668, 1663,  643, 1670, 1658, 1651,
     1702, 1992, 1649, 1665, 1699, 1660, 1657, 1658, 1660, 1694,
     1645, 1640, 1639, 1690, 1634,  585, 1653, 1627, 1634, 1639,
     1649, 1688, 1992, 1633, 1629, 1627, 1636, 1630, 1637, 1621,
     1621, 1631, 1634, 1623, 1618, 1992, 1675, 1992, 1617, 1628,

     1613, 1618, 1627, 1621, 1615, 1624, 1666, 1660, 1622, 1605,
     1605, 1600, 1620, 1595, 1601, 1606, 1599, 1607, 1611, 1594,
     1652, 1592, 1593, 1592, 1604, 1593, 1992, 1992, 1593, 1591,
     1992, 1602, 1638, 1598,    0, 1582, 1599, 1639, 1587, 1992,
     1992, 1584, 1992, 1590, 1992,  598,  616,  670, 1992, 1587,
     1586, 1593, 1573, 1626, 1571, 1624, 1569, 1568, 1567, 1574,
     1567, 1579, 1578, 1578, 1560, 1565, 1606, 1573, 1565, 1610,
     1554, 1570, 1569, 1992, 1554, 1551, 1609, 1564, 1556, 1562,
     1553, 1561, 1546, 1562, 1544, 1558,  341, 1540, 1534, 1539,
     1554, 1551, 1552, 1531, 1541, 1547, 1590, 1545, 1537, 1992,

     1530, 1532, 1541, 1539, 1578, 1577, 1528,   16, 1537, 1520,
     1521, 1518, 1992, 1532, 1511, 1530, 1522, 1567, 1519, 1526,
     1564, 1992, 1509, 1523, 1507, 1521, 1524, 1505, 1557, 1556,
     1555, 1554, 1499, 1552, 1551, 1992,  328, 1513, 1512, 1509,
     1509, 1507, 1490, 1495, 1497, 1992, 1503, 1493, 1992, 1540,
     1486, 1543,  615,  584, 1484, 1482, 1489, 1480, 1533,  629,
     1537,  617, 1531, 1491, 1529, 1528, 1480, 1470, 1525, 1476,
     1484, 1485, 1521, 1482, 1476, 1463, 1471, 1516, 1520, 1475,
     1474, 1992, 1475, 1468, 1457, 1470, 1473, 1468, 1469, 1466,
     1465, 1461, 1467, 1462, 1505, 1504, 1452, 1442,  596, 1496,

     1452, 1499, 1992, 1498, 1449, 1444, 1436, 1437, 1488, 1449,
     1436, 1447, 1992, 1435, 1444, 1443,  171,  277,  347,  440,
      448,  478,  498,  553,  530,  547,  573,  631,  632,  656,
      613,  671,  636,  637,  637,  646,  616,  628,  643, 1992,
      682,  639,  640,  640,  653,  655,  640,  647,  655,  647,
      662,  667,  708, 1992,  704,  680,  667,  672,  669,  670,
      667,  665,  674, 1992,  664,  679,  676,  662,  669,  668,
      666,  685,  682,  672,  670,  669,  680,  676,  732,  689,
      679,  695,  685, 1992,  695,  696,  689,  700,  698,  743,
      685,  687,  702,  689,  749,  706,  692,  695, 1992, 1992,

      705,  710,  715,  703,  713,  715, 1992, 1992,  716,  720,
      707,  701,  706,  724,  711,  761,  712,  764,  713,  771,
     1992,  716,  720,  715,  775,  728,  718,  719,  715,  728,
      739,  723,  741,  736,  737,  739,  732,  734,  735,  736,
      736,  738,  753,  794,  751,  756,  733, 1992,  745,  746,
      760,  750,  797,  755,  745,  760,  761,  748,  762, 1992,
      781,  789,  758,  753,  808,  809,  772,  776,  817,  765,
      760,  761,  773,  780,  769,  770,  766,  775,  770,  828,
      785,  786,  777, 1992,  779,  791,  776,  793,  787,  834,
      800,  784,  785, 1992,  801,  804,  787,  846,  789, 1992,

      806,  809,  789,  807,  847,  805,  801,  798,  851,  852,
      799,  817,  816,  817,  803,  818,  810,  817,  807,  825,
      810, 1992,  818,  824,  871, 1992,  820,  825,  869,  820,
      832,  826,  831,  829,  827,  829,  839,  884,  828,  833,
      829,  888,  832,  844, 1992,  832,  840,  838,  835,  836,
      845,  857,  841,  846,  856,  857,  862,  903,  861,  877,
      882,  864,  861,  857,  852,  912,  855, 1992,  855,  875,
      874,  865,  854,  871,  878,  921,  922,  869, 1992,  919,
      866,  869,  868,  888,  885,  890,  891,  877,  885,  896,
      876,  891,  898,  940, 1992,  941,  942,  893,  903,  905,

      894,  890,  897,  906,  894,  901,  902,  954,  901,  899,
      901,  918,  959,  909,  908,  914,  912,  910,  965,  966,
      962, 1992,  924,  917,  908,  927,  915,  925,  922,  927,
      923,  936,  936, 1992,  920,  922,  922, 1992,  923,  983,
      922,  941,  943,  988,  989,  942,  927,  948,  947,  931,
      936,  954, 1992,  944,  977,  968, 1000,  940,  962,  959,
     1992,  946,  948,  965,  960,  964, 1009,  957,  961, 1992,
     1992,  971,  971, 1009,  956, 1011,  958, 1018,  961,  972,
      965,  971,  967,  985,  986,  988, 1992, 1992,  987, 1992,
      972,  973,  992,  982,  975,  987, 1031,  995,  984,  991,

      992, 1992,  990, 1042,  983, 1044, 1992, 1045,  987,  993,
     1000, 1044, 1992, 1992,  992,  994, 1008, 1013,  996, 1055,
     1012, 1013, 1014, 1054, 1006, 1011, 1062, 1015, 1011, 1065,
     1992, 1012, 1067, 1068, 1992, 1992, 1008, 1070, 1029, 1072,
     1014, 1026, 1031, 1017, 1047, 1078, 1992, 1035, 1028, 1037,
     1082, 1029, 1044, 1080, 1032, 1992, 1028, 1044, 1049, 1036,
     1032, 1092, 1045, 1050, 1992, 1051, 1044, 1053, 1054, 1051,
     1041, 1044, 1044, 1049, 1104, 1106, 1049, 1108, 1104, 1045,
     1060, 1054, 1057, 1070, 1071, 1117, 1992, 1070, 1992, 1992,
     1076, 1068, 1078, 1063, 1064, 1125, 1070, 1080, 1129, 1992,

     1077, 1077, 1079, 1081, 1134, 1075, 1078, 1992, 1079, 1098,
     1992, 1082, 1992, 1992, 1096, 1992, 1090, 1992, 1142, 1091,
     1144, 1145, 1125, 1992, 1147, 1104, 1145, 1992, 1093, 1101,
     1095, 1092, 1095, 1098, 1098, 1099, 1106, 1096, 1992, 1118,
     1104, 1105, 1120, 1120, 1123, 1123, 1120, 1165, 1127, 1119,
     1992, 1992, 1129, 1992, 1126, 1131, 1132, 1129, 1173, 1121,
     1136, 1137, 1992, 1125, 1126, 1126, 1132, 1131, 1142, 1992,
     1183, 1130, 1992, 1131, 1131, 1133, 1139, 1992, 1141, 1195,
     1137, 1145, 1148, 1199, 1160, 1992, 1157, 1992, 1154, 1992,
     1177, 1992, 1204, 1146, 1206, 1207, 1164, 1169, 1151, 1211,

     1212, 1165, 1155, 1160, 1216, 1217, 1213, 1176, 1172, 1216,
     1164, 1169, 1167, 1226, 1182, 1228, 1186, 1231, 1192, 1181,
     1175, 1235, 1177, 1178, 1194, 1194, 1240, 1182, 1199, 1198,
     1182, 1240, 1241, 1188, 1243, 1206, 1207, 1992, 1207, 1208,
     1195, 1992, 1206, 1255, 1213, 1226, 1992, 1210, 1992, 1992,
     1201, 1212, 1261, 1992, 1992, 1208, 1206, 1220, 1992, 1992,
     1210, 1261, 1204, 1209, 1269, 1217, 1227, 1228, 1992, 1273,
     1226, 1992, 1275, 1992, 1218, 1233, 1221, 1992, 1231, 1232,
     1238, 1242, 1992, 1278, 1246, 1239, 1248, 1230, 1237, 1291,
     1250, 1249, 1294, 1242, 1296, 1297, 1246, 1992, 1299, 1300,

     1249, 1302, 1244, 1992, 1251, 1251, 1306, 1250, 1249, 1309,
     1262, 1992, 1306, 1257, 1254, 1992, 1268, 1992, 1271, 1316,
     1269, 1266, 1267, 1320, 1279, 1262, 1264, 1261, 1277, 1278,
     1287, 1992, 1277, 1329, 1992, 1288, 1992, 1992, 1326, 1992,
     1992, 1288, 1992, 1328, 1329, 1284, 1992, 1282, 1289, 1992,
     1286, 1291, 1289, 1341, 1342, 1285, 1992, 1300, 1301, 1302,
     1992, 1303, 1293, 1305, 1350, 1292, 1300, 1301, 1314, 1992,
     1291, 1314, 1299, 1299, 1304, 1360, 1319, 1310, 1319, 1321,
     1325, 1992, 1992, 1366, 1309, 1368, 1369, 1370, 1328, 1372,
     1992, 1368, 1330, 1331, 1318, 1377, 1314, 1379, 1332, 1337,

     1992, 1338, 1339, 1384, 1341, 1344, 1992, 1387, 1992, 1992,
     1992, 1348, 1992, 1330, 1390, 1391, 1334, 1992, 1351, 1992,
     1342, 1338, 1338, 1340, 1992, 1345, 1355, 1992, 1341, 1353,
     1992, 1992, 1358, 1352, 1360, 1357, 1348, 1402, 1349, 1357,
     1366, 1359, 1354, 1369, 1414, 1361, 1368, 1355, 1370, 1375,
     1420, 1377, 1422, 1365, 1992, 1381, 1372, 1386, 1382, 1375,
     1992, 1429, 1992, 1430, 1431, 1386, 1385, 1386, 1376, 1992,
     1992, 1992, 1436, 1378, 1394, 1439, 1992, 1435, 1384, 1992,
     1383, 1385, 1396, 1445, 1394, 1992, 1403, 1448, 1992, 1992,
     1454, 1459, 1464, 1469, 1474, 1479, 1484, 1487, 1461, 1466,

     1468, 1481
    } ;

static const flex_int16_t yy_def[1603] =
    {   0,
     1591, 1591, 1592, 1592, 1591, 1591, 1591, 1591, 1591, 1591,
     1590, 1590, 1590, 1590, 1590, 1593, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1594,
     1590, 1590, 1590, 1595,   15, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1596,   45,   45,
=======
static const flex_int16_t yy_base[1603] =
    {   0,
        0,   72,   21,   31,   43,   51,   54,   60,   91,   99,
     1991, 1992,   34, 1987,  145,    0,  207, 1992,  214,  221,
       13,  228, 1992, 1967,  118,   25,    2,    6, 1992, 1992,
       73,   11,   17, 1992, 1992, 1992,  104, 1975, 1928,    0,
     1965,  108, 1982,   24,  262, 1992, 1924,   67, 1923, 1929,
       84,   75, 1921,   88,  226,   91,   89,  290,  196, 1920,
      206,  285,  206,  210,  219,   60,  223, 1929,  247,  290,
      315,  303,  231, 1912,  297,  321,  343,  324, 1931,    0,
      380,  387,  401,  408,  424, 1992,    0, 1992,  429,  438,
      216,  249,  220,  315,  335,  266, 1992, 1928, 1969, 1992,

      342, 1992,  421, 1956,  312, 1914, 1924,  400,   10, 1919,
      361,  323,  370,  387,  359, 1964,    0,  474,  392, 1906,
     1903, 1907, 1909, 1902, 1910,  412, 1906, 1895, 1896,   78,
     1912, 1895, 1904, 1904,   95, 1895,  400, 1896, 1894,  405,
     1942, 1946, 1886, 1939, 1879, 1902, 1899, 1899, 1893,  310,
     1886, 1884, 1878, 1883, 1877,  436, 1888, 1881, 1872, 1871,
     1885,  186, 1871,  413, 1887, 1864,  470,  318,  400, 1885,
     1882, 1883, 1881, 1916, 1915,  445, 1861, 1863,  448, 1855,
     1872, 1864,    0,  447,  447,  458,  471,  462,  483, 1863,
     1992,    0, 1908,  490, 1853, 1856,  476,  482, 1864,  488,

     1909,  499, 1908,  496, 1907, 1992,  542, 1906,  507, 1865,
     1857, 1844, 1860, 1859, 1856, 1855, 1846,  486, 1897, 1891,
     1855, 1834, 1842, 1837, 1851, 1847, 1835, 1847, 1847, 1838,
     1822, 1826, 1839, 1841, 1838, 1830, 1820, 1838, 1992, 1833,
     1836, 1817, 1816, 1868, 1815, 1825, 1828,  531, 1824, 1863,
     1811, 1822, 1860, 1805, 1863, 1798, 1813,  533, 1803, 1819,
     1800, 1799, 1805, 1796, 1795, 1802, 1852, 1808, 1807, 1801,
      486, 1808, 1803, 1795, 1785, 1800, 1799, 1794, 1798,  485,
     1796, 1782, 1788, 1795, 1783, 1780, 1779,  565, 1774, 1788,
     1831, 1790,  484, 1781,  527, 1992, 1992,  534, 1992, 1992,

     1768,    0,  241,  531, 1770,  556,  535, 1826, 1777,  540,
     1992, 1824, 1992, 1818,  590, 1992,  540, 1758, 1767, 1815,
     1759, 1758, 1764, 1816, 1771, 1766, 1769, 1764,  533, 1992,
     1766, 1810, 1763, 1760,  608, 1766, 1806, 1800, 1753, 1748,
     1745, 1796, 1753, 1742, 1758, 1792, 1738,  591, 1752, 1737,
     1750, 1737, 1747, 1742, 1749, 1744, 1740,  559, 1738, 1741,
     1736, 1722, 1731, 1781,  548, 1775, 1992, 1774, 1724, 1723,
     1722, 1715, 1717, 1721, 1710, 1723,  580, 1770, 1723, 1720,
     1992, 1723, 1712, 1712, 1724,  370, 1699, 1700, 1721,  533,
     1703, 1754, 1699, 1713, 1716, 1711, 1697, 1709, 1708, 1707,

     1706, 1705, 1704,  564, 1747, 1746, 1992, 1688, 1687,  618,
     1700, 1992, 1992, 1699,    0, 1688, 1680,  564, 1685, 1738,
     1737, 1693, 1735, 1992, 1681, 1733, 1992,  598,  646,  611,
     1732, 1674, 1685, 1678, 1680, 1668, 1992, 1673, 1679, 1682,
     1665, 1680, 1667, 1666, 1992, 1668, 1665,  584, 1663, 1665,
     1992, 1673, 1670, 1655, 1668, 1663,  643, 1670, 1658, 1651,
     1702, 1992, 1649, 1665, 1699, 1660, 1657, 1658, 1660, 1694,
     1645, 1640, 1639, 1690, 1634,  585, 1653, 1627, 1634, 1639,
     1649, 1688, 1992, 1633, 1629, 1627, 1636, 1630, 1637, 1621,
     1621, 1631, 1634, 1623, 1618, 1992, 1675, 1992, 1617, 1628,

     1613, 1618, 1627, 1621, 1615, 1624, 1666, 1660, 1622, 1605,
     1605, 1600, 1620, 1595, 1601, 1606, 1599, 1607, 1611, 1594,
     1652, 1592, 1593, 1592, 1604, 1593, 1992, 1992, 1593, 1591,
     1992, 1602, 1638, 1598,    0, 1582, 1599, 1639, 1587, 1992,
     1992, 1584, 1992, 1590, 1992,  598,  616,  670, 1992, 1587,
     1586, 1593, 1573, 1626, 1571, 1624, 1569, 1568, 1567, 1574,
     1567, 1579, 1578, 1578, 1560, 1565, 1606, 1573, 1565, 1610,
     1554, 1570, 1569, 1992, 1554, 1551, 1609, 1564, 1556, 1562,
     1553, 1561, 1546, 1562, 1544, 1558,  341, 1540, 1534, 1539,
     1554, 1551, 1552, 1531, 1541, 1547, 1590, 1545, 1537, 1992,

     1530, 1532, 1541, 1539, 1578, 1577, 1528,   16, 1537, 1520,
     1521, 1518, 1992, 1532, 1511, 1530, 1522, 1567, 1519, 1526,
     1564, 1992, 1509, 1523, 1507, 1521, 1524, 1505, 1557, 1556,
     1555, 1554, 1499, 1552, 1551, 1992,  328, 1513, 1512, 1509,
     1509, 1507, 1490, 1495, 1497, 1992, 1503, 1493, 1992, 1540,
     1486, 1543,  615,  584, 1484, 1482, 1489, 1480, 1533,  629,
     1537,  617, 1531, 1491, 1529, 1528, 1480, 1470, 1525, 1476,
     1484, 1485, 1521, 1482, 1476, 1463, 1471, 1516, 1520, 1475,
     1474, 1992, 1475, 1468, 1457, 1470, 1473, 1468, 1469, 1466,
     1465, 1461, 1467, 1462, 1505, 1504, 1452, 1442,  596, 1496,

     1452, 1499, 1992, 1498, 1449, 1444, 1436, 1437, 1488, 1449,
     1436, 1447, 1992, 1435, 1444, 1443,  171,  277,  347,  440,
      448,  478,  498,  553,  530,  547,  573,  631,  632,  656,
      613,  671,  636,  637,  637,  646,  616,  628,  643, 1992,
      682,  639,  640,  640,  653,  655,  640,  647,  655,  647,
      662,  667,  708, 1992,  704,  680,  667,  672,  669,  670,
      667,  665,  674, 1992,  664,  679,  676,  662,  669,  668,
      666,  685,  682,  672,  670,  669,  680,  676,  732,  689,
      679,  695,  685, 1992,  695,  696,  689,  700,  698,  743,
      685,  687,  702,  689,  749,  706,  692,  695, 1992, 1992,

      705,  710,  715,  703,  713,  715, 1992, 1992,  716,  720,
      707,  701,  706,  724,  711,  761,  712,  764,  713,  771,
     1992,  716,  720,  715,  775,  728,  718,  719,  715,  728,
      739,  723,  741,  736,  737,  739,  732,  734,  735,  736,
      736,  738,  753,  794,  751,  756,  733, 1992,  745,  746,
      760,  750,  797,  755,  745,  760,  761,  748,  762, 1992,
      781,  789,  758,  753,  808,  809,  772,  776,  817,  765,
      760,  761,  773,  780,  769,  770,  766,  775,  770,  828,
      785,  786,  777, 1992,  779,  791,  776,  793,  787,  834,
      800,  784,  785, 1992,  801,  804,  787,  846,  789, 1992,

      806,  809,  789,  807,  847,  805,  801,  798,  851,  852,
      799,  817,  816,  817,  803,  818,  810,  817,  807,  825,
      810, 1992,  818,  824,  871, 1992,  820,  825,  869,  820,
      832,  826,  831,  829,  827,  829,  839,  884,  828,  833,
      829,  888,  832,  844, 1992,  832,  840,  838,  835,  836,
      845,  857,  841,  846,  856,  857,  862,  903,  861,  877,
      882,  864,  861,  857,  852,  912,  855, 1992,  855,  875,
      874,  865,  854,  871,  878,  921,  922,  869, 1992,  919,
      866,  869,  868,  888,  885,  890,  891,  877,  885,  896,
      876,  891,  898,  940, 1992,  941,  942,  893,  903,  905,

      894,  890,  897,  906,  894,  901,  902,  954,  901,  899,
      901,  918,  959,  909,  908,  914,  912,  910,  965,  966,
      962, 1992,  924,  917,  908,  927,  915,  925,  922,  927,
      923,  936,  936, 1992,  920,  922,  922, 1992,  923,  983,
      922,  941,  943,  988,  989,  942,  927,  948,  947,  931,
      936,  954, 1992,  944,  977,  968, 1000,  940,  962,  959,
     1992,  946,  948,  965,  960,  964, 1009,  957,  961, 1992,
     1992,  971,  971, 1009,  956, 1011,  958, 1018,  961,  972,
      965,  971,  967,  985,  986,  988, 1992, 1992,  987, 1992,
      972,  973,  992,  982,  975,  987, 1031,  995,  984,  991,

      992, 1992,  990, 1042,  983, 1044, 1992, 1045,  987,  993,
     1000, 1044, 1992, 1992,  992,  994, 1008, 1013,  996, 1055,
     1012, 1013, 1014, 1054, 1006, 1011, 1062, 1015, 1011, 1065,
     1992, 1012, 1067, 1068, 1992, 1992, 1008, 1070, 1029, 1072,
     1014, 1026, 1031, 1017, 1047, 1078, 1992, 1035, 1028, 1037,
     1082, 1029, 1044, 1080, 1032, 1992, 1028, 1044, 1049, 1036,
     1032, 1092, 1045, 1050, 1992, 1051, 1044, 1053, 1054, 1051,
     1041, 1044, 1044, 1049, 1104, 1106, 1049, 1108, 1104, 1045,
     1060, 1054, 1057, 1070, 1071, 1117, 1992, 1070, 1992, 1992,
     1076, 1068, 1078, 1063, 1064, 1125, 1070, 1080, 1129, 1992,

     1077, 1077, 1079, 1081, 1134, 1075, 1078, 1992, 1079, 1098,
     1992, 1082, 1992, 1992, 1096, 1992, 1090, 1992, 1142, 1091,
     1144, 1145, 1125, 1992, 1147, 1104, 1145, 1992, 1093, 1101,
     1095, 1092, 1095, 1098, 1098, 1099, 1106, 1096, 1992, 1118,
     1104, 1105, 1120, 1120, 1123, 1123, 1120, 1165, 1127, 1119,
     1992, 1992, 1129, 1992, 1126, 1131, 1132, 1129, 1173, 1121,
     1136, 1137, 1992, 1125, 1126, 1126, 1132, 1131, 1142, 1992,
     1183, 1130, 1992, 1131, 1131, 1133, 1139, 1992, 1141, 1195,
     1137, 1145, 1148, 1199, 1160, 1992, 1157, 1992, 1154, 1992,
     1177, 1992, 1204, 1146, 1206, 1207, 1164, 1169, 1151, 1211,

     1212, 1165, 1155, 1160, 1216, 1217, 1213, 1176, 1172, 1216,
     1164, 1169, 1167, 1226, 1182, 1228, 1186, 1231, 1192, 1181,
     1175, 1235, 1177, 1178, 1194, 1194, 1240, 1182, 1199, 1198,
     1182, 1240, 1241, 1188, 1243, 1206, 1207, 1992, 1207, 1208,
     1195, 1992, 1206, 1255, 1213, 1226, 1992, 1210, 1992, 1992,
     1201, 1212, 1261, 1992, 1992, 1208, 1206, 1220, 1992, 1992,
     1210, 1261, 1204, 1209, 1269, 1217, 1227, 1228, 1992, 1273,
     1226, 1992, 1275, 1992, 1218, 1233, 1221, 1992, 1231, 1232,
     1238, 1242, 1992, 1278, 1246, 1239, 1248, 1230, 1237, 1291,
     1250, 1249, 1294, 1242, 1296, 1297, 1246, 1992, 1299, 1300,

     1249, 1302, 1244, 1992, 1251, 1251, 1306, 1250, 1249, 1309,
     1262, 1992, 1306, 1257, 1254, 1992, 1268, 1992, 1271, 1316,
     1269, 1266, 1267, 1320, 1279, 1262, 1264, 1261, 1277, 1278,
     1287, 1992, 1277, 1329, 1992, 1288, 1992, 1992, 1326, 1992,
     1992, 1288, 1992, 1328, 1329, 1284, 1992, 1282, 1289, 1992,
     1286, 1291, 1289, 1341, 1342, 1285, 1992, 1300, 1301, 1302,
     1992, 1303, 1293, 1305, 1350, 1292, 1300, 1301, 1314, 1992,
     1291, 1314, 1299, 1299, 1304, 1360, 1319, 1310, 1319, 1321,
     1325, 1992, 1992, 1366, 1309, 1368, 1369, 1370, 1328, 1372,
     1992, 1368, 1330, 1331, 1318, 1377, 1314, 1379, 1332, 1337,

     1992, 1338, 1339, 1384, 1341, 1344, 1992, 1387, 1992, 1992,
     1992, 1348, 1992, 1330, 1390, 1391, 1334, 1992, 1351, 1992,
     1342, 1338, 1338, 1340, 1992, 1345, 1355, 1992, 1341, 1353,
     1992, 1992, 1358, 1352, 1360, 1357, 1348, 1402, 1349, 1357,
     1366, 1359, 1354, 1369, 1414, 1361, 1368, 1355, 1370, 1375,
     1420, 1377, 1422, 1365, 1992, 1381, 1372, 1386, 1382, 1375,
     1992, 1429, 1992, 1430, 1431, 1386, 1385, 1386, 1376, 1992,
     1992, 1992, 1436, 1378, 1394, 1439, 1992, 1435, 1384, 1992,
     1383, 1385, 1396, 1445, 1394, 1992, 1403, 1448, 1992, 1992,
     1454, 1459, 1464, 1469, 1474, 1479, 1484, 1487, 1461, 1466,

     1468, 1481
    } ;

static const flex_int16_t yy_def[1603] =
    {   0,
     1591, 1591, 1592, 1592, 1591, 1591, 1591, 1591, 1591, 1591,
     1590, 1590, 1590, 1590, 1590, 1593, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1594,
     1590, 1590, 1590, 1595,   15, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1596,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1593,
     1590, 1590, 1590, 1590, 1590, 1590, 1597, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1594, 1590,

     1595, 1590, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1598,   45, 1596,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1593,
     1590, 1590, 1590, 1590, 1590, 1590, 1597, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1594, 1590,

     1595, 1590, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1598,   45, 1596,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45, 1593, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1595,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45, 1594, 1586, 1592,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45, 1597, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1599,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45, 1598, 1590, 1596,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1596,   45,   45,   45,   45,   45,   45,   45,
       45, 1586,   45, 1586,   45, 1592, 1586,   45,   45,   45,
=======
       45,   45,   45,   45, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1600,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45, 1590,   45, 1596, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1586,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
=======
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45,   45,   45, 1586,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
       45,   45,   45, 1586, 1586, 1586, 1597,   45,   45,   45,
       45,   45,   45,   45,   45, 1586,   45,   45, 1586,   45,
     1592,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1586,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1586,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
=======
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45, 1590, 1590, 1590, 1601,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45, 1590,   45, 1596,   45,
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1590,   45, 1590,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

     1586,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1586,
     1586,   45,   45, 1586,   45,   45, 1586, 1598,   45,   45,
       45,   45, 1586, 1586,   45, 1586,   45, 1586,   45,   45,
       45, 1586,   45,   45,   45,   45,   45,   45,   45,   45,
=======
       45,   45,   45,   45, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1600,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45, 1590,   45, 1596, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD

       45, 1586,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1586,   45,   45,   45,   45,
       45,   45,   45,   45, 1586,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
       45, 1586,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1586,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45, 1586,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1586,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
=======
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45, 1590, 1590, 1590, 1601,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45, 1590,   45, 1596,   45,
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1590,   45, 1590,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

       45, 1586, 1586,   45,   45,   45,   45,   45, 1586, 1586,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1586, 1586,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45, 1590, 1590,   45,   45,
     1590,   45,   45, 1590, 1602,   45,   45,   45,   45, 1590,
     1590,   45, 1590,   45, 1590,   45,   45,   45, 1590,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1590,   45,   45, 1590,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1590, 1590,

       45,   45,   45,   45,   45,   45, 1590, 1590,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1586,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
=======
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
=======
       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45,   45,   45, 1590,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

       45,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
<<<<<<< HEAD
       45,   45,   45, 1586,   45,   45,   45, 1586,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1586,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1586,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1586,   45,   45,   45, 1586,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1586,   45,   45,   45,   45,   45,   45,
       45, 1586,   45,   45,   45,   45,   45,   45,   45,   45,
     1586, 1586,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1586, 1586,   45,
     1586,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45, 1586,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45, 1586, 1586,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1586,   45,   45,   45, 1586, 1586,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45, 1586,   45,   45,   45,   45,
       45,   45,   45,   45, 1586,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45, 1586,   45, 1586, 1586,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
=======
       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45,   45,   45, 1590,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

       45,   45,   45,   45,   45,   45, 1586,   45,   45, 1586,
       45, 1586, 1586,   45, 1586,   45, 1586,   45,   45,   45,
       45,   45, 1586,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1586,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1586,
     1586,   45, 1586,   45,   45,   45,   45,   45,   45,   45,
     1586,   45,   45,   45,   45,   45,   45, 1586,   45,   45,
     1586,   45,   45,   45,   45, 1586,   45,   45,   45,   45,
       45,   45,   45, 1586,   45, 1586,   45, 1586,   45, 1586,
=======
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1590, 1590,   45, 1590,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
=======
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1590,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1590, 1590,   45, 1590,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

       45, 1590,   45,   45,   45,   45, 1590,   45,   45,   45,
       45,   45, 1590, 1590,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45, 1590, 1590,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
       45,   45,   45,   45,   45, 1590,   45,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1590,   45, 1590, 1590,
       45,   45,   45,   45,   45,   45,   45,   45,   45, 1590,

       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
     1590,   45, 1590, 1590,   45, 1590,   45, 1590,   45,   45,
       45,   45,   45, 1590,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1590, 1590,   45, 1590,   45,   45,   45,   45,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45, 1590,
       45,   45, 1590,   45,   45,   45,   45, 1590,   45,   45,
       45,   45,   45,   45,   45, 1590,   45, 1590,   45, 1590,
       45, 1590,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
<<<<<<< HEAD
       45,   45,   45,   45, 1586,   45,   45,   45, 1586,   45,
       45,   45,   45, 1586,   45, 1586, 1586,   45,   45,   45,
     1586, 1586,   45,   45,   45, 1586, 1586,   45,   45,   45,
       45,   45,   45,   45,   45, 1586,   45,   45, 1586,   45,
     1586,   45,   45,   45,   45,   45,   45,   45, 1586,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45, 1586,   45,   45,   45,   45,   45, 1586,

       45,   45,   45,   45,   45,   45,   45, 1586,   45,   45,
       45, 1586,   45, 1586,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1586,   45,   45,
     1586,   45, 1586, 1586,   45, 1586, 1586,   45, 1586,   45,
       45,   45, 1586,   45,   45, 1586,   45,   45,   45,   45,
       45,   45, 1586,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45, 1586,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1586, 1586,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,
       45,   45,   45,   45,   45,   45, 1586,   45,   45,   45,

       45,   45, 1586,   45, 1586, 1586, 1586,   45, 1586,   45,
       45,   45,   45, 1586,   45, 1586,   45,   45,   45,   45,
     1586,   45,   45, 1586,   45,   45, 1586, 1586,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
     1586,   45,   45,   45,   45,   45, 1586,   45, 1586,   45,
       45,   45,   45,   45,   45, 1586, 1586, 1586,   45,   45,
       45,   45, 1586,   45,   45, 1586,   45,   45,   45,   45,
       45, 1586,   45,   45, 1586,    0, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586
=======
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
       45, 1590,   45,   45,   45,   45, 1590,   45, 1590, 1590,
       45,   45,   45, 1590, 1590,   45,   45,   45, 1590, 1590,
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
       45, 1590,   45, 1590,   45,   45,   45, 1590,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,

       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45, 1590,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45, 1590,   45, 1590, 1590,   45, 1590,
     1590,   45, 1590,   45,   45,   45, 1590,   45,   45, 1590,
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590, 1590,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,

     1590,   45,   45,   45,   45,   45, 1590,   45, 1590, 1590,
     1590,   45, 1590,   45,   45,   45,   45, 1590,   45, 1590,
       45,   45,   45,   45, 1590,   45,   45, 1590,   45,   45,
     1590, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
     1590,   45, 1590,   45,   45,   45,   45,   45,   45, 1590,
     1590, 1590,   45,   45,   45,   45, 1590,   45,   45, 1590,
       45,   45,   45,   45,   45, 1590,   45,   45, 1590,    0,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

     1590, 1590
    } ;

<<<<<<< HEAD
static yyconst flex_int16_t yy_nxt[2062] =
    {   0,
     1586,   13,   14,   13, 1586,   15,   16, 1586,   17,   18,
       19,   20,   21,   22,   22,   22,   22,   22,   23,   24,
       86,  715,   37,   14,   37,   87,   25,   26,   38,  102,
     1586,   27,   37,   14,   37,   42,   28,   42,   38,   92,
       93,   29,  198,   30,   13,   14,   13,   91,   92,   25,
       31,   93,   13,   14,   13,   13,   14,   13,   32,   40,
      716,   13,   14,   13,   33,   40,  103,   92,   93,  198,
=======
static const flex_int16_t yy_nxt[2066] =
    {   0,
     1590,   13,   14,   13, 1590,   15,   16, 1590,   17,   18,
       19,   20,   21,   22,   22,   22,   22,   22,   23,   24,
       86,  713,   37,   14,   37,   87,   25,   26,   38,  102,
     1590,   27,   37,   14,   37,   42,   28,   42,   38,   92,
       93,   29,  198,   30,   13,   14,   13,   91,   92,   25,
       31,   93,   13,   14,   13,   13,   14,   13,   32,   40,
      714,   13,   14,   13,   33,   40,  103,   92,   93,  198,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,
       45, 1590,   45,   45,   45,   45, 1590,   45, 1590, 1590,
       45,   45,   45, 1590, 1590,   45,   45,   45, 1590, 1590,
       45,   45,   45,   45,   45,   45,   45,   45, 1590,   45,
       45, 1590,   45, 1590,   45,   45,   45, 1590,   45,   45,
       45,   45, 1590,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45, 1590,   45,   45,

       45,   45,   45, 1590,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45,   45, 1590,   45, 1590,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590,   45,   45, 1590,   45, 1590, 1590,   45, 1590,
     1590,   45, 1590,   45,   45,   45, 1590,   45,   45, 1590,
       45,   45,   45,   45,   45,   45, 1590,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45, 1590,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45, 1590, 1590,   45,   45,   45,   45,   45,   45,   45,
     1590,   45,   45,   45,   45,   45,   45,   45,   45,   45,

     1590,   45,   45,   45,   45,   45, 1590,   45, 1590, 1590,
     1590,   45, 1590,   45,   45,   45,   45, 1590,   45, 1590,
       45,   45,   45,   45, 1590,   45,   45, 1590,   45,   45,
     1590, 1590,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45, 1590,   45,   45,   45,   45,   45,
     1590,   45, 1590,   45,   45,   45,   45,   45,   45, 1590,
     1590, 1590,   45,   45,   45,   45, 1590,   45,   45, 1590,
       45,   45,   45,   45,   45, 1590,   45,   45, 1590,    0,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1590
    } ;

static const flex_int16_t yy_nxt[2066] =
    {   0,
     1590,   13,   14,   13, 1590,   15,   16, 1590,   17,   18,
       19,   20,   21,   22,   22,   22,   22,   22,   23,   24,
       86,  713,   37,   14,   37,   87,   25,   26,   38,  102,
     1590,   27,   37,   14,   37,   42,   28,   42,   38,   92,
       93,   29,  198,   30,   13,   14,   13,   91,   92,   25,
       31,   93,   13,   14,   13,   13,   14,   13,   32,   40,
      714,   13,   14,   13,   33,   40,  103,   92,   93,  198,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       91,   34,   35,   13,   14,   13,   95,   15,   16,   96,
       17,   18,   19,   20,   21,   22,   22,   22,   22,   22,
       23,   24,   13,   14,   13,   91,   39,  105,   25,   26,

       13,   14,   13,   27,   39,   42,  108,   42,   28,   42,
      109,   42,   41,   29,  111,   30,  114,  115,   94,  140,
       41,   25,   31,  105,  222,  223,   89,  141,   89,  108,
       32,   90,   90,   90,   90,   90,   33,  111,  109,  114,
      228,  115,  229,   34,   35,   44,   44,   44,   45,   45,
       46,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   47,   45,   45,   45,   45,   45,   48,   45,   49,
       50,   45,   51,   45,   52,   53,   54,   45,   45,   45,
       45,   55,   56,   45,   57,   45,   45,   58,   45,   45,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   52,

       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   57,   45,   45,   45,   45,   45,   81,  820,
       82,   82,   82,   82,   82,   81,  105,   84,   84,   84,
       84,   84,  108,   83,   85,   85,   85,   85,   85,   81,
       83,   84,   84,   84,   84,   84,  184,   83,  278,  279,
      112,  123,  119,  134,   83,  108,   83,  186,  120,  124,
      113,  121,  125,   83,  135,  126,  137,  127,  138,  128,
       83,  142,  184,  112,  136,  139,  162,   83,   45,  185,
<<<<<<< HEAD
<<<<<<< HEAD
      163,  143,  820,  144,   45,  186,   45,   45,  113,   45,
      164,   45,   45,   45,  418,  117,  146,  147,   45,   45,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      163,  143,  821,  144,   45,  186,   45,   45,  113,   45,
      164,   45,   45,   45,  416,  117,  146,  147,   45,   45,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

      148,   45,   45,  186,  419,  185,  149,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
<<<<<<< HEAD
      129,  189,   45,  743,  130,  150,   45,  131,  132,  151,
       45,  111,  166,  152,  744,  184,  167,  102,   45,  114,
      133,  194,   45,  157,   45,  118,  201,  174,  175,  153,
      154,  158,  155,  159,  156,  185,  168,  112,  160,  161,
      169,  187,  179,  170,  247,  397,  411,  113,  248,  194,
      171,  172,  180,  201,  103,  204,  173,  181,  398,  821,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      129,  189,   45,  740,  130,  150,   45,  131,  132,  151,
       45,  111,  166,  152,  741,  184,  167,  102,   45,  114,
      133,  194,   45,  157,   45,  118,  201,  174,  175,  153,
      154,  158,  155,  159,  156,  185,  168,  112,  160,  161,
      169,  187,  179,  170,  247,  277,  278,  113,  248,  194,
      171,  172,  180,  201,  103,  204,  173,  181,  692,  693,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      176,  188,  177,   85,   85,   85,   85,   85,   81,  200,

       82,   82,   82,   82,   82,  113,   83,  202,  204,   89,
      822,   89,  178,   83,   90,   90,   90,   90,   90,   81,
<<<<<<< HEAD
<<<<<<< HEAD
      203,   84,   84,   84,   84,   84,  101,  200,  412,   83,
      197,  194,  823,  101,   83,  202,   83,   85,   85,   85,
       85,   85,   90,   90,   90,   90,   90,  203,  208,  231,
       83,   90,   90,   90,   90,   90,  197,   83,  280,  209,
      216,  235,  281,  101,  236,  232,  282,  101,  237,  217,
      218,  101,  298,   83,  200,  260,  261,  262,  264,  101,
      269,  265,  266,  101,  201,  101,  192,  207,  207,  207,
      207,  207,  297,  359,  824,  298,  207,  207,  207,  207,

      207,  207,  200,  297,  254,  203,  296,  296,  371,  825,
      308,  289,  309,  298,  305,  270,  271,  272,  297,  207,
      207,  207,  207,  207,  207,  311,  273,  313,  274,  300,
      275,  276,  292,  277,  296,  299,  301,  305,  308,  309,
      315,  305,  387,  327,  372,  388,  360,  312,  311,  361,
      313,  328,  406,  414,  499,  420,  329,  330,  373,  428,
      414,  420,  425,  486,  318,  422,  423,  315,  316,  316,
      316,  316,  316,  487,  424,  444,  414,  316,  316,  316,
      316,  316,  316,  415,  420,  425,  656,  428,  450,  508,
      432,  464,  445,  509,  451,  513,  465,  541,  826,  514,

      316,  316,  316,  316,  316,  316,  431,  431,  431,  431,
      431,  528,  500,  656,  529,  431,  431,  431,  431,  431,
      431,  477,  478,  534,  541,  541,  479,  549,  535,  550,
      577,  652,  567,  827,  657,  578,  658,  758,  431,  431,
      431,  431,  431,  431,  466,  568,  828,  569,  829,  467,
      695,  696,  551,  759,  549,  830,  550,   45,   45,   45,
       45,   45,  657,  831,  832,  758,   45,   45,   45,   45,
       45,   45,  765,  833,  768,  769,  759,  770,  766,  806,
      834,  835,  807,  836,  837,  838,  839,  842,  840,   45,
       45,   45,   45,   45,   45,  841,  843,  844,  847,  848,

      849,  851,  852,  853,  845,  854,  850,  855,  846,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  865,  893,  894,  895,
      896,  897,  899,  900,  901,  902,  898,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  919,  920,  921,  918,  922,  923,  924,  925,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      203,   84,   84,   84,   84,   84,  101,  200,  505,   83,
      197,  194,  506,  101,   83,  202,   83,   85,   85,   85,
       85,   85,   90,   90,   90,   90,   90,  203,  208,  231,
       83,   90,   90,   90,   90,   90,  197,   83,  279,  209,
      216,  235,  280,  101,  236,  232,  281,  101,  237,  217,
      218,  101,  263,   83,  200,  264,  265,  296,  201,  101,
      268,  203,  295,  101,  297,  101,  192,  207,  207,  207,
      207,  207,  296,  823,  409,  824,  207,  207,  207,  207,

      207,  207,  200,  296,  254,  288,  295,  297,  291,  297,
      295,  307,  304,  308,  310,  269,  270,  271,  299,  207,
      207,  207,  207,  207,  207,  312,  272,  314,  273,  304,
      274,  275,  300,  276,  298,  304,  326,  310,  395,  307,
      308,  358,  385,  370,  327,  386,  410,  825,  312,  328,
      329,  396,  317,  412,  314,  315,  315,  315,  315,  315,
      412,  423,  826,  827,  315,  315,  315,  315,  315,  315,
      311,  418,  420,  421,  426,  404,  412,  828,  442,  371,
      418,  422,  510,  413,  423,  496,  511,  315,  315,  315,
      315,  315,  315,  372,  359,  443,  462,  360,  484,  538,

      418,  463,  426,  429,  429,  429,  429,  429,  485,  430,
      756,  829,  429,  429,  429,  429,  429,  429,  448,  525,
      475,  476,  526,  531,  449,  477,  830,  538,  532,  546,
      653,  547,  564,  756,  593,  429,  429,  429,  429,  429,
      429,  831,  832,  497,  594,  565,  538,  566,  574,  464,
      654,  755,  803,  575,  465,  804,  546,  653,  547,   45,
       45,   45,   45,   45,  765,  766,  833,  767,   45,   45,
       45,   45,   45,   45,  548,  649,  762,  834,  654,  755,
      655,  835,  763,  836,  839,  844,  845,  848,  849,  850,
      837,   45,   45,   45,   45,   45,   45,  838,  840,  841,

      851,  846,  852,  853,  854,  855,  842,  847,  856,  857,
      843,  858,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  862,  890,  891,  892,  893,  894,  896,
      897,  898,  899,  895,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      917,  918,  919,  916,  920,  921,  922,  923,  924,  925,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      926,  927,  928,  929,  930,  931,  932,  933,  934,  935,
      936,  937,  938,  939,  940,  941,  942,  943,  944,  945,

      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  975,
<<<<<<< HEAD
<<<<<<< HEAD
      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      963,  986,  987,  962,  988,  989,  990,  991,  992,  993,
      994,  995,  996,  997,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1019, 1030, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,

     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055,  998, 1056, 1058, 1057, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1056, 1057, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1093,
     1094, 1095, 1090, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1134, 1092, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      976,  977,  978,  979,  980,  981,  982,  983,  961,  984,
      985,  960,  986,  987,  988,  989,  990,  991,  992,  993,
      994,  995,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1018, 1029, 1030, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,

     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,  996,
     1054, 1055, 1057, 1056, 1058, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1055,
     1056, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1092, 1093,
     1094, 1089, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102,
     1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1091, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

     1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151,
     1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1145, 1168, 1169, 1170,
     1171, 1172, 1146, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
<<<<<<< HEAD
<<<<<<< HEAD
     1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1229, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,

     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1222,
     1251, 1252, 1253, 1254, 1255, 1256, 1204, 1258, 1259, 1260,
     1261, 1262, 1263, 1257, 1264, 1265, 1266, 1267, 1268, 1269,
     1228, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1289,
     1290, 1291, 1287, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1289, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
     1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231,
     1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241,

     1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251,
     1223, 1252, 1253, 1254, 1255, 1256, 1257, 1205, 1259, 1260,
     1261, 1262, 1263, 1264, 1258, 1265, 1266, 1267, 1268, 1269,
     1270, 1229, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
     1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1290, 1291, 1292, 1293, 1289, 1294, 1295, 1296, 1297, 1298,
     1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
     1309, 1310, 1311, 1312, 1291, 1313, 1314, 1315, 1316, 1317,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
     1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,

     1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
<<<<<<< HEAD
<<<<<<< HEAD
     1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1368,
     1369, 1370, 1343, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1397, 1396,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1423, 1367, 1396, 1424, 1425,
     1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
     1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1371, 1372, 1373, 1346, 1374, 1375, 1376, 1377,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
     1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1370,
     1400, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

     1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
     1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
     1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
     1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
     1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
     1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
     1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
     1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,

     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
     1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
     1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
<<<<<<< HEAD
<<<<<<< HEAD
       12,   12,   12,   12,   12,   36,   36,   36,   36,   36,
       80,  303,   80,   80,   80,   99,  417,   99,  538,   99,
      101,  101,  101,  101,  101,  116,  116,  116,  116,  116,
      183,  101,  183,  183,  183,  205,  205,  205,  818,  817,
      816,  815,  814,  813,  812,  811,  810,  809,  808,  805,

      804,  803,  802,  801,  800,  799,  798,  797,  796,  795,
      794,  793,  792,  791,  790,  789,  788,  787,  786,  785,
      784,  783,  782,  781,  780,  779,  778,  777,  776,  775,
      774,  773,  772,  771,  767,  764,  763,  762,  761,  760,
      757,  756,  755,  754,  753,  752,  751,  750,  749,  748,
      747,  746,  745,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  714,
      713,  712,  711,  710,  709,  708,  707,  706,  705,  704,
      703,  702,  701,  700,  699,  698,  697,  694,  693,  692,

      691,  690,  689,  688,  687,  686,  685,  684,  683,  682,
      681,  680,  679,  678,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  667,  666,  665,  664,  663,  662,
      661,  660,  659,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  645,  644,  643,  642,  641,  640,  639,
      638,  637,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  613,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  600,  599,
      598,  597,  596,  595,  594,  593,  592,  591,  590,  589,

      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      576,  575,  574,  573,  572,  571,  570,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  548,  547,  546,  545,  544,  543,  542,  540,
      539,  537,  536,  533,  532,  531,  530,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      512,  511,  510,  507,  506,  505,  504,  503,  502,  501,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  485,  484,  483,  482,  481,  480,  476,  475,  474,
      473,  472,  471,  470,  469,  468,  463,  462,  461,  460,

      459,  458,  457,  456,  455,  454,  453,  452,  449,  448,
      447,  446,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  430,  429,  427,  426,  421,  416,  413,
      410,  409,  408,  407,  405,  404,  403,  402,  401,  400,
      399,  396,  395,  394,  393,  392,  391,  390,  389,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  326,

      325,  324,  323,  322,  321,  320,  319,  317,  206,  314,
      312,  310,  307,  306,  304,  302,  295,  294,  293,  291,
      290,  288,  287,  286,  285,  284,  283,  268,  267,  263,
      259,  258,  257,  256,  255,  253,  252,  251,  250,  249,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  234,
      233,  230,  227,  226,  225,  224,  221,  220,  219,  215,
      214,  213,  212,  211,  210,  206,  199,  196,  195,  193,
      191,  190,  182,  165,  145,  122,  110,  107,  106,  104,
       43,  100,   98,   97,   88,   43, 1586,   11, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586
    } ;

static yyconst flex_int16_t yy_chk[2062] =
    {   0,
        0,    1,    1,    1,    0,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       21,  610,    3,    3,    3,   21,    1,    1,    3,   44,
        0,    1,    4,    4,    4,   13,    1,   13,    4,   27,
       28,    1,  109,    1,    5,    5,    5,   26,   32,    1,
        1,   33,    6,    6,    6,    7,    7,    7,    1,    7,
      610,    8,    8,    8,    1,    8,   44,   27,   28,  109,
=======
     1586, 1587, 1588, 1589,   12,   12,   12,   12,   12,   36,
       36,   36,   36,   36,   80,  302,   80,   80,   80,   99,
      415,   99,  535,   99,  101,  101,  101,  101,  101,  116,
      116,  116,  116,  116,  183,  101,  183,  183,  183,  205,
      205,  205,  819,  818,  817,  816,  815,  814,  813,  812,

      811,  810,  809,  808,  807,  806,  805,  802,  801,  800,
      799,  798,  797,  796,  795,  794,  793,  792,  791,  790,
      789,  788,  787,  786,  785,  784,  783,  782,  781,  780,
      779,  778,  777,  776,  775,  774,  773,  772,  771,  770,
      769,  768,  764,  761,  760,  759,  758,  757,  754,  753,
      752,  751,  750,  749,  748,  747,  746,  745,  744,  743,
      742,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,

      698,  697,  696,  695,  694,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  592,

      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  573,  572,  571,  570,
      569,  568,  567,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  545,  544,
      543,  542,  541,  540,  539,  537,  536,  534,  533,  530,
      529,  528,  527,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  509,  508,  507,  504,
      503,  502,  501,  500,  499,  498,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  483,  482,  481,  480,
      479,  478,  474,  473,  472,  471,  470,  469,  468,  467,

      466,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  447,  446,  445,  444,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  428,  427,
      425,  424,  419,  414,  411,  408,  407,  406,  405,  403,
      402,  401,  400,  399,  398,  397,  394,  393,  392,  391,
      390,  389,  388,  387,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,

      332,  331,  330,  325,  324,  323,  322,  321,  320,  319,
      318,  316,  206,  313,  311,  309,  306,  305,  303,  301,
      294,  293,  292,  290,  289,  287,  286,  285,  284,  283,
      282,  267,  266,  262,  259,  258,  257,  256,  255,  253,
      252,  251,  250,  249,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  234,  233,  230,  227,  226,  225,  224,
      221,  220,  219,  215,  214,  213,  212,  211,  210,  206,
      199,  196,  195,  193,  191,  190,  182,  165,  145,  122,
      110,  107,  106,  104,   43,  100,   98,   97,   88,   43,
     1590,   11, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590
    } ;

static const flex_int16_t yy_chk[2066] =
    {   0,
        0,    1,    1,    1,    0,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       21,  608,    3,    3,    3,   21,    1,    1,    3,   44,
        0,    1,    4,    4,    4,   13,    1,   13,    4,   27,
       28,    1,  109,    1,    5,    5,    5,   26,   32,    1,
        1,   33,    6,    6,    6,    7,    7,    7,    1,    7,
      608,    8,    8,    8,    1,    8,   44,   27,   28,  109,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
     1586, 1587, 1588, 1589,   12,   12,   12,   12,   12,   36,
       36,   36,   36,   36,   80,  302,   80,   80,   80,   99,
      415,   99,  535,   99,  101,  101,  101,  101,  101,  116,
      116,  116,  116,  116,  183,  101,  183,  183,  183,  205,
      205,  205,  819,  818,  817,  816,  815,  814,  813,  812,

      811,  810,  809,  808,  807,  806,  805,  802,  801,  800,
      799,  798,  797,  796,  795,  794,  793,  792,  791,  790,
      789,  788,  787,  786,  785,  784,  783,  782,  781,  780,
      779,  778,  777,  776,  775,  774,  773,  772,  771,  770,
      769,  768,  764,  761,  760,  759,  758,  757,  754,  753,
      752,  751,  750,  749,  748,  747,  746,  745,  744,  743,
      742,  739,  738,  737,  736,  735,  734,  733,  732,  731,
      730,  729,  728,  727,  726,  725,  724,  723,  722,  721,
      720,  719,  718,  717,  716,  715,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  699,

      698,  697,  696,  695,  694,  691,  690,  689,  688,  687,
      686,  685,  684,  683,  682,  681,  680,  679,  678,  677,
      676,  675,  674,  673,  672,  671,  670,  669,  668,  667,
      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  592,

      591,  590,  589,  588,  587,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  573,  572,  571,  570,
      569,  568,  567,  563,  562,  561,  560,  559,  558,  557,
      556,  555,  554,  553,  552,  551,  550,  549,  545,  544,
      543,  542,  541,  540,  539,  537,  536,  534,  533,  530,
      529,  528,  527,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  509,  508,  507,  504,
      503,  502,  501,  500,  499,  498,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  483,  482,  481,  480,
      479,  478,  474,  473,  472,  471,  470,  469,  468,  467,

      466,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  447,  446,  445,  444,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  428,  427,
      425,  424,  419,  414,  411,  408,  407,  406,  405,  403,
      402,  401,  400,  399,  398,  397,  394,  393,  392,  391,
      390,  389,  388,  387,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,

      332,  331,  330,  325,  324,  323,  322,  321,  320,  319,
      318,  316,  206,  313,  311,  309,  306,  305,  303,  301,
      294,  293,  292,  290,  289,  287,  286,  285,  284,  283,
      282,  267,  266,  262,  259,  258,  257,  256,  255,  253,
      252,  251,  250,  249,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  234,  233,  230,  227,  226,  225,  224,
      221,  220,  219,  215,  214,  213,  212,  211,  210,  206,
      199,  196,  195,  193,  191,  190,  182,  165,  145,  122,
      110,  107,  106,  104,   43,  100,   98,   97,   88,   43,
     1590,   11, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590
    } ;

static const flex_int16_t yy_chk[2066] =
    {   0,
        0,    1,    1,    1,    0,    1,    1,    0,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       21,  608,    3,    3,    3,   21,    1,    1,    3,   44,
        0,    1,    4,    4,    4,   13,    1,   13,    4,   27,
       28,    1,  109,    1,    5,    5,    5,   26,   32,    1,
        1,   33,    6,    6,    6,    7,    7,    7,    1,    7,
      608,    8,    8,    8,    1,    8,   44,   27,   28,  109,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       26,    1,    1,    2,    2,    2,   32,    2,    2,   33,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    9,    9,    9,   31,    5,   48,    2,    2,

       10,   10,   10,    2,    6,   37,   51,   37,    2,   42,
       52,   42,    9,    2,   54,    2,   56,   57,   31,   66,
       10,    2,    2,   48,  130,  130,   25,   66,   25,   51,
        2,   25,   25,   25,   25,   25,    2,   54,   52,   56,
      135,   57,  135,    2,    2,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,  716,
       17,   17,   17,   17,   17,   19,   59,   19,   19,   19,
       19,   19,   64,   17,   20,   20,   20,   20,   20,   22,
       19,   22,   22,   22,   22,   22,   91,   20,  168,  168,
       55,   61,   59,   63,   22,   64,   17,   93,   59,   61,
       55,   59,   61,   19,   63,   61,   64,   61,   65,   61,
       20,   67,   91,   55,   63,   65,   73,   22,   45,   92,
       73,   67,  717,   67,   45,   93,   45,   45,   55,   45,
       73,   45,   45,   45,  304,   58,   69,   69,   45,   45,

       69,   45,   58,   96,  304,   92,   69,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
<<<<<<< HEAD
<<<<<<< HEAD
       62,   96,   58,  640,   62,   70,   58,   62,   62,   70,
       58,   71,   75,   70,  640,   94,   75,  101,   58,   78,
=======
       62,   96,   58,  637,   62,   70,   58,   62,   62,   70,
       58,   71,   75,   70,  637,   94,   75,  101,   58,   78,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
       62,   96,   58,  637,   62,   70,   58,   62,   62,   70,
       58,   71,   75,   70,  637,   94,   75,  101,   58,   78,
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
       62,  105,   58,   72,   58,   58,  112,   77,   77,   70,
       71,   72,   71,   72,   71,   95,   76,   77,   72,   72,
       76,   94,   78,   76,  150,  281,  294,   77,  150,  105,
       76,   76,   78,  112,  101,  115,   76,   78,  281,  718,
       77,   95,   77,   81,   81,   81,   81,   81,   82,  111,

       82,   82,   82,   82,   82,   77,   81,  113,  115,   83,
      719,   83,   77,   82,   83,   83,   83,   83,   83,   84,
      114,   84,   84,   84,   84,   84,  103,  111,  294,   81,
      108,  119,  720,  103,   84,  113,   82,   85,   85,   85,
       85,   85,   89,   89,   89,   89,   89,  114,  119,  137,
       85,   90,   90,   90,   90,   90,  108,   84,  169,  119,
      126,  140,  169,  103,  140,  137,  169,  103,  140,  126,
<<<<<<< HEAD
      126,  103,  186,   85,  156,  162,  162,  162,  164,  103,
      167,  164,  164,  103,  176,  103,  103,  118,  118,  118,
      118,  118,  185,  248,  721,  186,  118,  118,  118,  118,

      118,  118,  156,  188,  156,  179,  184,  187,  258,  722,
      197,  176,  198,  189,  194,  167,  167,  167,  185,  118,
      118,  118,  118,  118,  118,  200,  167,  202,  167,  188,
      167,  167,  179,  167,  184,  187,  189,  194,  197,  198,
      204,  209,  272,  218,  258,  272,  248,  289,  200,  248,
      202,  218,  289,  296,  379,  305,  218,  218,  258,  311,
      299,  318,  308,  366,  209,  307,  307,  204,  207,  207,
      207,  207,  207,  366,  307,  330,  296,  207,  207,  207,
      207,  207,  207,  299,  305,  308,  549,  311,  336,  388,
      318,  349,  330,  388,  336,  392,  349,  420,  723,  392,

      207,  207,  207,  207,  207,  207,  316,  316,  316,  316,
      316,  406,  379,  549,  406,  316,  316,  316,  316,  316,
      316,  359,  359,  412,  432,  420,  359,  430,  412,  430,
      459,  551,  450,  724,  550,  459,  551,  656,  316,  316,
      316,  316,  316,  316,  349,  450,  725,  450,  726,  349,
      590,  590,  432,  657,  430,  727,  430,  431,  431,  431,
      431,  431,  550,  728,  729,  656,  431,  431,  431,  431,
      431,  431,  663,  730,  665,  665,  657,  665,  663,  702,
      731,  732,  702,  733,  734,  735,  736,  738,  737,  431,
      431,  431,  431,  431,  431,  737,  739,  739,  740,  741,

      742,  744,  745,  746,  739,  747,  742,  748,  739,  749,
      750,  751,  752,  753,  754,  755,  756,  758,  759,  760,
      761,  762,  763,  764,  765,  766,  768,  769,  770,  771,
      772,  773,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  784,  785,  786,  788,  759,  789,  790,  791,
      792,  793,  794,  795,  796,  797,  793,  798,  799,  800,
      801,  804,  805,  806,  807,  808,  811,  812,  813,  814,
      815,  816,  817,  818,  819,  816,  820,  821,  822,  825,
      826,  827,  828,  829,  830,  831,  832,  833,  834,  835,
      836,  837,  838,  839,  840,  841,  842,  843,  844,  845,

      846,  847,  848,  849,  850,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  861,  862,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  873,  874,  875,  876,  877,
      878,  879,  880,  881,  882,  883,  884,  885,  886,  888,
      865,  889,  890,  864,  891,  892,  893,  894,  895,  896,
      898,  899,  900,  901,  902,  904,  905,  906,  907,  908,
      909,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  920,  921,  922,  923,  925,  926,  927,  929,  930,
      931,  932,  933,  934,  922,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  948,  949,  950,

      951,  952,  953,  954,  955,  956,  957,  958,  959,  960,
      961,  901,  962,  964,  963,  965,  966,  967,  968,  969,
      971,  972,  973,  974,  975,  976,  977,  978,  979,  980,
      982,  983,  984,  985,  986,  987,  988,  989,  990,  991,
      962,  963,  992,  993,  994,  995,  996,  998,  999, 1000,
     1001, 1002,  998, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
     1031, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1041, 1042,
     1043, 1044,  999, 1045, 1046, 1047, 1048, 1049, 1050, 1051,

     1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075,
     1076, 1077, 1078, 1079, 1080, 1081, 1056, 1082, 1083, 1084,
     1085, 1086, 1057, 1087, 1090, 1092, 1093, 1094, 1095, 1096,
     1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1108,
     1109, 1110, 1111, 1112, 1115, 1116, 1117, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130,
     1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
     1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166,

     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1145,
     1176, 1177, 1178, 1179, 1180, 1181, 1124, 1182, 1183, 1184,
     1185, 1187, 1190, 1181, 1191, 1192, 1193, 1194, 1195, 1196,
     1151, 1197, 1198, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1208, 1209, 1211, 1214, 1216, 1218, 1219, 1220, 1221, 1222,
     1224, 1225, 1220, 1226, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244,
     1245, 1246, 1222, 1247, 1248, 1249, 1252, 1254, 1255, 1256,
     1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267,
     1269, 1270, 1272, 1273, 1274, 1275, 1277, 1278, 1279, 1280,

     1281, 1282, 1283, 1285, 1287, 1289, 1291, 1292, 1293, 1294,
     1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1305, 1306, 1307, 1308, 1309, 1310, 1311, 1311, 1312, 1313,
     1314, 1315, 1289, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
     1333, 1334, 1336, 1337, 1338, 1340, 1341, 1342, 1345, 1343,
     1348, 1349, 1350, 1353, 1354, 1355, 1358, 1359, 1360, 1361,
     1362, 1363, 1364, 1365, 1367, 1368, 1370, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1380, 1381, 1312, 1343, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,

     1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1409, 1410, 1411, 1413, 1415, 1416, 1417, 1418,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1429,
     1430, 1432, 1435, 1438, 1440, 1441, 1442, 1444, 1445, 1447,
     1448, 1449, 1450, 1451, 1452, 1454, 1455, 1456, 1458, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1480, 1481, 1482,
     1483, 1484, 1485, 1486, 1488, 1489, 1490, 1491, 1492, 1493,
     1494, 1495, 1496, 1498, 1499, 1500, 1501, 1502, 1504, 1508,
     1510, 1511, 1512, 1513, 1515, 1517, 1518, 1519, 1520, 1522,

     1523, 1525, 1526, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1549, 1550, 1552, 1553, 1554, 1555, 1556,
     1558, 1560, 1561, 1562, 1563, 1564, 1565, 1569, 1570, 1571,
     1572, 1574, 1575, 1577, 1578, 1579, 1580, 1581, 1583, 1584,
     1587, 1587, 1587, 1587, 1587, 1588, 1588, 1588, 1588, 1588,
     1589, 1595, 1589, 1589, 1589, 1590, 1596, 1590, 1597, 1590,
     1591, 1591, 1591, 1591, 1591, 1592, 1592, 1592, 1592, 1592,
     1593, 1598, 1593, 1593, 1593, 1594, 1594, 1594,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  704,  703,  701,

      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  689,  688,  687,  686,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  667,  666,  664,  662,  661,  660,  659,  658,
      655,  654,  653,  651,  650,  648,  647,  646,  645,  644,
      643,  642,  641,  638,  637,  636,  635,  634,  633,  632,
      631,  630,  629,  628,  627,  626,  624,  623,  622,  621,
      620,  619,  618,  617,  615,  614,  613,  612,  611,  609,
      608,  607,  606,  605,  604,  603,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  589,  588,  587,

      586,  585,  584,  583,  582,  581,  580,  579,  578,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  547,  545,  542,  541,  540,  539,  537,
      536,  535,  533,  532,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  511,  510,  509,  508,  507,  506,  505,  504,
      503,  502,  500,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,

      470,  469,  468,  467,  466,  465,  463,  462,  461,  460,
      458,  457,  456,  455,  454,  452,  451,  449,  448,  446,
      445,  444,  443,  442,  441,  440,  438,  437,  436,  435,
      434,  433,  428,  427,  425,  424,  423,  422,  421,  419,
      418,  416,  413,  411,  410,  408,  407,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      391,  390,  389,  387,  386,  385,  384,  382,  381,  380,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      367,  365,  364,  363,  362,  361,  360,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  348,  347,  346,  345,

      344,  343,  342,  341,  340,  339,  338,  337,  335,  334,
      333,  332,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  315,  313,  310,  309,  306,  302,  295,
      293,  292,  291,  290,  288,  287,  286,  285,  284,  283,
      282,  280,  279,  278,  277,  276,  275,  274,  273,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  257,  256,  255,  254,  253,  252,  251,  250,
      249,  247,  246,  245,  244,  243,  242,  241,  240,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  217,

      216,  215,  214,  213,  212,  211,  210,  208,  205,  203,
      201,  199,  196,  195,  193,  190,  182,  181,  180,  178,
      177,  175,  174,  173,  172,  171,  170,  166,  165,  163,
      161,  160,  159,  158,  157,  155,  154,  153,  152,  151,
      149,  148,  147,  146,  145,  144,  143,  142,  141,  139,
      138,  136,  134,  133,  132,  131,  129,  128,  127,  125,
      124,  123,  122,  121,  120,  116,  110,  107,  106,  104,
       99,   98,   79,   74,   68,   60,   53,   50,   49,   47,
       43,   41,   39,   38,   24,   14,   11, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,

     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
     1586
=======
      126,  103,  164,   85,  156,  164,  164,  185,  176,  103,
      167,  179,  184,  103,  186,  103,  103,  118,  118,  118,
      118,  118,  188,  720,  293,  721,  118,  118,  118,  118,

      118,  118,  156,  185,  156,  176,  187,  186,  179,  189,
      184,  197,  194,  198,  200,  167,  167,  167,  188,  118,
      118,  118,  118,  118,  118,  202,  167,  204,  167,  209,
      167,  167,  189,  167,  187,  194,  218,  200,  280,  197,
      198,  248,  271,  258,  218,  271,  293,  722,  202,  218,
      218,  280,  209,  295,  204,  207,  207,  207,  207,  207,
      298,  307,  723,  724,  207,  207,  207,  207,  207,  207,
      288,  304,  306,  306,  310,  288,  295,  725,  329,  258,
      317,  306,  390,  298,  307,  377,  390,  207,  207,  207,
      207,  207,  207,  258,  248,  329,  348,  248,  365,  418,

      304,  348,  310,  315,  315,  315,  315,  315,  365,  317,
      654,  726,  315,  315,  315,  315,  315,  315,  335,  404,
      358,  358,  404,  410,  335,  358,  727,  418,  410,  428,
      546,  428,  448,  654,  476,  315,  315,  315,  315,  315,
      315,  728,  729,  377,  476,  448,  430,  448,  457,  348,
      547,  653,  699,  457,  348,  699,  428,  546,  428,  429,
      429,  429,  429,  429,  662,  662,  730,  662,  429,  429,
      429,  429,  429,  429,  430,  548,  660,  731,  547,  653,
      548,  732,  660,  733,  735,  737,  738,  741,  742,  743,
      734,  429,  429,  429,  429,  429,  429,  734,  736,  736,

      744,  739,  745,  746,  747,  748,  736,  739,  749,  750,
      736,  751,  752,  753,  755,  756,  757,  758,  759,  760,
      761,  762,  763,  765,  766,  767,  768,  769,  770,  771,
      772,  773,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  785,  756,  786,  787,  788,  789,  790,  791,
      792,  793,  794,  790,  795,  796,  797,  798,  801,  802,
      803,  804,  805,  806,  809,  810,  811,  812,  813,  814,
      815,  816,  817,  814,  818,  819,  820,  822,  823,  824,
      825,  826,  827,  828,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  841,  842,  843,  844,

      845,  846,  847,  849,  850,  851,  852,  853,  854,  855,
      856,  857,  858,  859,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  885,  862,  886,
      887,  861,  888,  889,  890,  891,  892,  893,  895,  896,
      897,  898,  899,  901,  902,  903,  904,  905,  906,  907,
      908,  909,  910,  911,  912,  913,  914,  915,  916,  917,
      918,  919,  920,  921,  923,  924,  925,  927,  928,  929,
      930,  931,  932,  920,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  946,  947,  948,  949,

      950,  951,  952,  953,  954,  955,  956,  957,  958,  898,
      959,  960,  962,  961,  963,  964,  965,  966,  967,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,  980,
      981,  982,  983,  984,  985,  986,  987,  988,  989,  960,
      961,  990,  991,  992,  993,  994,  996,  997,  998,  999,
     1000,  996, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1035, 1036, 1037, 1039, 1040, 1041,
     1042,  997, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,

     1051, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062,
     1063, 1064, 1065, 1066, 1067, 1068, 1069, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1055, 1081, 1082, 1083,
     1084, 1085, 1056, 1086, 1089, 1091, 1092, 1093, 1094, 1095,
     1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106,
     1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
     1130, 1132, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,

     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
     1145, 1176, 1177, 1178, 1179, 1180, 1181, 1124, 1182, 1183,
     1184, 1185, 1186, 1188, 1181, 1191, 1192, 1193, 1194, 1195,
     1196, 1151, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205,
     1206, 1207, 1209, 1210, 1212, 1215, 1217, 1219, 1220, 1221,
     1222, 1223, 1225, 1226, 1221, 1227, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243,
     1244, 1245, 1246, 1247, 1223, 1248, 1249, 1250, 1253, 1255,
     1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1265, 1266,
     1267, 1268, 1269, 1271, 1272, 1274, 1275, 1276, 1277, 1279,

     1280, 1281, 1282, 1283, 1284, 1285, 1287, 1289, 1291, 1293,
     1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1313, 1314, 1315, 1316, 1317, 1291, 1318, 1319, 1320, 1321,
     1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331,
     1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1341, 1343,
     1344, 1345, 1346, 1348, 1351, 1352, 1353, 1356, 1357, 1358,
     1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371,
     1373, 1375, 1376, 1377, 1379, 1380, 1381, 1382, 1384, 1314,
     1346, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,

     1394, 1395, 1396, 1397, 1399, 1400, 1401, 1402, 1403, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1413, 1414, 1415, 1417,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1429, 1430, 1431, 1433, 1434, 1436, 1439, 1442, 1444, 1445,
     1446, 1448, 1449, 1451, 1452, 1453, 1454, 1455, 1456, 1458,
     1459, 1460, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1492, 1493,
     1494, 1495, 1496, 1497, 1498, 1499, 1500, 1502, 1503, 1504,
     1505, 1506, 1508, 1512, 1514, 1515, 1516, 1517, 1519, 1521,

     1522, 1523, 1524, 1526, 1527, 1529, 1530, 1533, 1534, 1535,
     1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
     1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1556,
     1557, 1558, 1559, 1560, 1562, 1564, 1565, 1566, 1567, 1568,
     1569, 1573, 1574, 1575, 1576, 1578, 1579, 1581, 1582, 1583,
     1584, 1585, 1587, 1588, 1591, 1591, 1591, 1591, 1591, 1592,
     1592, 1592, 1592, 1592, 1593, 1599, 1593, 1593, 1593, 1594,
     1600, 1594, 1601, 1594, 1595, 1595, 1595, 1595, 1595, 1596,
     1596, 1596, 1596, 1596, 1597, 1602, 1597, 1597, 1597, 1598,
     1598, 1598,  716,  715,  714,  712,  711,  710,  709,  708,

      707,  706,  705,  704,  702,  701,  700,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  661,  659,  658,  657,  656,  655,  652,  651,
      650,  648,  647,  645,  644,  643,  642,  641,  640,  639,
      638,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  624,  623,  621,  620,  619,  618,  617,  616,
      615,  614,  612,  611,  610,  609,  607,  606,  605,  604,
      603,  602,  601,  599,  598,  597,  596,  595,  594,  593,

      592,  591,  590,  589,  588,  586,  585,  584,  583,  582,
      581,  580,  579,  578,  577,  576,  575,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  544,  542,  539,  538,  537,  536,  534,  533,  532,
      530,  529,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      497,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  482,  481,  480,  479,  478,  477,  475,

      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  461,  460,  459,  458,  456,  455,  454,  453,
      452,  450,  449,  447,  446,  444,  443,  442,  441,  440,
      439,  438,  436,  435,  434,  433,  432,  431,  426,  425,
      423,  422,  421,  420,  419,  417,  416,  414,  411,  409,
      408,  406,  405,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  389,  388,  387,  385,
      384,  383,  382,  380,  379,  378,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  366,  364,  363,  362,  361,
      360,  359,  357,  356,  355,  354,  353,  352,  351,  350,

      349,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  334,  333,  332,  331,  328,  327,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  314,  312,
      309,  308,  305,  301,  294,  292,  291,  290,  289,  287,
      286,  285,  284,  283,  282,  281,  279,  278,  277,  276,
      275,  274,  273,  272,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  247,  246,  245,  244,  243,
      242,  241,  240,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  222,

      221,  220,  219,  217,  216,  215,  214,  213,  212,  211,
      210,  208,  205,  203,  201,  199,  196,  195,  193,  190,
      182,  181,  180,  178,  177,  175,  174,  173,  172,  171,
      170,  166,  165,  163,  161,  160,  159,  158,  157,  155,
      154,  153,  152,  151,  149,  148,  147,  146,  145,  144,
      143,  142,  141,  139,  138,  136,  134,  133,  132,  131,
      129,  128,  127,  125,  124,  123,  122,  121,  120,  116,
      110,  107,  106,  104,   99,   98,   79,   74,   68,   60,
       53,   50,   49,   47,   43,   41,   39,   38,   24,   14,
       11, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,

     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590,
     1590, 1590, 1590, 1590, 1590
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int parser4__flex_debug;
int parser4__flex_debug = 1;

<<<<<<< HEAD
<<<<<<< HEAD
static yyconst flex_int16_t yy_rule_linenum[184] =
    {   0,
      146,  148,  150,  155,  156,  161,  162,  163,  175,  178,
      183,  190,  199,  208,  217,  226,  235,  244,  254,  263,
      272,  281,  290,  299,  308,  317,  326,  335,  344,  353,
      362,  374,  383,  392,  401,  410,  421,  432,  443,  454,
      464,  474,  485,  496,  507,  518,  529,  540,  551,  562,
      573,  584,  595,  606,  617,  628,  639,  648,  657,  667,
      676,  686,  700,  716,  725,  734,  743,  752,  773,  794,
      803,  813,  822,  833,  842,  851,  860,  869,  878,  888,
      897,  908,  919,  931,  940,  950,  959,  968,  977,  986,
      995, 1004, 1013, 1022, 1032, 1043, 1055, 1064, 1073, 1083,

     1093, 1103, 1113, 1123, 1133, 1142, 1152, 1161, 1170, 1179,
     1188, 1198, 1208, 1217, 1227, 1236, 1245, 1254, 1263, 1272,
     1281, 1290, 1299, 1308, 1317, 1326, 1335, 1344, 1353, 1362,
     1371, 1380, 1389, 1398, 1407, 1416, 1425, 1434, 1443, 1452,
     1461, 1470, 1479, 1489, 1499, 1509, 1519, 1529, 1539, 1549,
     1559, 1569, 1579, 1589, 1598, 1607, 1616, 1625, 1634, 1643,
     1652, 1663, 1674, 1687, 1700, 1715, 1814, 1819, 1824, 1829,
     1830, 1831, 1832, 1833, 1834, 1836, 1854, 1867, 1872, 1876,
     1878, 1880, 1882
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
static const flex_int16_t yy_rule_linenum[184] =
    {   0,
      147,  149,  151,  156,  157,  162,  163,  164,  176,  179,
      184,  191,  200,  209,  218,  227,  236,  245,  255,  264,
      273,  282,  291,  300,  309,  318,  327,  336,  345,  354,
      363,  375,  384,  393,  402,  411,  422,  433,  444,  455,
      465,  475,  486,  497,  508,  519,  530,  541,  552,  563,
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
      574,  585,  595,  606,  617,  628,  639,  650,  659,  668,
      678,  687,  697,  711,  727,  736,  745,  754,  763,  784,
      805,  814,  824,  833,  844,  853,  862,  871,  880,  889,
      899,  908,  919,  930,  942,  951,  961,  970,  979,  988,
      997, 1006, 1015, 1024, 1034, 1045, 1057, 1066, 1075, 1085,

     1095, 1105, 1115, 1125, 1135, 1144, 1154, 1163, 1172, 1181,
     1190, 1200, 1210, 1219, 1229, 1238, 1247, 1256, 1265, 1274,
     1283, 1292, 1301, 1310, 1319, 1328, 1337, 1346, 1355, 1364,
     1373, 1382, 1391, 1400, 1409, 1418, 1427, 1436, 1445, 1454,
     1463, 1472, 1481, 1491, 1501, 1511, 1521, 1531, 1541, 1551,
     1561, 1571, 1581, 1591, 1600, 1609, 1618, 1627, 1636, 1645,
     1654, 1665, 1676, 1689, 1702, 1717, 1816, 1821, 1826, 1831,
     1832, 1833, 1834, 1835, 1836, 1838, 1856, 1869, 1874, 1878,
     1880, 1882, 1884
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
      574,  585,  594,  605,  616,  627,  638,  649,  658,  667,
      677,  686,  696,  710,  726,  735,  744,  753,  762,  783,
      804,  813,  823,  832,  843,  852,  861,  870,  879,  888,
      898,  907,  918,  929,  941,  950,  960,  969,  978,  987,
      996, 1005, 1014, 1023, 1033, 1044, 1056, 1065, 1074, 1084,

     1094, 1104, 1114, 1124, 1134, 1143, 1153, 1162, 1171, 1180,
     1189, 1199, 1209, 1218, 1228, 1237, 1246, 1255, 1264, 1273,
     1282, 1291, 1300, 1309, 1318, 1327, 1336, 1345, 1354, 1363,
     1372, 1381, 1390, 1399, 1408, 1417, 1426, 1435, 1444, 1453,
     1462, 1471, 1480, 1490, 1500, 1510, 1520, 1530, 1540, 1550,
     1560, 1570, 1580, 1590, 1599, 1608, 1617, 1626, 1635, 1644,
     1653, 1664, 1675, 1688, 1701, 1716, 1815, 1820, 1825, 1830,
     1831, 1832, 1833, 1834, 1835, 1837, 1855, 1868, 1873, 1877,
     1879, 1881, 1883
>>>>>>> [#805,!5-p] Updated example confs
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *parser4_text;
#line 1 "dhcp4_lexer.ll"
/* Copyright (C) 2016-2019 Internet Systems Consortium, Inc. ("ISC")

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#line 8 "dhcp4_lexer.ll"

/* Generated files do not make clang static analyser so happy */
#ifndef __clang_analyzer__

#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>
#include <dhcp4/parser_context.h>
#include <asiolink/io_address.h>
#include <boost/lexical_cast.hpp>
#include <exceptions/exceptions.h>

/* Please avoid C++ style comments (// ... eol) as they break flex 2.6.2 */

/* Work around an incompatibility in flex (at least versions
   2.5.31 through 2.5.33): it generates code that does
   not conform to C89.  See Debian bug 333231
   <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>. */
# undef parser4_wrap
# define parser4_wrap() 1

namespace {

bool start_token_flag = false;

isc::dhcp::Parser4Context::ParserType start_token_value;
unsigned int comment_start_line = 0;

using namespace isc::dhcp;

};

/* To avoid the call to exit... oops! */
#define YY_FATAL_ERROR(msg) isc::dhcp::Parser4Context::fatal(msg)
<<<<<<< HEAD
<<<<<<< HEAD
=======
#line 1830 "dhcp4_lexer.cc"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1830 "dhcp4_lexer.cc"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
/* noyywrap disables automatic rewinding for the next file to parse. Since we
   always parse only a single string, there's no need to do any wraps. And
   using parser4_wrap requires linking with -lfl, which provides the default parser4_wrap
   implementation that always returns 1 anyway. */
/* nounput simplifies the lexer, by removing support for putting a character
   back into the input stream. We never use such capability anyway. */
/* batch means that we'll never use the generated lexer interactively. */
/* avoid to get static global variables to remain with C++. */
/* in last resort %option reentrant */
/* Enables debug mode. To see the debug messages, one needs to also set
   parser4__flex_debug to 1, then the debug messages will be printed on stderr. */
/* I have no idea what this option does, except it was specified in the bison
   examples and Postgres folks added it to remove gcc 4.3 warnings. Let's
   be on the safe side and keep it. */
#define YY_NO_INPUT 1


/* These are not token expressions yet, just convenience expressions that
   can be used during actual token definitions. Note some can match
   incorrect inputs (e.g., IP addresses) which must be checked. */
/* for errors */
#line 94 "dhcp4_lexer.ll"
/* This code run each time a pattern is matched. It updates the location
   by moving it ahead by parser4_leng bytes. parser4_leng specifies the length of the
   currently matched token. */
<<<<<<< HEAD
#define YY_USER_ACTION  driver.loc_.columns(parser4_leng);
#line 1628 "dhcp4_lexer.cc"
=======
#define YY_USER_ACTION  driver.loc_.columns(yyleng);
#line 1856 "dhcp4_lexer.cc"
#line 1857 "dhcp4_lexer.cc"
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

#define INITIAL 0
#define COMMENT 1
#define DIR_ENTER 2
#define DIR_INCLUDE 3
#define DIR_EXIT 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int parser4_lex_destroy (void );

int parser4_get_debug (void );

void parser4_set_debug (int debug_flag  );

YY_EXTRA_TYPE parser4_get_extra (void );

void parser4_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *parser4_get_in (void );

void parser4_set_in  (FILE * in_str  );

FILE *parser4_get_out (void );

void parser4_set_out  (FILE * out_str  );

yy_size_t parser4_get_leng (void );

char *parser4_get_text (void );

int parser4_get_lineno (void );

void parser4_set_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int parser4_wrap (void );
#else
extern int parser4_wrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( parser4_text, parser4_leng, 1, parser4_out )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( parser4_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( parser4_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, parser4_in))==0 && ferror(parser4_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(parser4_in); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int parser4_lex (void);

#define YY_DECL int parser4_lex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after parser4_text and parser4_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 100 "dhcp4_lexer.ll"



    /* This part of the code is copied over to the verbatim to the top
       of the generated parser4_lex function. Explanation:
       http://www.gnu.org/software/bison/manual/html_node/Multiple-start_002dsymbols.html */

    /* Code run each time parser4_lex is called. */
    driver.loc_.step();

    if (start_token_flag) {
        start_token_flag = false;
        switch (start_token_value) {
        case Parser4Context::PARSER_JSON:
        default:
            return isc::dhcp::Dhcp4Parser::make_TOPLEVEL_JSON(driver.loc_);
        case Parser4Context::PARSER_DHCP4:
            return isc::dhcp::Dhcp4Parser::make_TOPLEVEL_DHCP4(driver.loc_);
        case Parser4Context::SUBPARSER_DHCP4:
            return isc::dhcp::Dhcp4Parser::make_SUB_DHCP4(driver.loc_);
        case Parser4Context::PARSER_INTERFACES:
            return isc::dhcp::Dhcp4Parser::make_SUB_INTERFACES4(driver.loc_);
        case Parser4Context::PARSER_SUBNET4:
            return isc::dhcp::Dhcp4Parser::make_SUB_SUBNET4(driver.loc_);
        case Parser4Context::PARSER_POOL4:
            return isc::dhcp::Dhcp4Parser::make_SUB_POOL4(driver.loc_);
        case Parser4Context::PARSER_HOST_RESERVATION:
            return isc::dhcp::Dhcp4Parser::make_SUB_RESERVATION(driver.loc_);
        case Parser4Context::PARSER_OPTION_DEFS:
            return isc::dhcp::Dhcp4Parser::make_SUB_OPTION_DEFS(driver.loc_);
        case Parser4Context::PARSER_OPTION_DEF:
            return isc::dhcp::Dhcp4Parser::make_SUB_OPTION_DEF(driver.loc_);
        case Parser4Context::PARSER_OPTION_DATA:
            return isc::dhcp::Dhcp4Parser::make_SUB_OPTION_DATA(driver.loc_);
        case Parser4Context::PARSER_HOOKS_LIBRARY:
            return isc::dhcp::Dhcp4Parser::make_SUB_HOOKS_LIBRARY(driver.loc_);
        case Parser4Context::PARSER_DHCP_DDNS:
            return isc::dhcp::Dhcp4Parser::make_SUB_DHCP_DDNS(driver.loc_);
        case Parser4Context::PARSER_CONFIG_CONTROL:
            return isc::dhcp::Dhcp4Parser::make_SUB_CONFIG_CONTROL(driver.loc_);
        case Parser4Context::PARSER_LOGGING:
            return isc::dhcp::Dhcp4Parser::make_SUB_LOGGING(driver.loc_);
        }
    }


<<<<<<< HEAD
<<<<<<< HEAD
#line 1919 "dhcp4_lexer.cc"
=======
#line 2187 "dhcp4_lexer.cc"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! parser4_in )
/* %if-c-only */
			parser4_in = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! parser4_out )
/* %if-c-only */
			parser4_out = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			parser4_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				parser4__create_buffer(parser4_in,YY_BUF_SIZE );
		}

		parser4__load_buffer_state( );
		}
=======
#line 2187 "dhcp4_lexer.cc"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of parser4_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
<<<<<<< HEAD
<<<<<<< HEAD
				if ( yy_current_state >= 1587 )
					yy_c = yy_meta[(unsigned int) yy_c];
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
				if ( yy_current_state >= 1591 )
					yy_c = yy_meta[yy_c];
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
<<<<<<< HEAD
<<<<<<< HEAD
		while ( yy_current_state != 1586 );
=======
		while ( yy_current_state != 1590 );
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
		while ( yy_current_state != 1590 );
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for parser4_lineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( parser4__flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 184 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
<<<<<<< HEAD
				         (long)yy_rule_linenum[yy_act], parser4_text );
			else if ( yy_act == 184 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         parser4_text );
=======
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 184 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
			else if ( yy_act == 185 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 146 "dhcp4_lexer.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 148 "dhcp4_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 150 "dhcp4_lexer.ll"
{
  BEGIN(COMMENT);
  comment_start_line = driver.loc_.end.line;;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "dhcp4_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "dhcp4_lexer.ll"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 157 "dhcp4_lexer.ll"
{
    isc_throw(Dhcp4ParseError, "Comment not closed. (/* in line " << comment_start_line);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 161 "dhcp4_lexer.ll"
BEGIN(DIR_ENTER);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 162 "dhcp4_lexer.ll"
BEGIN(DIR_INCLUDE);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 163 "dhcp4_lexer.ll"
{
    /* Include directive. */

    /* Extract the filename. */
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);

    driver.includeFile(tmp);
}
	YY_BREAK
case YY_STATE_EOF(DIR_ENTER):
case YY_STATE_EOF(DIR_INCLUDE):
case YY_STATE_EOF(DIR_EXIT):
#line 172 "dhcp4_lexer.ll"
{
    isc_throw(Dhcp4ParseError, "Directive not closed.");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 175 "dhcp4_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 178 "dhcp4_lexer.ll"
{
    /* Ok, we found a with space. Let's ignore it and update loc variable. */
    driver.loc_.step();
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 183 "dhcp4_lexer.ll"
{
    /* Newline found. Let's update the location and continue. */
    driver.loc_.lines(parser4_leng);
    driver.loc_.step();
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 190 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG:
        return isc::dhcp::Dhcp4Parser::make_DHCP4(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("Dhcp4", driver.loc_);
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 199 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return  isc::dhcp::Dhcp4Parser::make_INTERFACES_CONFIG(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("interfaces-config", driver.loc_);
    }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 208 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return  isc::dhcp::Dhcp4Parser::make_SANITY_CHECKS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("sanity-checks", driver.loc_);
    }
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 217 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SANITY_CHECKS:
        return  isc::dhcp::Dhcp4Parser::make_LEASE_CHECKS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("lease-checks", driver.loc_);
    }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::INTERFACES_CONFIG:
        return  isc::dhcp::Dhcp4Parser::make_DHCP_SOCKET_TYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("dhcp-socket-type", driver.loc_);
    }
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 235 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_SOCKET_TYPE:
        return  isc::dhcp::Dhcp4Parser::make_RAW(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("raw", driver.loc_);
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 244 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_SOCKET_TYPE:
    case isc::dhcp::Parser4Context::NCR_PROTOCOL:
        return  isc::dhcp::Dhcp4Parser::make_UDP(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("udp", driver.loc_);
    }
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 254 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case Parser4Context::INTERFACES_CONFIG:
        return  isc::dhcp::Dhcp4Parser::make_OUTBOUND_INTERFACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("outbound-interface", driver.loc_);
    }
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 263 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case Parser4Context::OUTBOUND_INTERFACE:
        return Dhcp4Parser::make_SAME_AS_INBOUND(driver.loc_);
    default:
        return Dhcp4Parser::make_STRING("same-as-inbound", driver.loc_);
    }
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 272 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case Parser4Context::OUTBOUND_INTERFACE:
        return Dhcp4Parser::make_USE_ROUTING(driver.loc_);
    default:
        return Dhcp4Parser::make_STRING("use-routing", driver.loc_);
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 281 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::INTERFACES_CONFIG:
        return  isc::dhcp::Dhcp4Parser::make_INTERFACES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("interfaces", driver.loc_);
    }
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 290 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::INTERFACES_CONFIG:
        return  isc::dhcp::Dhcp4Parser::make_RE_DETECT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("re-detect", driver.loc_);
    }
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 299 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_LEASE_DATABASE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("lease-database", driver.loc_);
    }
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 308 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_HOSTS_DATABASE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hosts-database", driver.loc_);
    }
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 317 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_HOSTS_DATABASES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hosts-databases", driver.loc_);
    }
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 326 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_CONFIG_CONTROL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("config-control", driver.loc_);
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 335 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG_CONTROL:
        return isc::dhcp::Dhcp4Parser::make_CONFIG_DATABASES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("config-databases", driver.loc_);
    }
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 344 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG_CONTROL:
        return isc::dhcp::Dhcp4Parser::make_CONFIG_FETCH_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("config-fetch-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 353 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_READONLY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("readonly", driver.loc_);
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 362 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::OPTION_DEF:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_TYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("type", driver.loc_);
    }
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 374 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp4Parser::make_MEMFILE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("memfile", driver.loc_);
    }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 383 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp4Parser::make_MYSQL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("mysql", driver.loc_);
    }
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 392 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp4Parser::make_POSTGRESQL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("postgresql", driver.loc_);
    }
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 401 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DATABASE_TYPE:
        return isc::dhcp::Dhcp4Parser::make_CQL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("cql", driver.loc_);
    }
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 410 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_USER(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("user", driver.loc_);
    }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 421 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_PASSWORD(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("password", driver.loc_);
    }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 432 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_HOST(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("host", driver.loc_);
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 443 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("port", driver.loc_);
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 454 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_PERSIST(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("persist", driver.loc_);
    }
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 464 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_LFC_INTERVAL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("lfc-interval", driver.loc_);
    }
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 474 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_CONNECT_TIMEOUT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("connect-timeout", driver.loc_);
    }
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 485 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_KEYSPACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("keyspace", driver.loc_);
    }
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 496 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_CONSISTENCY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("consistency", driver.loc_);
    }
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 507 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_SERIAL_CONSISTENCY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("serial-consistency", driver.loc_);
    }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 518 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_RECONNECT_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("reconnect-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 529 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_REQUEST_TIMEOUT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("request-timeout", driver.loc_);
    }
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 540 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_TCP_KEEPALIVE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("tcp-keepalive", driver.loc_);
    }
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 551 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_TCP_NODELAY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("tcp-nodelay", driver.loc_);
    }
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 562 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_CONTACT_POINTS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("contact-points", driver.loc_);
    }
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 573 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_MAX_RECONNECT_TRIES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max-reconnect-tries", driver.loc_);
    }
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 584 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_MAX_ROW_ERRORS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max_row_errors", driver.loc_);
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 594 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
        return isc::dhcp::Dhcp4Parser::make_MAX_ROW_ERRORS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max_row_errors", driver.loc_);
    }
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 595 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_VALID_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("valid-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 54:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 595 "dhcp4_lexer.ll"
=======
#line 606 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 605 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 606 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_MIN_VALID_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("min-valid-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 55:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 606 "dhcp4_lexer.ll"
=======
#line 617 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 616 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 617 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_MAX_VALID_LIFETIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max-valid-lifetime", driver.loc_);
    }
}
	YY_BREAK
case 56:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 617 "dhcp4_lexer.ll"
=======
#line 628 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 627 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 628 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_RENEW_TIMER(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("renew-timer", driver.loc_);
    }
}
	YY_BREAK
case 57:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 628 "dhcp4_lexer.ll"
=======
#line 639 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 638 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 639 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_REBIND_TIMER(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("rebind-timer", driver.loc_);
    }
}
	YY_BREAK
case 58:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 639 "dhcp4_lexer.ll"
=======
#line 650 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 649 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 650 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_DECLINE_PROBATION_PERIOD(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("decline-probation-period", driver.loc_);
    }
}
	YY_BREAK
case 59:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 648 "dhcp4_lexer.ll"
=======
#line 659 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 658 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 659 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_SERVER_TAG(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("server-tag", driver.loc_);
    }
}
	YY_BREAK
case 60:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 657 "dhcp4_lexer.ll"
=======
#line 668 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 667 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 668 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_SUBNET4(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("subnet4", driver.loc_);
    }
}
	YY_BREAK
case 61:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 667 "dhcp4_lexer.ll"
=======
#line 678 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 677 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 678 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch (driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_SHARED_NETWORKS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("shared-networks", driver.loc_);
    }
}
	YY_BREAK
case 62:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 676 "dhcp4_lexer.ll"
=======
#line 687 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 686 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 687 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_OPTION_DEF(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("option-def", driver.loc_);
    }
}
	YY_BREAK
case 63:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 686 "dhcp4_lexer.ll"
=======
#line 697 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 696 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 697 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::POOLS:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_OPTION_DATA(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("option-data", driver.loc_);
    }
}
	YY_BREAK
case 64:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 700 "dhcp4_lexer.ll"
=======
#line 711 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 710 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 711 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LEASE_DATABASE:
    case isc::dhcp::Parser4Context::HOSTS_DATABASE:
    case isc::dhcp::Parser4Context::CONFIG_DATABASE:
    case isc::dhcp::Parser4Context::OPTION_DEF:
    case isc::dhcp::Parser4Context::OPTION_DATA:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::LOGGERS:
        return isc::dhcp::Dhcp4Parser::make_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("name", driver.loc_);
    }
}
	YY_BREAK
case 65:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 716 "dhcp4_lexer.ll"
=======
#line 727 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 726 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 727 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DATA:
        return isc::dhcp::Dhcp4Parser::make_DATA(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("data", driver.loc_);
    }
}
	YY_BREAK
case 66:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 725 "dhcp4_lexer.ll"
=======
#line 736 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 735 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 736 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DATA:
        return isc::dhcp::Dhcp4Parser::make_ALWAYS_SEND(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("always-send", driver.loc_);
    }
}
	YY_BREAK
case 67:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 734 "dhcp4_lexer.ll"
=======
#line 745 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 744 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 745 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_POOLS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("pools", driver.loc_);
    }
}
	YY_BREAK
case 68:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 743 "dhcp4_lexer.ll"
=======
#line 754 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 753 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 754 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::POOLS:
        return isc::dhcp::Dhcp4Parser::make_POOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("pool", driver.loc_);
    }
}
	YY_BREAK
case 69:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 752 "dhcp4_lexer.ll"
=======
#line 763 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 762 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 763 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::INTERFACES_CONFIG:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::POOLS:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::OPTION_DEF:
    case isc::dhcp::Parser4Context::OPTION_DATA:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
    case isc::dhcp::Parser4Context::CONTROL_SOCKET:
    case isc::dhcp::Parser4Context::DHCP_QUEUE_CONTROL:
    case isc::dhcp::Parser4Context::LOGGERS:
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_USER_CONTEXT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("user-context", driver.loc_);
    }
}
	YY_BREAK
case 70:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 773 "dhcp4_lexer.ll"
=======
#line 784 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 783 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 784 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::INTERFACES_CONFIG:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::POOLS:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::OPTION_DEF:
    case isc::dhcp::Parser4Context::OPTION_DATA:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
    case isc::dhcp::Parser4Context::CONTROL_SOCKET:
    case isc::dhcp::Parser4Context::DHCP_QUEUE_CONTROL:
    case isc::dhcp::Parser4Context::LOGGERS:
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_COMMENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("comment", driver.loc_);
    }
}
	YY_BREAK
case 71:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 794 "dhcp4_lexer.ll"
=======
#line 805 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 804 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 805 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_SUBNET(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("subnet", driver.loc_);
    }
}
	YY_BREAK
case 72:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 803 "dhcp4_lexer.ll"
=======
#line 814 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 813 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 814 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_INTERFACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("interface", driver.loc_);
    }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 813 "dhcp4_lexer.ll"
=======
#line 824 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 823 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 824 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("id", driver.loc_);
    }
}
	YY_BREAK
case 74:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 822 "dhcp4_lexer.ll"
=======
#line 833 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 832 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 833 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_RESERVATION_MODE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("reservation-mode", driver.loc_);
    }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 833 "dhcp4_lexer.ll"
=======
#line 844 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 843 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 844 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp4Parser::make_DISABLED(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("disabled", driver.loc_);
    }
}
	YY_BREAK
case 76:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 842 "dhcp4_lexer.ll"
=======
#line 853 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 852 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 853 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp4Parser::make_DISABLED(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("off", driver.loc_);
    }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 851 "dhcp4_lexer.ll"
=======
#line 862 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 861 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 862 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp4Parser::make_OUT_OF_POOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("out-of-pool", driver.loc_);
    }
}
	YY_BREAK
case 78:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 860 "dhcp4_lexer.ll"
=======
#line 871 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 870 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 871 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp4Parser::make_GLOBAL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("global", driver.loc_);
    }
}
	YY_BREAK
case 79:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 869 "dhcp4_lexer.ll"
=======
#line 880 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 879 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 880 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RESERVATION_MODE:
        return isc::dhcp::Dhcp4Parser::make_ALL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("all", driver.loc_);
    }
}
	YY_BREAK
case 80:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 878 "dhcp4_lexer.ll"
=======
#line 889 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 888 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 889 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DEF:
    case isc::dhcp::Parser4Context::OPTION_DATA:
        return isc::dhcp::Dhcp4Parser::make_CODE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("code", driver.loc_);
    }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 888 "dhcp4_lexer.ll"
=======
#line 899 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 898 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 899 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_HOST_RESERVATION_IDENTIFIERS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("host-reservation-identifiers", driver.loc_);
    }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 897 "dhcp4_lexer.ll"
=======
#line 908 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 907 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 908 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_CALCULATE_TEE_TIMES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("calculate-tee-times", driver.loc_);
    }
}
	YY_BREAK
case 83:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 908 "dhcp4_lexer.ll"
=======
#line 919 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 918 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 919 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_T1_PERCENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("t1-percent", driver.loc_);
    }
}
	YY_BREAK
case 84:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 919 "dhcp4_lexer.ll"
=======
#line 930 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 929 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 930 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_T2_PERCENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("t2-percent", driver.loc_);
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 931 "dhcp4_lexer.ll"
=======
#line 942 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 941 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 942 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG:
        return isc::dhcp::Dhcp4Parser::make_LOGGING(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("Logging", driver.loc_);
    }
}
	YY_BREAK
case 86:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 940 "dhcp4_lexer.ll"
=======
#line 951 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 950 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 951 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::LOGGING:
        return isc::dhcp::Dhcp4Parser::make_LOGGERS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("loggers", driver.loc_);
    }
}
	YY_BREAK
case 87:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 950 "dhcp4_lexer.ll"
=======
#line 961 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 960 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 961 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LOGGERS:
        return isc::dhcp::Dhcp4Parser::make_OUTPUT_OPTIONS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("output_options", driver.loc_);
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 959 "dhcp4_lexer.ll"
=======
#line 970 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 969 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 970 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp4Parser::make_OUTPUT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("output", driver.loc_);
    }
}
	YY_BREAK
case 89:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 968 "dhcp4_lexer.ll"
=======
#line 979 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 978 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 979 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LOGGERS:
        return isc::dhcp::Dhcp4Parser::make_DEBUGLEVEL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("debuglevel", driver.loc_);
    }
}
	YY_BREAK
case 90:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 977 "dhcp4_lexer.ll"
=======
#line 988 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 987 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 988 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp4Parser::make_FLUSH(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("flush", driver.loc_);
    }
}
	YY_BREAK
case 91:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 986 "dhcp4_lexer.ll"
=======
#line 997 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 996 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 997 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp4Parser::make_MAXSIZE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("maxsize", driver.loc_);
    }
}
	YY_BREAK
case 92:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 995 "dhcp4_lexer.ll"
=======
#line 1006 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1005 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1006 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp4Parser::make_MAXVER(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("maxver", driver.loc_);
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1004 "dhcp4_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OUTPUT_OPTIONS:
        return isc::dhcp::Dhcp4Parser::make_PATTERN(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("pattern", driver.loc_);
    }
}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1013 "dhcp4_lexer.ll"
=======
#line 1015 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1014 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1015 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::LOGGERS:
        return isc::dhcp::Dhcp4Parser::make_SEVERITY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("severity", driver.loc_);
    }
}
	YY_BREAK
case 94:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1022 "dhcp4_lexer.ll"
=======
#line 1024 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1023 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1024 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_CLIENT_CLASSES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("client-classes", driver.loc_);
    }
}
	YY_BREAK
case 95:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1032 "dhcp4_lexer.ll"
=======
#line 1034 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1033 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1034 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::POOLS:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_REQUIRE_CLIENT_CLASSES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("require-client-classes", driver.loc_);
    }
}
	YY_BREAK
case 96:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1043 "dhcp4_lexer.ll"
=======
#line 1045 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1044 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1045 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::POOLS:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_CLIENT_CLASS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("client-class", driver.loc_);
    }
}
	YY_BREAK
case 97:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1055 "dhcp4_lexer.ll"
=======
#line 1057 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1056 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1057 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_TEST(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("test", driver.loc_);
    }
}
	YY_BREAK
case 98:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1064 "dhcp4_lexer.ll"
=======
#line 1066 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1065 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1066 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_ONLY_IF_REQUIRED(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("only-if-required", driver.loc_);
    }
}
	YY_BREAK
case 99:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1073 "dhcp4_lexer.ll"
=======
#line 1075 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1074 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1075 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_RESERVATIONS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("reservations", driver.loc_);
    }
}
	YY_BREAK
case 100:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1083 "dhcp4_lexer.ll"
=======
#line 1085 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1084 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1085 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_DUID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("duid", driver.loc_);
    }
}
	YY_BREAK
case 101:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1093 "dhcp4_lexer.ll"
=======
#line 1095 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1094 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1095 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_HW_ADDRESS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hw-address", driver.loc_);
    }
}
	YY_BREAK
case 102:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1103 "dhcp4_lexer.ll"
=======
#line 1105 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1104 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1105 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_CLIENT_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("client-id", driver.loc_);
    }
}
	YY_BREAK
case 103:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1113 "dhcp4_lexer.ll"
=======
#line 1115 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1114 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1115 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_CIRCUIT_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("circuit-id", driver.loc_);
    }
}
	YY_BREAK
case 104:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1123 "dhcp4_lexer.ll"
=======
#line 1125 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1124 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1125 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOST_RESERVATION_IDENTIFIERS:
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_FLEX_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("flex-id", driver.loc_);
    }
}
	YY_BREAK
case 105:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1133 "dhcp4_lexer.ll"
=======
#line 1135 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1134 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1135 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RESERVATIONS:
        return isc::dhcp::Dhcp4Parser::make_HOSTNAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hostname", driver.loc_);
    }
}
	YY_BREAK
case 106:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1142 "dhcp4_lexer.ll"
=======
#line 1144 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1143 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1144 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DEF:
    case isc::dhcp::Parser4Context::OPTION_DATA:
        return isc::dhcp::Dhcp4Parser::make_SPACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("space", driver.loc_);
    }
}
	YY_BREAK
case 107:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1152 "dhcp4_lexer.ll"
=======
#line 1154 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1153 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1154 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DATA:
        return isc::dhcp::Dhcp4Parser::make_CSV_FORMAT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("csv-format", driver.loc_);
    }
}
	YY_BREAK
case 108:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1161 "dhcp4_lexer.ll"
=======
#line 1163 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1162 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1163 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DEF:
        return isc::dhcp::Dhcp4Parser::make_RECORD_TYPES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("record-types", driver.loc_);
    }
}
	YY_BREAK
case 109:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1170 "dhcp4_lexer.ll"
=======
#line 1172 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1171 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1172 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DEF:
        return isc::dhcp::Dhcp4Parser::make_ENCAPSULATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("encapsulate", driver.loc_);
    }
}
	YY_BREAK
case 110:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1179 "dhcp4_lexer.ll"
=======
#line 1181 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1180 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1181 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::OPTION_DEF:
        return isc::dhcp::Dhcp4Parser::make_ARRAY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("array", driver.loc_);
    }
}
	YY_BREAK
case 111:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1188 "dhcp4_lexer.ll"
=======
#line 1190 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1189 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1190 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_RELAY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("relay", driver.loc_);
    }
}
	YY_BREAK
case 112:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1198 "dhcp4_lexer.ll"
=======
#line 1200 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1199 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1200 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RELAY:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    return isc::dhcp::Dhcp4Parser::make_IP_ADDRESS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("ip-address", driver.loc_);
    }
}
	YY_BREAK
case 113:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1208 "dhcp4_lexer.ll"
=======
#line 1210 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1209 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1210 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::RELAY:
    return isc::dhcp::Dhcp4Parser::make_IP_ADDRESSES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("ip-addresses", driver.loc_);
    }
}
	YY_BREAK
case 114:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1217 "dhcp4_lexer.ll"
=======
#line 1219 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1218 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1219 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_HOOKS_LIBRARIES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hooks-libraries", driver.loc_);
    }
}
	YY_BREAK
case 115:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1227 "dhcp4_lexer.ll"
=======
#line 1229 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1228 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1229 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOOKS_LIBRARIES:
        return isc::dhcp::Dhcp4Parser::make_PARAMETERS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("parameters", driver.loc_);
    }
}
	YY_BREAK
case 116:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1236 "dhcp4_lexer.ll"
=======
#line 1238 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1237 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1238 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::HOOKS_LIBRARIES:
        return isc::dhcp::Dhcp4Parser::make_LIBRARY(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("library", driver.loc_);
    }
}
	YY_BREAK
case 117:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1245 "dhcp4_lexer.ll"
=======
#line 1247 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1246 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1247 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_EXPIRED_LEASES_PROCESSING(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("expired-leases-processing", driver.loc_);
    }
}
	YY_BREAK
case 118:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1254 "dhcp4_lexer.ll"
=======
#line 1256 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1255 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1256 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp4Parser::make_RECLAIM_TIMER_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("reclaim-timer-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 119:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1263 "dhcp4_lexer.ll"
=======
#line 1265 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1264 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1265 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp4Parser::make_FLUSH_RECLAIMED_TIMER_WAIT_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("flush-reclaimed-timer-wait-time", driver.loc_);
    }
}
	YY_BREAK
case 120:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1272 "dhcp4_lexer.ll"
=======
#line 1274 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1273 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1274 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp4Parser::make_HOLD_RECLAIMED_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hold-reclaimed-time", driver.loc_);
    }
}
	YY_BREAK
case 121:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1281 "dhcp4_lexer.ll"
=======
#line 1283 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1282 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1283 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp4Parser::make_MAX_RECLAIM_LEASES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max-reclaim-leases", driver.loc_);
    }
}
	YY_BREAK
case 122:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1290 "dhcp4_lexer.ll"
=======
#line 1292 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1291 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1292 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp4Parser::make_MAX_RECLAIM_TIME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max-reclaim-time", driver.loc_);
    }
}
	YY_BREAK
case 123:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1299 "dhcp4_lexer.ll"
=======
#line 1301 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1300 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1301 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::EXPIRED_LEASES_PROCESSING:
        return isc::dhcp::Dhcp4Parser::make_UNWARNED_RECLAIM_CYCLES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("unwarned-reclaim-cycles", driver.loc_);
    }
}
	YY_BREAK
case 124:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1308 "dhcp4_lexer.ll"
=======
#line 1310 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1309 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1310 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_DHCP4O6_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("dhcp4o6-port", driver.loc_);
    }
}
	YY_BREAK
case 125:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1317 "dhcp4_lexer.ll"
=======
#line 1319 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1318 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1319 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_CONTROL_SOCKET(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("control-socket", driver.loc_);
    }
}
	YY_BREAK
case 126:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1326 "dhcp4_lexer.ll"
=======
#line 1328 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1327 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1328 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONTROL_SOCKET:
        return isc::dhcp::Dhcp4Parser::make_SOCKET_TYPE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("socket-type", driver.loc_);
    }
}
	YY_BREAK
case 127:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1335 "dhcp4_lexer.ll"
=======
#line 1337 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1336 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1337 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONTROL_SOCKET:
        return isc::dhcp::Dhcp4Parser::make_SOCKET_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("socket-name", driver.loc_);
    }
}
	YY_BREAK
case 128:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1344 "dhcp4_lexer.ll"
=======
#line 1346 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1345 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1346 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_DHCP_QUEUE_CONTROL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("dhcp-queue-control", driver.loc_);
    }
}
	YY_BREAK
case 129:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1353 "dhcp4_lexer.ll"
=======
#line 1355 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1354 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1355 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_DHCP_DDNS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("dhcp-ddns", driver.loc_);
    }
}
	YY_BREAK
case 130:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1362 "dhcp4_lexer.ll"
=======
#line 1364 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1363 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1364 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_ENABLE_UPDATES(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("enable-updates", driver.loc_);
    }
}
	YY_BREAK
case 131:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1371 "dhcp4_lexer.ll"
=======
#line 1373 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1372 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1373 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_QUALIFYING_SUFFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("qualifying-suffix", driver.loc_);
    }
}
	YY_BREAK
case 132:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1380 "dhcp4_lexer.ll"
=======
#line 1382 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1381 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1382 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_SERVER_IP(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("server-ip", driver.loc_);
    }
}
	YY_BREAK
case 133:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1389 "dhcp4_lexer.ll"
=======
#line 1391 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1390 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1391 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_SERVER_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("server-port", driver.loc_);
    }
}
	YY_BREAK
case 134:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1398 "dhcp4_lexer.ll"
=======
#line 1400 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1399 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1400 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_SENDER_IP(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("sender-ip", driver.loc_);
    }
}
	YY_BREAK
case 135:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1407 "dhcp4_lexer.ll"
=======
#line 1409 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1408 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1409 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_SENDER_PORT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("sender-port", driver.loc_);
    }
}
	YY_BREAK
case 136:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1416 "dhcp4_lexer.ll"
=======
#line 1418 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1417 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1418 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_MAX_QUEUE_SIZE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("max-queue-size", driver.loc_);
    }
}
	YY_BREAK
case 137:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1425 "dhcp4_lexer.ll"
=======
#line 1427 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1426 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1427 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_NCR_PROTOCOL(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("ncr-protocol", driver.loc_);
    }
}
	YY_BREAK
case 138:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1434 "dhcp4_lexer.ll"
=======
#line 1436 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1435 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1436 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_NCR_FORMAT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("ncr-format", driver.loc_);
    }
}
	YY_BREAK
case 139:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1443 "dhcp4_lexer.ll"
=======
#line 1445 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1444 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1445 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_OVERRIDE_NO_UPDATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("override-no-update", driver.loc_);
    }
}
	YY_BREAK
case 140:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1452 "dhcp4_lexer.ll"
=======
#line 1454 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1453 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1454 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_OVERRIDE_CLIENT_UPDATE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("override-client-update", driver.loc_);
    }
}
	YY_BREAK
case 141:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1461 "dhcp4_lexer.ll"
=======
#line 1463 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1462 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1463 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_REPLACE_CLIENT_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("replace-client-name", driver.loc_);
    }
}
	YY_BREAK
case 142:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1470 "dhcp4_lexer.ll"
=======
#line 1472 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1471 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1472 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_GENERATED_PREFIX(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("generated-prefix", driver.loc_);
    }
}
	YY_BREAK
case 143:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1479 "dhcp4_lexer.ll"
=======
#line 1481 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1480 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1481 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_HOSTNAME_CHAR_SET(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hostname-char-set", driver.loc_);
    }
}
	YY_BREAK
case 144:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1489 "dhcp4_lexer.ll"
=======
#line 1491 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1490 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1491 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::DHCP_DDNS:
        return isc::dhcp::Dhcp4Parser::make_HOSTNAME_CHAR_REPLACEMENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("hostname-char-replacement", driver.loc_);
    }
}
	YY_BREAK
case 145:
<<<<<<< HEAD
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
#line 1499 "dhcp4_lexer.ll"
=======
#line 1501 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1500 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
YY_RULE_SETUP
#line 1501 "dhcp4_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::NCR_PROTOCOL) {
         return isc::dhcp::Dhcp4Parser::make_UDP(driver.loc_);
    }
    std::string tmp(yytext+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1511 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::NCR_PROTOCOL) {
         return isc::dhcp::Dhcp4Parser::make_UDP(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1509 "dhcp4_lexer.ll"
=======
#line 1511 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1510 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1521 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::NCR_PROTOCOL) {
        return isc::dhcp::Dhcp4Parser::make_TCP(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 148:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1519 "dhcp4_lexer.ll"
=======
#line 1521 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1520 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1531 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::NCR_FORMAT) {
        return isc::dhcp::Dhcp4Parser::make_JSON(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1529 "dhcp4_lexer.ll"
=======
#line 1531 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1530 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1541 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp4Parser::make_WHEN_PRESENT(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1539 "dhcp4_lexer.ll"
=======
#line 1541 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1540 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1551 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp4Parser::make_WHEN_PRESENT(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1549 "dhcp4_lexer.ll"
=======
#line 1551 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1550 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1561 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp4Parser::make_NEVER(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 152:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1559 "dhcp4_lexer.ll"
=======
#line 1561 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1560 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1571 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp4Parser::make_NEVER(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1569 "dhcp4_lexer.ll"
=======
#line 1571 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1570 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1581 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp4Parser::make_ALWAYS(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1579 "dhcp4_lexer.ll"
=======
#line 1581 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1580 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::dhcp::Parser4Context::REPLACE_CLIENT_NAME) {
        return isc::dhcp::Dhcp4Parser::make_WHEN_NOT_PRESENT(driver.loc_);
    }
    std::string tmp(parser4_text+1);
    tmp.resize(tmp.size() - 1);
    return isc::dhcp::Dhcp4Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 154:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
#line 1589 "dhcp4_lexer.ll"
=======
#line 1591 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1590 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1591 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG:
        return isc::dhcp::Dhcp4Parser::make_DHCP6(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("Dhcp6", driver.loc_);
    }
}
	YY_BREAK
case 155:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1598 "dhcp4_lexer.ll"
=======
#line 1600 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1599 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1600 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG:
        return isc::dhcp::Dhcp4Parser::make_DHCPDDNS(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("DhcpDdns", driver.loc_);
    }
}
	YY_BREAK
case 156:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1607 "dhcp4_lexer.ll"
=======
#line 1609 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1608 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1609 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::CONFIG:
        return isc::dhcp::Dhcp4Parser::make_CONTROL_AGENT(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("Control-agent", driver.loc_);
    }
}
	YY_BREAK
case 157:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1616 "dhcp4_lexer.ll"
=======
#line 1618 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1617 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1618 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_SUBNET_4O6_INTERFACE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("4o6-interface", driver.loc_);
    }
}
	YY_BREAK
case 158:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1625 "dhcp4_lexer.ll"
=======
#line 1627 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1626 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1627 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_SUBNET_4O6_INTERFACE_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("4o6-interface-id", driver.loc_);
    }
}
	YY_BREAK
case 159:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1634 "dhcp4_lexer.ll"
=======
#line 1636 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1635 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1636 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::SUBNET4:
        return isc::dhcp::Dhcp4Parser::make_SUBNET_4O6_SUBNET(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("4o6-subnet", driver.loc_);
    }
}
	YY_BREAK
case 160:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1643 "dhcp4_lexer.ll"
=======
#line 1645 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1644 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1645 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
        return isc::dhcp::Dhcp4Parser::make_ECHO_CLIENT_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("echo-client-id", driver.loc_);
    }
}
	YY_BREAK
case 161:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1652 "dhcp4_lexer.ll"
=======
#line 1654 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1653 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1654 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_MATCH_CLIENT_ID(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("match-client-id", driver.loc_);
    }
}
	YY_BREAK
case 162:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1663 "dhcp4_lexer.ll"
=======
#line 1665 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1664 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1665 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
        return isc::dhcp::Dhcp4Parser::make_AUTHORITATIVE(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("authoritative", driver.loc_);
    }
}
	YY_BREAK
case 163:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1674 "dhcp4_lexer.ll"
=======
#line 1676 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1675 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1676 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_NEXT_SERVER(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("next-server", driver.loc_);
    }
}
	YY_BREAK
case 164:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1687 "dhcp4_lexer.ll"
=======
#line 1689 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1688 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1689 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_SERVER_HOSTNAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("server-hostname", driver.loc_);
    }
}
	YY_BREAK
case 165:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1700 "dhcp4_lexer.ll"
=======
#line 1702 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1701 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1702 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    switch(driver.ctx_) {
    case isc::dhcp::Parser4Context::DHCP4:
    case isc::dhcp::Parser4Context::SUBNET4:
    case isc::dhcp::Parser4Context::SHARED_NETWORK:
    case isc::dhcp::Parser4Context::RESERVATIONS:
    case isc::dhcp::Parser4Context::CLIENT_CLASSES:
        return isc::dhcp::Dhcp4Parser::make_BOOT_FILE_NAME(driver.loc_);
    default:
        return isc::dhcp::Dhcp4Parser::make_STRING("boot-file-name", driver.loc_);
    }
}
	YY_BREAK
case 166:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1715 "dhcp4_lexer.ll"
=======
#line 1717 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1716 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1717 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* A string has been matched. It contains the actual string and single quotes.
       We need to get those quotes out of the way and just use its content, e.g.
       for 'foo' we should get foo */
    std::string raw(parser4_text+1);
    size_t len = raw.size() - 1;
    raw.resize(len);
    std::string decoded;
    decoded.reserve(len);
    for (size_t pos = 0; pos < len; ++pos) {
        int b = 0;
        char c = raw[pos];
        switch (c) {
        case '"':
            /* impossible condition */
            driver.error(driver.loc_, "Bad quote in \"" + raw + "\"");
            break;
        case '\\':
            ++pos;
            if (pos >= len) {
                /* impossible condition */
                driver.error(driver.loc_, "Overflow escape in \"" + raw + "\"");
            }
            c = raw[pos];
            switch (c) {
            case '"':
            case '\\':
            case '/':
                decoded.push_back(c);
                break;
            case 'b':
                decoded.push_back('\b');
                break;
            case 'f':
                decoded.push_back('\f');
                break;
            case 'n':
                decoded.push_back('\n');
                break;
            case 'r':
                decoded.push_back('\r');
                break;
            case 't':
                decoded.push_back('\t');
                break;
            case 'u':
                /* support only \u0000 to \u00ff */
                ++pos;
                if (pos + 4 > len) {
                    /* impossible condition */
                    driver.error(driver.loc_,
                                 "Overflow unicode escape in \"" + raw + "\"");
                }
                if ((raw[pos] != '0') || (raw[pos + 1] != '0')) {
                    driver.error(driver.loc_, "Unsupported unicode escape in \"" + raw + "\"");
                }
                pos += 2;
                c = raw[pos];
                if ((c >= '0') && (c <= '9')) {
                    b = (c - '0') << 4;
                } else if ((c >= 'A') && (c <= 'F')) {
                    b = (c - 'A' + 10) << 4;
                } else if ((c >= 'a') && (c <= 'f')) {
                    b = (c - 'a' + 10) << 4;
                } else {
                    /* impossible condition */
                    driver.error(driver.loc_, "Not hexadecimal in unicode escape in \"" + raw + "\"");
                }
                pos++;
                c = raw[pos];
                if ((c >= '0') && (c <= '9')) {
                    b |= c - '0';
                } else if ((c >= 'A') && (c <= 'F')) {
                    b |= c - 'A' + 10;
                } else if ((c >= 'a') && (c <= 'f')) {
                    b |= c - 'a' + 10;
                } else {
                    /* impossible condition */
                    driver.error(driver.loc_, "Not hexadecimal in unicode escape in \"" + raw + "\"");
                }
                decoded.push_back(static_cast<char>(b & 0xff));
                break;
            default:
                /* impossible condition */
                driver.error(driver.loc_, "Bad escape in \"" + raw + "\"");
            }
            break;
        default:
            if ((c >= 0) && (c < 0x20)) {
                /* impossible condition */
                driver.error(driver.loc_, "Invalid control in \"" + raw + "\"");
            }
            decoded.push_back(c);
        }
    }

    return isc::dhcp::Dhcp4Parser::make_STRING(decoded, driver.loc_);
}
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1814 "dhcp4_lexer.ll"
=======
#line 1816 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1815 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1816 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* Bad string with a forbidden control character inside */
    driver.error(driver.loc_, "Invalid control in " + std::string(parser4_text));
}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1819 "dhcp4_lexer.ll"
=======
#line 1821 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1820 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1821 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* Bad string with a bad escape inside */
    driver.error(driver.loc_, "Bad escape in " + std::string(parser4_text));
}
	YY_BREAK
case 169:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1824 "dhcp4_lexer.ll"
=======
#line 1826 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1825 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1826 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* Bad string with an open escape at the end */
    driver.error(driver.loc_, "Overflow escape in " + std::string(parser4_text));
}
	YY_BREAK
case 170:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1829 "dhcp4_lexer.ll"
=======
#line 1831 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1830 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1831 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{ return isc::dhcp::Dhcp4Parser::make_LSQUARE_BRACKET(driver.loc_); }
	YY_BREAK
case 171:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1830 "dhcp4_lexer.ll"
=======
#line 1832 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1831 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1832 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{ return isc::dhcp::Dhcp4Parser::make_RSQUARE_BRACKET(driver.loc_); }
	YY_BREAK
case 172:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1831 "dhcp4_lexer.ll"
=======
#line 1833 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1832 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1833 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{ return isc::dhcp::Dhcp4Parser::make_LCURLY_BRACKET(driver.loc_); }
	YY_BREAK
case 173:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1832 "dhcp4_lexer.ll"
=======
#line 1834 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1833 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1834 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{ return isc::dhcp::Dhcp4Parser::make_RCURLY_BRACKET(driver.loc_); }
	YY_BREAK
case 174:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1833 "dhcp4_lexer.ll"
=======
#line 1835 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1834 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1835 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{ return isc::dhcp::Dhcp4Parser::make_COMMA(driver.loc_); }
	YY_BREAK
case 175:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1834 "dhcp4_lexer.ll"
=======
#line 1836 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1835 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1836 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{ return isc::dhcp::Dhcp4Parser::make_COLON(driver.loc_); }
	YY_BREAK
case 176:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1836 "dhcp4_lexer.ll"
=======
#line 1838 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1837 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1838 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* An integer was found. */
    std::string tmp(parser4_text);
    int64_t integer = 0;
    try {
        /* In substring we want to use negative values (e.g. -1).
           In enterprise-id we need to use values up to 0xffffffff.
           To cover both of those use cases, we need at least
           int64_t. */
        integer = boost::lexical_cast<int64_t>(tmp);
    } catch (const boost::bad_lexical_cast &) {
        driver.error(driver.loc_, "Failed to convert " + tmp + " to an integer.");
    }

    /* The parser needs the string form as double conversion is no lossless */
    return isc::dhcp::Dhcp4Parser::make_INTEGER(integer, driver.loc_);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1854 "dhcp4_lexer.ll"
=======
#line 1856 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1855 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1856 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    /* A floating point was found. */
    std::string tmp(parser4_text);
    double fp = 0.0;
    try {
        fp = boost::lexical_cast<double>(tmp);
    } catch (const boost::bad_lexical_cast &) {
        driver.error(driver.loc_, "Failed to convert " + tmp + " to a floating point.");
    }

    return isc::dhcp::Dhcp4Parser::make_FLOAT(fp, driver.loc_);
}
	YY_BREAK
case 178:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1867 "dhcp4_lexer.ll"
=======
#line 1869 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1868 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1869 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    string tmp(parser4_text);
    return isc::dhcp::Dhcp4Parser::make_BOOLEAN(tmp == "true", driver.loc_);
}
	YY_BREAK
case 179:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1872 "dhcp4_lexer.ll"
=======
#line 1874 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1873 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1874 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
   return isc::dhcp::Dhcp4Parser::make_NULL_TYPE(driver.loc_);
}
	YY_BREAK
case 180:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1876 "dhcp4_lexer.ll"
=======
#line 1878 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1877 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1878 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
driver.error (driver.loc_, "JSON true reserved keyword is lower case only");
	YY_BREAK
case 181:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1878 "dhcp4_lexer.ll"
=======
#line 1880 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1879 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1880 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
driver.error (driver.loc_, "JSON false reserved keyword is lower case only");
	YY_BREAK
case 182:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1880 "dhcp4_lexer.ll"
=======
#line 1882 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1881 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1882 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
driver.error (driver.loc_, "JSON null reserved keyword is lower case only");
	YY_BREAK
case 183:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1882 "dhcp4_lexer.ll"
driver.error (driver.loc_, "Invalid character: " + std::string(parser4_text));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 1884 "dhcp4_lexer.ll"
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
#line 1884 "dhcp4_lexer.ll"
driver.error (driver.loc_, "Invalid character: " + std::string(yytext));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 1886 "dhcp4_lexer.ll"
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1883 "dhcp4_lexer.ll"
driver.error (driver.loc_, "Invalid character: " + std::string(yytext));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 1885 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
{
    if (driver.states_.empty()) {
        return isc::dhcp::Dhcp4Parser::make_END(driver.loc_);
    }
    driver.loc_ = driver.locs_.back();
    driver.locs_.pop_back();
    driver.file_ = driver.files_.back();
    driver.files_.pop_back();
    if (driver.sfile_) {
        fclose(driver.sfile_);
        driver.sfile_ = 0;
    }
    if (!driver.sfiles_.empty()) {
        driver.sfile_ = driver.sfiles_.back();
        driver.sfiles_.pop_back();
    }
    parser4__delete_buffer(YY_CURRENT_BUFFER);
    parser4__switch_to_buffer(driver.states_.back());
    driver.states_.pop_back();

    BEGIN(DIR_EXIT);
}
	YY_BREAK
case 184:
YY_RULE_SETUP
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1907 "dhcp4_lexer.ll"
ECHO;
	YY_BREAK
#line 4360 "dhcp4_lexer.cc"
=======
#line 1909 "dhcp4_lexer.ll"
=======
#line 1908 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
ECHO;
	YY_BREAK
#line 4594 "dhcp4_lexer.cc"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1909 "dhcp4_lexer.ll"
ECHO;
	YY_BREAK
#line 4594 "dhcp4_lexer.cc"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed parser4_in at a new source and called
			 * parser4_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = parser4_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( parser4_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * parser4_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of parser4_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					parser4_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			parser4_restart(parser4_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) parser4_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
<<<<<<< HEAD
<<<<<<< HEAD
			if ( yy_current_state >= 1587 )
				yy_c = yy_meta[(unsigned int) yy_c];
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
			if ( yy_current_state >= 1591 )
				yy_c = yy_meta[yy_c];
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
<<<<<<< HEAD
<<<<<<< HEAD
		if ( yy_current_state >= 1587 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1586);
=======
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
		if ( yy_current_state >= 1591 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1590);
<<<<<<< HEAD
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					parser4_restart(parser4_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( parser4_wrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve parser4_text */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and parser4_lineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void parser4_restart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        parser4_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            parser4__create_buffer(parser4_in,YY_BUF_SIZE );
	}

	parser4__init_buffer(YY_CURRENT_BUFFER,input_file );
	parser4__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void parser4__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		parser4_pop_buffer_state();
	 *		parser4_push_buffer_state(new_buffer);
     */
	parser4_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	parser4__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (parser4_wrap()) processing, but the only time this flag
	 * is looked at is after parser4_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void parser4__load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	parser4_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE parser4__create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) parser4_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parser4__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) parser4_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in parser4__create_buffer()" );

	b->yy_is_our_buffer = 1;

	parser4__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with parser4__create_buffer()
 * 
 */
/* %if-c-only */
    void parser4__delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		parser4_free((void *) b->yy_ch_buf  );

	parser4_free((void *) b  );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a parser4_restart() or at EOF.
 */
/* %if-c-only */
    static void parser4__init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	parser4__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then parser4__init_buffer was _probably_
     * called from parser4_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void parser4__flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		parser4__load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void parser4_push_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	parser4_ensure_buffer_stack();

	/* This block is copied from parser4__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from parser4__switch_to_buffer. */
	parser4__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void parser4_pop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	parser4__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		parser4__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void parser4_ensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)parser4_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parser4_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)parser4_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in parser4_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE parser4__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) parser4_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in parser4__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	parser4__switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to parser4_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       parser4__scan_bytes() instead.
 */
YY_BUFFER_STATE parser4__scan_string (yyconst char * yystr )
{
    
	return parser4__scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to parser4_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE parser4__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) parser4_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in parser4__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = parser4__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in parser4__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up parser4_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		parser4_text[parser4_leng] = (yy_hold_char); \
		(yy_c_buf_p) = parser4_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		parser4_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int parser4_get_lineno  (void)
{
        
    return parser4_lineno;
}

/** Get the input stream.
 * 
 */
FILE *parser4_get_in  (void)
{
        return parser4_in;
}

/** Get the output stream.
 * 
 */
FILE *parser4_get_out  (void)
{
        return parser4_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t parser4_get_leng  (void)
{
        return parser4_leng;
}

/** Get the current token.
 * 
 */

char *parser4_get_text  (void)
{
        return parser4_text;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void parser4_set_lineno (int  line_number )
{
    
    parser4_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see parser4__switch_to_buffer
 */
void parser4_set_in (FILE *  in_str )
{
        parser4_in = in_str ;
}

void parser4_set_out (FILE *  out_str )
{
        parser4_out = out_str ;
}

int parser4_get_debug  (void)
{
        return parser4__flex_debug;
}

void parser4_set_debug (int  bdebug )
{
        parser4__flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from parser4_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    parser4_in = stdin;
    parser4_out = stdout;
#else
    parser4_in = (FILE *) 0;
    parser4_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * parser4_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* parser4_lex_destroy is for both reentrant and non-reentrant scanners. */
int parser4_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		parser4__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		parser4_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	parser4_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * parser4_lex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *parser4_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *parser4_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void parser4_free (void * ptr )
{
	free( (char *) ptr );	/* see parser4_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
#line 1907 "dhcp4_lexer.ll"

=======
#line 1909 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter
=======
#line 1908 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Updated example confs
=======
#line 1909 "dhcp4_lexer.ll"
>>>>>>> [#805,!5-p] Memfile and kea-dhcp4 now suppor max-row-errors parameter


using namespace isc::dhcp;

void
Parser4Context::scanStringBegin(const std::string& str, ParserType parser_type)
{
    start_token_flag = true;
    start_token_value = parser_type;

    file_ = "<string>";
    sfile_ = 0;
    loc_.initialize(&file_);
    parser4__flex_debug = trace_scanning_;
    YY_BUFFER_STATE buffer;
    buffer = parser4__scan_bytes(str.c_str(), str.size());
    if (!buffer) {
        fatal("cannot scan string");
        /* fatal() throws an exception so this can't be reached */
    }
}

void
Parser4Context::scanFileBegin(FILE * f,
                              const std::string& filename,
                              ParserType parser_type)
{
    start_token_flag = true;
    start_token_value = parser_type;

    file_ = filename;
    sfile_ = f;
    loc_.initialize(&file_);
    parser4__flex_debug = trace_scanning_;
    YY_BUFFER_STATE buffer;

    /* See dhcp4_lexer.cc header for available definitions */
    buffer = parser4__create_buffer(f, 65536 /*buffer size*/);
    if (!buffer) {
        fatal("cannot scan file " + filename);
    }
    parser4__switch_to_buffer(buffer);
}

void
Parser4Context::scanEnd() {
    if (sfile_)
        fclose(sfile_);
    sfile_ = 0;
    static_cast<void>(parser4_lex_destroy());
    /* Close files */
    while (!sfiles_.empty()) {
        FILE* f = sfiles_.back();
        if (f) {
            fclose(f);
        }
        sfiles_.pop_back();
    }
    /* Delete states */
    while (!states_.empty()) {
        parser4__delete_buffer(states_.back());
        states_.pop_back();
    }
}

void
Parser4Context::includeFile(const std::string& filename) {
    if (states_.size() > 10) {
        fatal("Too many nested include.");
    }

    FILE* f = fopen(filename.c_str(), "r");
    if (!f) {
        fatal("Can't open include file " + filename);
    }
    if (sfile_) {
        sfiles_.push_back(sfile_);
    }
    sfile_ = f;
    states_.push_back(YY_CURRENT_BUFFER);
    YY_BUFFER_STATE buffer;
    buffer = parser4__create_buffer(f, 65536 /*buffer size*/);
    if (!buffer) {
        fatal( "Can't scan include file " + filename);
    }
    parser4__switch_to_buffer(buffer);
    files_.push_back(file_);
    file_ = filename;
    locs_.push_back(loc_);
    loc_.initialize(&file_);

    BEGIN(INITIAL);
}

namespace {
/** To avoid unused function error */
class Dummy {
    /* cppcheck-suppress unusedPrivateFunction */
    void dummy() { yy_fatal_error("Fix me: how to disable its definition?"); }
};
}
#endif /* !__clang_analyzer__ */


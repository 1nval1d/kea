<!--
 - Copyright (C) 2019 Internet Systems Consortium, Inc. ("ISC")
 -
 - This Source Code Form is subject to the terms of the Mozilla Public
 - License, v. 2.0. If a copy of the MPL was not distributed with this
 - file, you can obtain one at http://mozilla.org/MPL/2.0/.
-->

    <section id="cb-cmds-library">
      <title>cb_cmds: Configuration Backend Commands</title>
      <para>
        This section describes the <command>cb_cmds</command> hooks library
        which is used to manage Kea servers' configurations with the Configuration
        Backends. This library must be used in conjuction with available CB
        implementations, which provide the common APIs to create, read, update
        and delete (CRUD) the configuration information in the respective
        databases. For example: the <command>mysql_cb</command> hooks library
        released in Kea 1.6.0 implements this API for MySQL. In order to manage
        the configuration information in the MySQL database both
        <command>mysql_cb</command> and <command>cb_cmds</command> libraries
        must be loaded by the server used for the configuration management.
      </para>

      <para>The <command>cb_cmds</command> library is only available to ISC
      customers with a support contract.

      <note>
        <para>This library may only be loaded by the <command>kea-dhcp4</command>
        or the <command>kea-dhcp6</command> process.
        </para>
      </note>
      </para>

      <section>
        <title>Commands Structure</title>
        <para>There are 5 types of commands supported by this library:</para>
        <itemizedlist>
          <listitem><simpara><command>del</command> - delete selected object from the
          database, e.g. <command>remote-global-parameter4-del</command>
          </simpara></listitem>
          <listitem><simpara><command>get</command> - fetch selected object from the
          database, e.g. <command>remote-subnet4-get</command>,</simpara></listitem>
          <listitem><simpara><command>get-all</command> - fetch all objects of the
          particular type from the database, e.g.
          <command>remote-option-def4-get-all</command>,</simpara></listitem>
          <listitem><simpara><command>list</command> - list all objects of the particular
          type in the database, e.g. <command>remote-network4-list</command>; this class
          of commands returns brief information about each object comparing to the output
          of <command>get-all</command>,</simpara>
          </listitem>
          <listitem><simpara><command>set</command> - creates or replaces an object
          of the given type in the database, e.g. <command>remote-option4-global-set</command>
          .</simpara></listitem>
        </itemizedlist>

        <para>All types commands accept optional <command>remote</command> map which
        selects the database instance to which the command refers. For example:
<screen>
{
    "command": "remote-subnet4-list",
    "arguments": {
        "remote": {
            "type": "mysql",
            "host": "192.0.2.33",
            "port": 3302
        }
    }
}
</screen>
        </para>
        <para>
          selects the MySQL database running on host 192.0.2.33 and port 3302 to
          fetch the list of subnets from. All parameters in the
          <command>remote</command> are optional. The <command>port</command>
          parameter can be only specified in conjuction with the
          <command>host</command>. If no parameters in the <command>remote</command>
          parameter are to be specified, the parameter should be omitted. In this
          case the server will use the first backend listed in the
          <command>config-control</command> map within the configuration of the
          server receiving the command.
        </para>

        <note>
          <para>
            In the Kea 1.6.0 release, it is possible to configure Kea server to
            use only one configuration backend. Strictly speaking it is possible
            to point Kea server to at most one MySQL database using the
            <command>config-control</command> parameter. That's why in this
            release the <command>remote</command> parameter may be omitted in
            the commands because the cb_cmds hooks library will by default use
            the sole backend.
          </para>
        </note>
      </section>

      <section id="cb-cmds-dhcp">
        <title>Control Commands for DHCP Servers</title>
        <para>This section describes and gives some examples of the control
        commands provided by the <command>cb_cmds</command> hooks library to manage
        the configuration information for the DHCPv4 and DHCPv6 server. Many of the
        commands are almost identical between DHCPv4 and DHCPv6, i.e. only differ by
        command name. Other commands slightly differ by the structure of the inserted
        data, e.g. structure of the IPv4 subnet information is different than the
        structure of the IPv6 subnet. Nevertheless, they still share the structure of
        the command arguments and thus it makes sense to describe them together.</para>

        <para>In the following sections various commands are described and the
        usage examples are provided. In the sections jointly describing the DHCPv4 and
        DHCPv6 variants of the particular command we sometimes use the following
        notation - the <command>remote-subnet[46]-set</command> is the wildcard
        name for the two commands: <command>remote-subnet4-set</command> and
        <command>remote-subnet6-set</command>.</para>

        <para>In addition, whenever the text in the subsequent sections refers to a
        DHCP command or DHCP parameter, it refers to both DHCPv4 and DHCPv6
        case. The text specific to the particular server type refers to them as:
        DHCPv4 command, DHCPv4 parameter, DHCPv6 command, DHCPv6 parameter etc.
        </para>

        <section id="cb-cmds-metadata">
          <title>Metadata</title>
          <para>A typical response to the <command>get</command> or <command>list</command>
          command includes a list of returned objects (e.g. subnets) and each such
          object contains the <command>metadata</command> map including some
          database specific information for this object. In other words, the metadata
          is meant to contain any information about the fetched object which may be
          useful for the administrator, but is not the part of the object
          specification from the DHCP server standpoint. In the Kea 1.6.0 release, the
          metadata is limited to the <command>server-tag</command>, which describes
          the association of the object with the particular server. The server tag
          is always set to <command>all</command> in the Kea 1.6.0 beta release because
          this release does not provide API calls to make associatiions of the
          configuration objects with any specific servers, i.e. every object is
          associated with all servers using the particular database instance.
          </para>

          <para>The following is the example response to the <command>remote-network4-list</command>
          including the metadata:
          <screen>
{
    "result": 0,
    "text": "1 IPv4 shared network(s) found.",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3",
                "metadata": {
                    "server-tag": "all"
                }
            }
        ],
        "count": 1
    }
}
         </screen>
         </para>

          <para>Client implementations must not assume that the metadata contains
          only the <command>server-tag</command> parameter. In the future releases
          this map will be extended with additional information, e.g. object
          modification time, log message created during the last modification etc.
          </para>
        </section>

        <section id="command-remote-global-parameter4-del">
          <title>remote-global-parameter4-del, remote-global-parameter6-del commands</title>
          <para id="command-remote-global-parameter6-del">This command is used to
          delete a global DHCP parameter from the configuration database. When the
          parameter is deleted from the database the server will use the value
          specified in the configuration file for this parameter or a default
          value if the parameter is not specified in the configuration file.</para>
          <para>The following command attempts to delete the DHCPv4
          <command>renew-timer</command> parameter from the database:
          <screen>
{
    "command": "remote-global-parameter4-del",
    "arguments": {
        "parameters": [ "renew-timer" ],
        "remote": {
            "type": "mysql"
         }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-global-parameter4-get">
          <title>remote-global-parameter4-get, remote-global-parameter6-get commands</title>
          <para id="command-remote-global-parameter6-get">These commands are used to
          fetch a scalar global DHCP parameter from the configuration database.</para>
          <para>The following command attempts to fetch the
          <command>boot-file-name</command> parameter:
          <screen>
{
    "command": "remote-global-parameter4-get",
    "arguments": {
        "parameters": [ "boot-file-name" ],
         "remote": {
             "type": "mysql"
         }
    }
}
          </screen>
          </para>
          <para>
            The returned value has one of the four scalar types: string, integer, real
            or boolean. Non scalar global configuration parameters, such as map or list,
            are not returned by this command.</para>

            <para>In case of the example above the string value is returned, e.g.:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "boot-file-name": "/dev/null",
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            The example response for the integer value is:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "renew-timer": 2000,
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            The real value:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "t1-percent": 0.85,
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            Finally, the boolean value:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "match-client-id": true,
            "metadata": {
                "server-tag": "all"
            }
        },
        "count": 1
    }
}
            </screen>
          </para>
        </section>

        <section id="command-remote-global-parameter4-get-all">
          <title>remote-global-parameter4-get-all, remote-global-parameter6-get-all commands</title>
          <para id="command-remote-global-parameter6-get-all">These commands are used to
          fetch all global DHCP parameters from the database. They include no arguments
          besides the optional <command>remote</command> map.</para>
        </section>

        <section id="command-remote-global-parameter4-set">
          <title>remote-global-parameter4-set</title>
          <para id="command-remote-global-parameter6-set">This command is used to
          create scalar global DHCP parameters in the database. If any of the parameters
          already exists, its value is replaced as a result of this command. It is
          possible to set multiple parameters within a single command, each having
          one of the four types: a string, integer, real and boolean. For example:
          <screen>
{
    "command": "remote-global-parameter4-set"
    "arguments": {
        "parameters": {
            "boot-file-name": "/dev/null",
            "renew-timer": 2000,
            "t1-percent": 0.85,
            "match-client-id": true
        },
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>An error is returned if any of the parameters is not supported by the
          DHCP server or its type does not match. Care should be taken when
          multiple parameters are specified in a single command because it is
          possible that only some of the parameters are stored successfully and
          some fail. If an error occurred when processing this command, it is
          recommended to use <command>remote-global-parameter[46]-get-all</command>
          to check which of the parameters have been stored/updated successfully
          and which failed.</para>
        </section>

        <section id="command-remote-network4-del">
          <title>remote-network4-del, remote-network6-del commands</title>
          <para id="command-remote-network6-del">These commands are used to delete an
          IPv4 or IPv6 shared network from the database. The optional parameter
          <command>subnets-action</command> determines whether the subnets belonging
          to the deleted shared network should also be deleted or preserved.
          The <command>subnets-action</command> defaults to <command>keep</command>,
          which preserves the subnets. If it is set to <command>delete</command>,
          the subnets are deleted along with the shared network.</para>

          <para>The following command:
          <screen>
{
    "command": "remote-network6-del",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3"
            }
        ],
        "subnets-action": "keep",
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
            deletes the "level3" IPv6 shared network. The subnets are preserved
            but they are disassociated from the deleted shared network and become
            global.
          </para>
        </section>

        <section id="command-remote-network4-get">
          <title>remote-network4-get, remote-network6-get commands</title>
          <para id="command-remote-network6-get">These commands are used to retrieve
          the information about an IPv4 or IPv6 shared network. The optional
          parameter <command>subnets-include</command> denotes whether the
          subnets belonging to the shared network should also be returned. This
          parameter defaults to <command>no</command> in which case the subnets are
          not returned. If this parameter is set to <command>full</command>,
          the subnets are returned together with the shared network.</para>

          <para>The following command fetches the "level3" IPv6 shared network along
          with the full information about the subnets belonging to it:
          <screen>
{
    "command": "remote-network6-get",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3"
            }
        ],
        "subnets-include": "full",
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-network4-list">
          <title>remote-network4-list, remote-network6-list commands</title>
          <para id="command-remote-network6-list">These commands are used to list all
          IPv4 or IPv6 shared networks in the particular database. The returned information
          about each shared network merely contains the shared network name and the metadata. In
          order to fetch the detailed information about the selected shared network,
          use the <command>remote-network[46]-get</command> command.
          </para>

          <para>The <command>remote-network[46]-list</command> takes no argument except
          the optional <command>remote</command> map.
          </para>
        </section>

        <section id="command-remote-network4-set">
          <title>remote-network4-set</title>
          <para id="command-remote-network6-set">These commands creates new or replaces an
          existing IPv4 or IPv6  shared network in the database. The structure of the
          shared network information is the same as in the Kea configuration file
          (see <xref linkend="shared-network4"/> and <xref linkend="shared-network6"/>
          for details), except that it is not allowed to specify subnets along with
          the shared network information. Including the <command>subnet4</command>
          or <command>subnet6</command> parameter within the shared network information
          will result in an error.</para>

          <para>These commands are intended to be used for managing the shared network
          specific information and DHCP options. In order to associate and disassociate
          the subnets with the shared networks the <command>remote-subnet[46]-set</command>
          commands should be used.
          </para>

          <para>
            The following command adds the IPv6 shared network "level3" to the database:
            <screen>
{
    "command": "remote-network6-set",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3",
                "interface": "eth0",
                "option-data": [ {
                    "name": "sntp-servers",
                    "data": "2001:db8:1::1"
                } ],
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
            </screen>
          </para>
          <para>
            This command includes the <command>interface</command> parameter which sets
            the shared network level interface name. Remaining shared network level
            parameters, which are not specified with the command, will be marked as
            "unspecified" in the database. The DHCP server will use the global values
            for unspecified parameters or, if the global values are not specified,
            the default values will be used.
          </para>

          <note>
            <para>
              Same as for other "set" commands, this command replaces the entire
              information about the given shared network in the database if the
              shared network already exists. Therefore, when sending this command,
              make sure to always include all parameters that must be specified for
              the updated shared network instance. Any unspecified parameter will
              be marked unspecified in the database, even if its value was present
              prior to sending the command.
            </para>
          </note>
        </section>

        <section id="command-remote-option-def4-del">
          <title>remote-option-def4-del, remote-option-def6-del commands</title>
          <para id="command-remote-option-def6-del">These commands are used to delete
          a DHCP option definition from the database. The option definition is
          identified by an option code and option space. For example:
          <screen>
{
    "command": "remote-option-def6-del",
    "arguments": {
        "option-defs": [
            {
                "code": 1,
                "space": "isc"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
             deletes the definition of the option having the code of 1 and
             belonging to the option space "isc". The default option spaces
             are "dhcp4" and "dhcp6" for the DHCPv4 and DHCPv6 top level options
             respectively.
          </para>
        </section>

        <section id="command-remote-option-def4-get">
          <title>remote-option-def4-get, remote-option-def6-get commands</title>
          <para id="command-remote-option-def6-get">These commands are used to
          fetch a specified DHCP option definition from the database. The option
          definition is identified by the option code and option space. The default
          option spaces are "dhcp4" and "dhcp6" for the DHCPv4 and DHCPv6 top level
          options respectively.</para>

          <para>The following command retrieves a DHCPv4 option definition
          having the code of 1 and belonging to option space "isc":
          <screen>
{
    "command": "remote-option-def4-get"
    "arguments": {
        "option-defs": [
            {
                "code": 1,
                "space": "isc"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-option-def4-get-all">
          <title>remote-option-def4-get-all, remote-option-def6-get-all commands</title>
          <para id="command-remote-option-def6-get-all">These commands are used to
          fetch all DHCP option definitions from the database. It takes no
          arguments except the optional <command>remote</command> map.</para>
        </section>

        <section id="command-remote-option-def4-set">
          <title>remote-option-def4-set, remote-option-def6-set commands</title>
          <para id="command-remote-option-def6-set">These commands create a new
          DHCP option definition or replace an existing option definition in the
          database. The structure of the option definition information is the
          same as in the Kea configuration file (see <xref linkend="dhcp4-custom-options"/>
          and <xref linkend="dhcp6-custom-options"/>).
          The following command creates the DHCPv4 option definition in the top
          level "dhcp4" option space:
          <screen>
{
    "command": "remote-option-def4-set",
    "arguments": {
        "option-defs": [
            {
                "name": "foo",
                "code": 222,
                "type": "uint32",
                "array": false,
                "record-types": "",
                "space": "dhcp4",
                "encapsulate": ""
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-option4-global-del">
          <title>remote-option4-global-del, remote-option6-global-del commands</title>
          <para id="command-remote-option6-global-del">These commands are used to delete
          a global DHCP option from the database. The option is identified by an option
          code and option space. For example:
          <screen>
{
    "command": "remote-option4-global-del",
    "arguments": {
        "options": [
            {
                "code": 5
                "space": "dhcp4"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>
            The "dhcp4" is the top level option space where the standard DHCPv4
            options belong.
          </para>
        </section>

        <section id="command-remote-option4-global-get">
          <title>remote-option4-global-get, remote-option6-global-get commands</title>
          <para id="command-remote-option6-global-get">These commands are used to fetch
          a global DHCP option from the database. The option is identified by the code
          and option space. The top level option spaces where DHCP standard options
          belong are called "dhcp4" and "dhcp6" for the DHCPv4 and DHCPv6 servers
          respectively.
          </para>
          <para>
            The following command retrieves the IPv6 "DNS Servers" (code 23) option:
{
    "command": remote-option6-global-get",
    "arguments": {
        "options": [
            {
                "code": 23,
                "space": "dhcp6"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </para>
        </section>

        <section id="command-remote-option4-global-get-all">
          <title>remote-option4-global-get-all, remote-option6-global-get-all commands</title>
          <para id="command-remote-option6-global-get-all">These commands are used to fetch
          all global DHCP options from the configuration database. It takes no arguments
          except the optional <command>remote</command> map.</para>
        </section>

        <section id="command-remote-option4-global-set">
          <title>remote-option4-global-set, remote-option6-global-set command</title>
          <para id="command-remote-option6-global-set">These commands create a new
          global DHCP option or replace an existing option in the database. The
          structure of the option information is the same as in the Kea configuration
          file (see <xref linkend="dhcp4-std-options"/> and
          see <xref linkend="dhcp4-std-options"/>). For example:
          <screen>
{
    "command": "remote-option6-global-set",
    "arguments": {
        "options": [
            {
                "name": "dns-servers",
                "data": "2001:db8:1::1"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>
            Note that specifying an option name instead of the option code only works
            reliably for the standard DHCP options. When specifying a value for the
            user defined DHCP option, the option code should be specified instead of
            the name. For example:
            <screen>
{
    "command": "remote-option6-global-set",
    "arguments": {
        "options": [
            {
                "code": 1,
                "space": "isc",
                "data": "2001:db8:1::1"
            }
        ]
    }
}
            </screen>
          </para>
        </section>

        <section id="command-remote-subnet4-del-by-id">
          <title>remote-subnet4-del-by-id, remote-subnet6-del-by-id command</title>
          <para id="command-remote-subnet6-del-by-id">This is the first variant of
          the commands used to delete an IPv4 or IPv6 subnet from the database.
          It uses subnet ID to identify the subnet. For example, in order to
          delete the IPv4 subnet with ID of 5:
          <screen>
{
    "command": "remote-subnet4-del-by-id",
    "arguments": {
        "subnets": [
            {
                "id": 5
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-subnet4-del-by-prefix">
          <title>remote-subnet4-del-by-prefix, remote-subnet6-del-by-prefix commands</title>
          <para id="command-remote-subnet6-del-by-prefix">This is the second variant
          of the commands used to delete an IPv4 or IPv6 subnet from the database.
          It uses the subnet prefix to identify the subnet. For example:
          <screen>
{
    "command": "remote-subnet6-del-by-prefix",
    "arguments": {
        "subnets": [
            {
                "subnet": "2001:db8:1::/64"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-subnet4-get-by-id">
          <title>remote-subnet4-get-by-id, remote-subnet6-get-by-id commands</title>
          <para id="command-remote-subnet6-get-by-id">This is the first variant of
          the commands used to fetch an IPv4 or IPv6  subnet from the database. It
          uses a subnet ID to identify the subnet. For example:
          <screen>
{
    "command": "remote-subnet4-get-by-id",
    "arguments": {
        "subnets": [
            {
                "id": 5
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-subnet4-get-by-prefix">
          <title>remote-subnet4-get-by-prefix, remote-subnet6-get-by-prefix command</title>
          <para id="command-remote-subnet6-get-by-prefix">This is the second variant
          of the commands used to fetch an IPv4 or IPv6 subnet from the database. It
          uses a subnet prefix to identify the subnet. For example:
          <screen>
{
    "command": "remote-subnet6-get-by-prefix",
    "arguments": {
        "subnets": [
            {
                "subnet": "2001:db8:1::/64"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-subnet4-list">
          <title>remote-subnet4-list, remote-subnet6-list commands</title>
          <para id="command-remote-subnet6-list">These commands are used to list
          all IPv4 or IPv6 subnets from the database. It takes no parameters
          except the optional <command>remote</command> map.
          The returned information about each subnet is limited to subnet identifier,
          prefix and associated shared network name. In order to retrieve full
          information about the selected subnet use the
          <command>remote-subnet[46]-get-by-id</command> or
          <command>remote-subnet[46]-get-by-prefix</command>.
          </para>
        </section>

        <section id="command-remote-subnet4-set">
          <title>remote-subnet4-set, remote-subnet6-set commands</title>
          <para id="command-remote-subnet6-set">These commands are used to create
          a new IPv4 or IPv6 subnet or replace an existing subnet in the database.
          Setting the subnet also associates or disassociates the subnet with a
          shared network.</para>

          <para>The structure of the subnet information is similar to the structure
          used in the configuration file (see <xref linkend="dhcp4-configuration"/>
          and <xref linkend="dhcp6-configuration"/>). The subnet information
          conveyed in the <command>remote-subnet[46]-set</command> must include
          additional parameter <command>shared-network-name</command> which denotes
          whether the subnet belongs to a shared network or not.
          </para>

          <para>Consider the following example:
          <screen>
{
    "command": "remote-subnet4-set",
    "arguments": {
        "subnets": [
            {
                "id": 5,
                "subnet": "192.0.2.0/24",
                "shared-network-name": "level3",
                "pools": [ { "pool": "192.0.2.100-192.0.2.200" } ],
                "option-data": [ {
                    "name": "routers",
                    "data": "192.0.2.1"
                } ]
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>

          <para>It creates the subnet and associates the subnet with the "level3"
          shared network. The "level3" must be created with the
          <command>remote-network4-set</command> prior to creating the subnet.
          </para>

          <para>If the created subnet must be global (not associated with any
          shared network), the <command>shared-network-name</command> must be
          explicitly set to <command>null</command>:
          <screen>
{
    "command": "remote-subnet4-set",
    "arguments": {
        "subnets": [
            {
                "id": 5,
                "subnet": "192.0.2.0/24",
                "shared-network-name": null,
                "pools": [ { "pool": "192.0.2.100-192.0.2.200" } ],
                "option-data": [ {
                    "name": "routers",
                    "data": "192.0.2.1"
                } ]
           }
        ]
    }
}
          </screen>
          </para>

          <para>The subnet created in the previous example is replaced with the
          new subnet having the same parameters but it becomes global.</para>

          <para>The <command>shared-network-name</command> parameter is mandatory
          for the <command>remote-subnet4-set</command> command.</para>

          <note>
            <para>
              Same as for other "set" commands, this command replaces the entire
              information about the particular subnet in the database, if the subnet
              information is already present. Therefore, when sending this command,
              make sure to always include all parameters that must be specified for
              the updated subnet instance. Any unspecified parameter will be marked
              as unspecified in the database, even if its value was present prior to
              sending the command.
            </para>
          </note>
        </section>

      </section>

    </section>

<!--
 - Copyright (C) 2019 Internet Systems Consortium, Inc. ("ISC")
 -
 - This Source Code Form is subject to the terms of the Mozilla Public
 - License, v. 2.0. If a copy of the MPL was not distributed with this
 - file, you can obtain one at http://mozilla.org/MPL/2.0/.
-->

    <section id="cb-cmds-library">
      <title>cb_cmds: Configuration Backend Commands</title>
      <para>
        This section describes the <command>cb_cmds</command> hooks library
        which is used to manage Kea servers' configurations in the Configuration
        Backends. This library must be used in conjuction with the available CB
        hooks libraries  implementing the common APIs to create, read, update
        and delete (CRUD) the configuration information in the respective
        databases. For example: the <command>mysql_cb</command> hooks library,
        released in Kea 1.6.0, implements this API for MySQL. In order to manage
        the configuration information in the MySQL database both
        <command>mysql_cb</command> and <command>cb_cmds</command> libraries
        must be loaded by the server used for the configuration management.
      </para>

      <para>The <command>cb_cmds</command> library is only available to ISC
      customers with a support contract.

      <note>
        <para>This library may only be loaded by the <command>kea-dhcp4</command>
        or the <command>kea-dhcp6</command> process.
        </para>
      </note>
      </para>

      <section>
        <title>Commands Structure</title>
        <para>There are 5 types of commands supported by this library:</para>
        <itemizedlist>
          <listitem><simpara><command>del</command> - delete selected object from the
          database, e.g. <command>remote-global-parameter4-del</command>
          </simpara></listitem>
          <listitem><simpara><command>get</command> - fetch selected object from the
          database, e.g. <command>remote-subnet4-get</command>,</simpara></listitem>
          <listitem><simpara><command>get-all</command> - fetch all objects of the
          particular type from the database, e.g.
          <command>remote-option-def4-get-all</command>,</simpara></listitem>
          <listitem><simpara><command>list</command> - list all objects of the particular
          type in the database, e.g. <command>remote-network4-list</command>; this class
          of commands returns brief information about each object comparing to the output
          of <command>get-all</command>,</simpara>
          </listitem>
          <listitem><simpara><command>set</command> - creates or replaces an object
          of the given type in the database, e.g. <command>remote-option4-global-set</command>
          .</simpara></listitem>
        </itemizedlist>

        <para>All types of commands accept optional <command>remote</command> map which
        selects the database instance to which the command refers. For example:
<screen>
{
    "command": "remote-subnet4-list",
    "arguments": {
        "remote": {
            "type": "mysql",
            "host": "192.0.2.33",
            "port": 3302
        }
    }
}
</screen>
        </para>
        <para>
          selects the MySQL database, running on host 192.0.2.33 and port 3302, to
          fetch the list of subnets from. All parameters in the
          <command>remote</command> are optional. The <command>port</command>
          parameter can be only specified in conjuction with the
          <command>host</command>. If no parameters in the <command>remote</command>
          parameter are to be specified, the parameter should be omitted. In this
          case, the server will use the first backend listed in the
          <command>config-control</command> map within the configuration of the
          server receiving the command.
        </para>

        <note>
          <para>
            In the Kea 1.6.0 release, it is possible to configure the Kea server to
            use only one configuration backend. Strictly speaking, it is possible
            to point Kea server to at most one MySQL database using the
            <command>config-control</command> parameter. That's why, in this
            release, the <command>remote</command> parameter may be omitted in
            the commands because the cb_cmds hooks library will use by default
            the sole backend.
          </para>
        </note>
      </section>

      <section id="cb-cmds-dhcp">
        <title>Control Commands for DHCP Servers</title>
        <para>This section describes and gives some examples of the control
        commands implemented by the <command>cb_cmds</command> hooks library, to manage
        the configuration information of the DHCPv4 and DHCPv6 servers. Many of the
        commands are almost identical between DHCPv4 and DHCPv6, i.e. only differ by the
        command name. Other commands slightly differ by the structure of the inserted
        data, e.g. the structure of the IPv4 subnet information is different than the
        structure of the IPv6 subnet. Nevertheless, they still share the structure of
        the command arguments and thus it makes sense to describe them together.</para>

        <para>In the following sections, various commands are described and the
        usage examples are provided. In the sections jointly describing the DHCPv4 and
        DHCPv6 variants of the particular command we sometimes use the following
        notation - the <command>remote-subnet[46]-set</command> is the wildcard
        name for the two commands: <command>remote-subnet4-set</command> and
        <command>remote-subnet6-set</command>.</para>

        <para>In addition, whenever the text in the subsequent sections refers to a
        DHCP command or DHCP parameter, it refers to both DHCPv4 and DHCPv6
        variants. The text specific to the particular server type refers to them as:
        DHCPv4 command, DHCPv4 parameter, DHCPv6 command, DHCPv6 parameter etc.
        </para>

        <section id="cb-cmds-metadata">
          <title>Metadata</title>
          <para>The typical response to the <command>get</command> or <command>list</command>
          command includes a list of returned objects (e.g. subnets) and each such
          object contains the <command>metadata</command> map with some database specific
          information describing this object. In other words, the metadata contains any
          information about the fetched object which may be useful for the administrator,
          but is not the part of the object specification from the DHCP server standpoint.
          In the Kea 1.6.0 release, the metadata is limited to the
          <command>server-tags</command>, which describes the associations of the object
          with the selected servers or all servers.
          </para>

          <para>The following is the example response to the <command>remote-network4-list</command>
          command, which includes the metadata:
          <screen>
{
    "result": 0,
    "text": "1 IPv4 shared network(s) found.",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3",
                "metadata": {
                    "server-tags": [ "all" ]
                }
            }
        ],
        "count": 1
    }
}
         </screen>
         </para>

          <para>Client implementations must not assume that the metadata contains
          only the <command>server-tags</command> parameter. In the future releases
          this map will be extended with additional information, e.g. object
          modification time, log message created during the last modification etc.
          </para>
        </section>

        <section id="command-remote-server4-del">
          <title>remote-server4-del, remote-server6-del commands</title>
          <para id="command-remote-server6-del">This command is used to delete the
          information about a selected DHCP server from the configuration database.
          The server is identified by a unique case insensitive server tag.
          For example:
<screen>
{
    "command": "remote-server4-del",
    "arguments": {
        "servers": [
            {
                "server-tag": "server1"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
</screen>
          </para>
          <para>As a result of this command, the user defined server called
          <command>server1</command> is removed from the database. All associations
          of the configuration information with this server are automatically
          removed from the database. The non-shareable configuration information,
          such as: global parameters, option definitions and global options
          associated with the server are removed from the database. The shareable
          configuration information, i.e. the configuration elements which may be
          associated with more than one server, is preserved. In particular,
          the subnets and shared networks associated with the deleted servers are
          preserved. If any of the shareable configuration elements was associated
          only with the deleted server, this object becomes unassigned (orphaned).
          For example: if a subnet has been created and associated with the
          <command>server1</command> using the <command>remote-subnet4-set</command>
          command and the server1 is subsequently deleted, the subnet remains in the
          database but none of the servers can use this subnet. The subnet can
          be updated using the <command>remote-subnet4-set</command> and
          associated with some other server or with all servers using the special
          server tag "all". Such subnet can be also deleted from the database
          using the <command>remote-subnet4-del-by-id</command> or
          <command>remote-subnet4-del-by-prefix</command>, if it is no longer
          needed.
          </para>

          <para>The following is the successful response to the
          <command>remote-server4-del</command> command:
<screen>
{
    "result": 0,
    "text": "1 DHCPv4 server(s) deleted."
    "arguments": {
        "count": 1
    }
}
</screen>
          </para>
          <note>
            <simpara>The <command>remote-server4-del</command> and
            <command>remote-server6-del</command> commands must be used with care,
            because an accidental deletion of the server causes some parts of the existing
            configurations to be lost permanently from the database. This operation
            is not reversible. Re-creation of the accidentally deleted server does not
            revert the lost configuration for that server and such configuration
            must be re-created manually by the user.
            </simpara>
          </note>
        </section>

        <section id="command-remote-server4-get">
          <title>remote-server4-get, remote-server6-get commands</title>
          <para id="command-remote-server6-get">This command is used to fetch the
          information about the selected DHCP server from the configuration database.
          For example:
<screen>
{
    "command": "remote-server6-get"
    "arguments": {
        "servers": [
            {
                "server-tag": "server1"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
</screen>
          </para>

          <para>This command fetches the information about the DHCPv6 server identified
          by the server tag <command>server1</command>. The server tag is case insensitive.
          A successful response returns  basic information about the server, such as
          server tag and the user's description of the server:
<screen>
{
    "result": 0,
    "text": "DHCP server server1 found.",
    "arguments": {
        "servers": [
            {
                "server-tag": "server1",
                "description": "A DHCPv6 server located on the first floor."
            }
        ],
        "count": 1
    }
}
</screen>
          </para>
        </section>

        <section id="command-remote-server4-get-all">
          <title>remote-server4-get-all, remote-server6-get-all commands</title>
          <para id="command-remote-server6-get-all">This command is used to fetch all user
          defined DHCPv4 or DHCPv6 servers from the database. The command structure
          is very simple:
<screen>
{
    "command": "remote-server4-get-all"
    "arguments": {
        "remote": {
            "type": "mysql"
        }
    }
}
</screen>
          </para>
          <para>The response includes basic information about each server, such as
          its server tag and description:
<screen>
{
    "result": 0,
    "text": "DHCPv4 servers found.",
    "arguments": {
        "servers": [
            {
                "server-tag": "server1",
                "description": "A DHCP server located on the first floor."
            },
            {
                "server-tag": "server2",
                "description": "An old DHCP server to be soon replaced."
            }
        ],
        "count": 2
    }
}
</screen>
          </para>
        </section>

        <section id="command-remote-server4-set">
          <title>remote-server4-set, remote-server6-set commands</title>
          <para id="command-remote-server6-set">This command is used to create or replace
          an information about a DHCP server in the database. The information about the
          server must be created when there is a need to differentiate the configurations
          used by various Kea instances connecting to the same database. Various
          configuration elements, e.g. global parameters, subnets etc. may be explicitly
          associated with the selected servers (using server tags as identifiers),
          allowing only these servers to use the respective configuration elements.
          Using the particular server tag to make such associations is only possible when
          the server information has been stored in the database via the
          <command>remote-server4-set</command> or
          <command>remote-server6-set</command> commands. The following command creates
          a new (or updates an existing) DHCPv6 server in the database:
<screen>
{
    "command": "remote-server6-set"
    "arguments": {
        "servers": [
            {
                "server-tag": "server1",
                "description": "A DHCP server on the ground floor."
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
</screen>
          </para>
          <para>The server tag must be unique accross all servers in the database. When
          the server information under the given server tag already exists, it is replaced
          with the new information. The specified server tag is case insensitive. The
          maximum length of the server tag is 256 characters. The following keywords are
          reserved and must not be used as server tags: "all" and "any".</para>

          <para>The following is the example response to the above command:
<screen>
{
    "result": 0,
    "text": "DHCPv6 server successfully set.",
    "arguments": {
        "servers": [
            {
                "server-tag": "server1",
                "description": "A DHCP server on the ground floor."
            }
        ]
    }
}
</screen>
          </para>
        </section>

        <section id="command-remote-global-parameter4-del">
          <title>remote-global-parameter4-del, remote-global-parameter6-del commands</title>
          <para id="command-remote-global-parameter6-del">This command is used to
          delete a global DHCP parameter from the configuration database. When the
          parameter is deleted from the database the server will use the value
          specified in the configuration file for this parameter or a default
          value if the parameter is not specified in the configuration file.</para>
          <para>The following command attempts to delete the DHCPv4
          <command>renew-timer</command> parameter common for all servers from
          the database:
          <screen>
{
    "command": "remote-global-parameter4-del",
    "arguments": {
        "parameters": [ "renew-timer" ],
        "remote": {
            "type": "mysql"
         },
         "server-tags": [ "all" ]
    }
}
          </screen>
          </para>

          <para>
            If the server specific parameter is to be deleted, the <command>server-tags</command>
            list must contain the tag of the appropriate server. There must be exactly one
            server tag specified in this list.
          </para>
        </section>

        <section id="command-remote-global-parameter4-get">
          <title>remote-global-parameter4-get, remote-global-parameter6-get commands</title>
          <para id="command-remote-global-parameter6-get">These commands are used to
          fetch a scalar global DHCP parameter from the configuration database.</para>
          <para>The following command attempts to fetch the
          <command>boot-file-name</command> parameter for the "server1":
          <screen>
{
    "command": "remote-global-parameter4-get",
    "arguments": {
        "parameters": [ "boot-file-name" ],
         "remote": {
             "type": "mysql"
         },
         "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>
          <para>
            The returned value has one of the four scalar types: string, integer, real
            or boolean. Non scalar global configuration parameters, such as map or list,
            are not returned by this command.</para>

            <para>In case of the example above the string value is returned, e.g.:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "boot-file-name": "/dev/null",
            "metadata": {
                "server-tags": [ "all" ]
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            Note that the response above indicates that the returned parameter is associated
            with "all" servers rather than "server1" used in the command. This indicates
            that there is no server1 specific value in the database. Therefore, the value
            shared by all servers is returned. If there was the server1 specific value
            in the database this value would be returned instead.
          </para>

          <para>
            The example response for the integer value is:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "renew-timer": 2000,
            "metadata": {
                "server-tags": [ "server1" ]
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            The real value:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "t1-percent": 0.85,
            "metadata": {
                "server-tags": [ "all" ]
            }
        },
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            Finally, the boolean value:
            <screen>
{
    "result": 0,
    "text": "1 DHCPv4 global parameter found.",
    "arguments": {
        "parameters": {
            "match-client-id": true,
            "metadata": {
                "server-tags": [ "server2" ]
            }
        },
        "count": 1
    }
}
            </screen>
          </para>
        </section>

        <section id="command-remote-global-parameter4-get-all">
          <title>remote-global-parameter4-get-all, remote-global-parameter6-get-all commands</title>
          <para id="command-remote-global-parameter6-get-all">These commands are used to
          fetch all global DHCP parameters from the database for the specified server.
          The following example demonstrates how to fetch all global parameters to be
          used by the server "server1":
<screen>
{
    "command": "remote-global-parameter4-get-all",
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
</screen>
          </para>

          <para>
            The example response may look as follows:
<screen>
{
    "result": 0,
    "text": "DHCPv4 global parameters found.",
    "arguments": {
        "parameters": [
            {
                "boot-file-name": "/dev/null",
                "metadata": {
                    "server-tags": [ "server1" ]
                }
            },
            {
                "match-client-id": true,
                "metadata": {
                    "server-tags": [ "all" ]
                }
            }
        ],
        "count": 2
    }
}
</screen>
          </para>

          <para>
            The example response contains two parameters, one string parameter and one
            boolean parameter. The metadata returned for each parameter indicates
            if this parameter is specific to the "server1" or all servers. Since the
            <command>match-client-id</command> value is associated with "all" servers
            it indicates that there is no server1 specific setting for this parameter.
            Each parameter always has exactly one server tag associated with it, because
            the global parameters are non-shareable configuration elements.
          </para>

          <note>
            <simpara>
              If the server tag is set to "all" in the command, the response will
              contain only the global parameters associated with the logical server
              "all". When the server tag points to the specific server (as in the
              example above), the returned list combines parameters associated with
              this server and all servers, but the former take precedence.
            </simpara>
          </note>
        </section>

        <section id="command-remote-global-parameter4-set">
          <title>remote-global-parameter4-set</title>
          <para id="command-remote-global-parameter6-set">This command is used to
          create scalar global DHCP parameters in the database. If any of the parameters
          already exists, its value is replaced as a result of this command. It is
          possible to set multiple parameters within a single command, each having
          one of the four types: a string, integer, real or boolean. For example:
          <screen>
{
    "command": "remote-global-parameter4-set"
    "arguments": {
        "parameters": {
            "boot-file-name": "/dev/null",
            "renew-timer": 2000,
            "t1-percent": 0.85,
            "match-client-id": true
        },
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>
          <para>An error is returned if any of the parameters is not supported by the
          DHCP server or its type does not match. Care should be taken when
          multiple parameters are specified in a single command because it is
          possible that only some of the parameters are stored successfully and
          some fail. If an error occurred when processing this command, it is
          recommended to use <command>remote-global-parameter[46]-get-all</command>
          to check which of the parameters have been stored/updated successfully
          and which failed.</para>

          <para>The <command>server-tags</command> list is mandatory and it must
          contain a single server tag or the keyword "all". In the example above,
          all specified parameters are associated with the "server1" server.
          </para>
        </section>

        <section id="command-remote-network4-del">
          <title>remote-network4-del, remote-network6-del commands</title>
          <para id="command-remote-network6-del">These commands are used to delete an
          IPv4 or IPv6 shared network from the database. The optional parameter
          <command>subnets-action</command> determines whether the subnets belonging
          to the deleted shared network should also be deleted or preserved.
          The <command>subnets-action</command> defaults to <command>keep</command>,
          which preserves the subnets. If it is set to <command>delete</command>,
          the subnets are deleted along with the shared network.</para>

          <para>The following command:
          <screen>
{
    "command": "remote-network6-del",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3"
            }
        ],
        "subnets-action": "keep",
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
            deletes the "level3" IPv6 shared network. The subnets are preserved
            but they are disassociated from the deleted shared network and become
            global. This behavior corresponds to the behavior of the
            <command>network[46]-del</command> commands with respect to the
            <command>subnets-action</command>.
          </para>

          <para>
            Note that the <command>server-tags</command> parameter must not be used
            for this command.
          </para>
        </section>

        <section id="command-remote-network4-get">
          <title>remote-network4-get, remote-network6-get commands</title>
          <para id="command-remote-network6-get">These commands are used to retrieve
          the information about an IPv4 or IPv6 shared network. The optional
          parameter <command>subnets-include</command> denotes whether the
          subnets belonging to the shared network should also be returned. This
          parameter defaults to <command>no</command> in which case the subnets are
          not returned. If this parameter is set to <command>full</command>,
          the subnets are returned together with the shared network.</para>

          <para>The following command fetches the "level3" IPv6 shared network along
          with the full information about the subnets belonging to it:
          <screen>
{
    "command": "remote-network6-get",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3"
            }
        ],
        "subnets-include": "full",
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>

          <para>
            Note that the <command>server-tags</command> parameter must not be used
            for this command.
          </para>
        </section>

        <section id="command-remote-network4-list">
          <title>remote-network4-list, remote-network6-list commands</title>
          <para id="command-remote-network6-list">These commands are used to list all
          IPv4 or IPv6 shared networks for a server.
          </para>

          <para>The following command retrieves all shared networks to be used by the
          "server1" and "server2":
          <screen>
{
    "command": "remote-network4-list"
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1", "server2" ]
    }
}
          </screen>
          </para>

          <para>The <command>server-tags</command> parameter is mandatory and it contains
          one or more server tags. It may contain the keyword "all" to fetch the shared
          networks associated with all servers. When the <command>server-tags</command>
          list contains the <command>null</command> value the returned response contains
          a list of unassigned shared networks, i.e. the networks which are associated
          with no servers. For example:

          <screen>
{
    "command": "remote-network4-list"
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ null ]
    }
}
          </screen>
          </para>

          <para>
            The example response to this command when non-null server tags are specified
            looks similar to this:
            <screen>
{
    "result": 0,
    "text": "3 IPv4 shared network(s) found.",
    "arguments": {
        "shared-networks": [
            {
                "name": "ground floor",
                "metadata": {
                    "server-tags": [ "all" ]
                }
            },
            {
                "name": "floor2",
                "metadata": {
                    "server-tags": [ "server1" ]
                }
            },
            {
                "name": "floor3",
                "metadata": {
                    "server-tags": [ "server2" ]
                }
            }
        ],
        "count": 3
    }
}
            </screen>
          </para>

          <para>
            The returned information about each shared network merely contains the
            shared network name and the metadata. In order to fetch the detailed
            information about the selected shared network, use the
            <command>remote-network[46]-get</command> command.
          </para>

          <para>
            The example response above contains three shared networks. One of the
            shared networks is associated will all servers, so it is included in
            the list of shared networks to be used by the "server1" and "server2".
            The remaining two shared networks are returned because one of them
            is associated with the "server1" and another one is associated with
            the "server2".
          </para>

          <para>
            When listing unassigned shared networks, the response will look similar
            to this:
            <screen>
{
    "result": 0,
    "text": "1 IPv4 shared network(s) found.",
    "arguments": {
        "shared-networks": [
            {
                "name": "fancy",
                "metadata": {
                    "server-tags": [ null ]
                }
            }
        ],
        "count": 1
    }
}
            </screen>
          </para>

          <para>
            The <command>null</command> value in the metadata indicates that the
            returned shared network is unassigned.
          </para>

        </section>

        <section id="command-remote-network4-set">
          <title>remote-network4-set</title>
          <para id="command-remote-network6-set">These commands creates new or replaces an
          existing IPv4 or IPv6  shared network in the database. The structure of the
          shared network information is the same as in the Kea configuration file
          (see <xref linkend="shared-network4"/> and <xref linkend="shared-network6"/>
          for details), except that it is not allowed to specify subnets along with
          the shared network information. Including the <command>subnet4</command>
          or <command>subnet6</command> parameter within the shared network information
          will result in an error.</para>

          <para>These commands are intended to be used for managing the shared network
          specific information and DHCP options. In order to associate and disassociate
          the subnets with the shared networks the <command>remote-subnet[46]-set</command>
          commands should be used.
          </para>

          <para>
            The following command adds the IPv6 shared network "level3" to the database:
            <screen>
{
    "command": "remote-network6-set",
    "arguments": {
        "shared-networks": [
            {
                "name": "level3",
                "interface": "eth0",
                "option-data": [ {
                    "name": "sntp-servers",
                    "data": "2001:db8:1::1"
                } ],
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "all" ]
    }
}
            </screen>
          </para>
          <para>
            This command includes the <command>interface</command> parameter which sets
            the shared network level interface name. Remaining shared network level
            parameters, which are not specified with the command, will be marked as
            "unspecified" in the database. The DHCP server will use the global values
            for unspecified parameters or, if the global values are not specified,
            the default values will be used.
          </para>

          <para>
            The <command>server-tags</command> list is mandatory for this command
            and it must include one or more server tags. As a result the shared network
            is associated with all listed servers. The shared network may be associated
            with all servers connecting to the database when the keyword "all" is included.
          </para>

          <note>
            <para>
              Same as for other "set" commands, this command replaces the entire
              information about the given shared network in the database if the
              shared network already exists. Therefore, when sending this command,
              make sure to always include all parameters that must be specified for
              the updated shared network instance. Any unspecified parameter will
              be marked unspecified in the database, even if its value was present
              prior to sending the command.
            </para>
          </note>
        </section>

        <section id="command-remote-option-def4-del">
          <title>remote-option-def4-del, remote-option-def6-del commands</title>
          <para id="command-remote-option-def6-del">These commands are used to delete
          a DHCP option definition from the database. The option definition is
          identified by an option code and option space. For example:
          <screen>
{
    "command": "remote-option-def6-del",
    "arguments": {
        "option-defs": [
            {
                "code": 1,
                "space": "isc"
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
          </screen>
             deletes the definition of the option associated with the "server1",
             having the code of 1 and belonging to the option space "isc". The
             default option spaces are "dhcp4" and "dhcp6" for the DHCPv4 and
             DHCPv6 top level options respectively. If there is no such option
             explicitly associated with the server1, no option is deleted. In
             order to delete an option belonging to "all" servers, the keyword
             "all" must be used as server tag. The <command>server-tags</command>
             list must contain exactly one tag. It must not include the
             <command>null</command> value.
          </para>
        </section>

        <section id="command-remote-option-def4-get">
          <title>remote-option-def4-get, remote-option-def6-get commands</title>
          <para id="command-remote-option-def6-get">These commands are used to
          fetch a specified DHCP option definition from the database. The option
          definition is identified by the option code and option space. The default
          option spaces are "dhcp4" and "dhcp6" for the DHCPv4 and DHCPv6 top level
          options respectively.</para>

          <para>The following command retrieves a DHCPv4 option definition
          associated with all servers, having the code of 1 and belonging to
          the option space "isc":
          <screen>
{
    "command": "remote-option-def4-get"
    "arguments": {
        "option-defs": [
            {
                "code": 1,
                "space": "isc"
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "all" ]
    }
}
          </screen>
          </para>

          <para>The <command>server-tags</command> list must include exactly
          one server tag or the keyword "all". It must not contain the
          <command>null</command> value.
          </para>
        </section>

        <section id="command-remote-option-def4-get-all">
          <title>remote-option-def4-get-all, remote-option-def6-get-all commands</title>
          <para id="command-remote-option-def6-get-all">These commands are used to
          fetch all DHCP option definitions from the database for the particular
          server or all servers. For example:
          <screen>
{
    "command": "remote-option-def6-get-all"
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "all" ]
    }
}
          </screen>
          </para>
          <para>This command attempts to fetch all DHCPv6 option definitions associated
          with "all" servers. The <command>server-tags</command> list is mandatory for
          this command and it must include exactly one server tag or the keyword "all".
          It must not include the <command>null</command> value.</para>

          <para>The following is the example response to this command:
          <screen>
{
    "result": 0,
    "text": "1 DHCPv6 option definition(s) found.",
    "arguments": {
        "option-defs": [
            {
                "name": "bar",
                "code": 1012,
                "space": "dhcp6",
                "type": "record",
                "array": true,
                "record-types": "ipv6-address, uint16",
                "encapsulate": "",
                "metadata": {
                    "server-tags": [ "all" ]
                }
            }
        ],
        "count": 1
    }
}
          </screen>
          </para>
          <para>The response contains an option definition associated with all servers
          as indicated by the metadata.
          </para>
        </section>

        <section id="command-remote-option-def4-set">
          <title>remote-option-def4-set, remote-option-def6-set commands</title>
          <para id="command-remote-option-def6-set">These commands create a new
          DHCP option definition or replace an existing option definition in the
          database. The structure of the option definition information is the
          same as in the Kea configuration file (see <xref linkend="dhcp4-custom-options"/>
          and <xref linkend="dhcp6-custom-options"/>).
          The following command creates the DHCPv4 option definition in the top
          level "dhcp4" option space and associates it with the "server1":
          <screen>
{
    "command": "remote-option-def4-set",
    "arguments": {
        "option-defs": [
            {
                "name": "foo",
                "code": 222,
                "type": "uint32",
                "array": false,
                "record-types": "",
                "space": "dhcp4",
                "encapsulate": ""
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>

          <para>The <command>server-tags</command> list must include exactly one
          server tag or the keyword "all". It must not contain the
          <command>null</command> value.</para>
        </section>

        <section id="command-remote-option4-global-del">
          <title>remote-option4-global-del, remote-option6-global-del commands</title>
          <para id="command-remote-option6-global-del">These commands are used to delete
          a global DHCP option from the database. The option is identified by an option
          code and option space. For example:
          <screen>
{
    "command": "remote-option4-global-del",
    "arguments": {
        "options": [
            {
                "code": 5
                "space": "dhcp4"
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>
          <para>
            The "dhcp4" is the top level option space where the standard DHCPv4
            options belong. The <command>server-tags</command> is mandatory and
            it must include a single option tag or the keyword "all". If the
            explicit server tag is specified then this command attempts to delete
            a global option associated with this server. If there is no such option
            associated with the given server, no option is deleted. In order to
            delete the option associated with all servers, the keyword "all"
            must be specified.
          </para>
        </section>

        <section id="command-remote-option4-global-get">
          <title>remote-option4-global-get, remote-option6-global-get commands</title>
          <para id="command-remote-option6-global-get">These commands are used to fetch
          a global DHCP option from the database. The option is identified by the code
          and option space. The top level option spaces where DHCP standard options
          belong are called "dhcp4" and "dhcp6" for the DHCPv4 and DHCPv6 servers
          respectively.
          </para>
          <para>
            The following command retrieves the IPv6 "DNS Servers" (code 23) option
            associated with all servers:
            <screen>
{
    "command": remote-option6-global-get",
    "arguments": {
        "options": [
            {
                "code": 23,
                "space": "dhcp6"
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "all" ]
    }
}
            </screen>
          </para>
          <para>
            The <command>server-tags</command> is mandatory and it must include
            exactly one server tag or the keyword "all". It must not contain the
            <command>null</command> value.
          </para>
        </section>

        <section id="command-remote-option4-global-get-all">
          <title>remote-option4-global-get-all, remote-option6-global-get-all commands</title>
          <para id="command-remote-option6-global-get-all">These commands are used to fetch
          all global DHCP options from the configuration database for the particular server
          or for all servers. The following command fetches all global DHCPv4 options for
          the "server1":
          <screen>
{
    "command": "remote-option6-global-get-all",
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> list is mandatory for this command and
          it must contain exactly one server tag or a keyword "all". It must not contain
          the <command>null</command> value. The following is the example response to this
          command with a single option being associated with the "server1" returned:
          <screen>
{
    "result": 0,
    "text": "DHCPv4 options found.",
    "arguments": {
        "options": [
            {
                "name": "domain-name-servers",
                "code": 6,
                "space": "dhcp4",
                "csv-format": false,
                "data": "192.0.2.3",
                "metadata": {
                    "server-tags": [ "server1" ]
                }
            }
        ],
        "count": 1
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-option4-global-set">
          <title>remote-option4-global-set, remote-option6-global-set command</title>
          <para id="command-remote-option6-global-set">These commands create a new
          global DHCP option or replace an existing option in the database. The
          structure of the option information is the same as in the Kea configuration
          file (see <xref linkend="dhcp4-std-options"/> and
          see <xref linkend="dhcp4-std-options"/>). For example:
          <screen>
{
    "command": "remote-option6-global-set",
    "arguments": {
        "options": [
            {
                "name": "dns-servers",
                "data": "2001:db8:1::1"
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> list is mandatory for this command
          and it must include exactly one server tag or the keyword "all". It must
          not include the <command>null</command> value. The command above associates
          the option with the "server1" server.
          </para>
          <para>Note that specifying an option name instead of the option code only works
          reliably for the standard DHCP options. When specifying a value for the
          user defined DHCP option, the option code should be specified instead of
          the name. For example:
          <screen>
{
    "command": "remote-option6-global-set",
    "arguments": {
        "options": [
            {
                "code": 1,
                "space": "isc",
                "data": "2001:db8:1::1"
            }
        ],
        "server-tags": [ "server1" ]
    }
}
          </screen>
          </para>
        </section>

        <section id="command-remote-subnet4-del-by-id">
          <title>remote-subnet4-del-by-id, remote-subnet6-del-by-id command</title>
          <para id="command-remote-subnet6-del-by-id">This is the first variant of
          the commands used to delete an IPv4 or IPv6 subnet from the database.
          It uses subnet ID to identify the subnet. For example, in order to
          delete the IPv4 subnet with ID of 5:
          <screen>
{
    "command": "remote-subnet4-del-by-id",
    "arguments": {
        "subnets": [
            {
                "id": 5
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> parameter must not be used
          with this command.
          </para>
        </section>

        <section id="command-remote-subnet4-del-by-prefix">
          <title>remote-subnet4-del-by-prefix, remote-subnet6-del-by-prefix commands</title>
          <para id="command-remote-subnet6-del-by-prefix">This is the second variant
          of the commands used to delete an IPv4 or IPv6 subnet from the database.
          It uses the subnet prefix to identify the subnet. For example:
          <screen>
{
    "command": "remote-subnet6-del-by-prefix",
    "arguments": {
        "subnets": [
            {
                "subnet": "2001:db8:1::/64"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> parameter must not be used with
          this command.</para>
        </section>

        <section id="command-remote-subnet4-get-by-id">
          <title>remote-subnet4-get-by-id, remote-subnet6-get-by-id commands</title>
          <para id="command-remote-subnet6-get-by-id">This is the first variant of
          the commands used to fetch an IPv4 or IPv6  subnet from the database. It
          uses a subnet ID to identify the subnet. For example:
          <screen>
{
    "command": "remote-subnet4-get-by-id",
    "arguments": {
        "subnets": [
            {
                "id": 5
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> parameter must not be used with
          this command.</para>
        </section>

        <section id="command-remote-subnet4-get-by-prefix">
          <title>remote-subnet4-get-by-prefix, remote-subnet6-get-by-prefix command</title>
          <para id="command-remote-subnet6-get-by-prefix">This is the second variant
          of the commands used to fetch an IPv4 or IPv6 subnet from the database. It
          uses a subnet prefix to identify the subnet. For example:
          <screen>
{
    "command": "remote-subnet6-get-by-prefix",
    "arguments": {
        "subnets": [
            {
                "subnet": "2001:db8:1::/64"
            }
        ],
        "remote": {
            "type": "mysql"
        }
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> parameter must not be used with
          this command.</para>
        </section>

        <section id="command-remote-subnet4-list">
          <title>remote-subnet4-list, remote-subnet6-list commands</title>
          <para id="command-remote-subnet6-list">These commands are used to list
          all IPv4 or IPv6 subnets from the database for selected servers or all
          servers. The following command retrieves all servers to be used by the
          "server1" and "server2":
          <screen>
{
    "command": "remote-subnet4-list"
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "server1", "server2" ]
    }
}
          </screen>
          </para>
          <para>The <command>server-tags</command> parameter is mandatory and it contains
          one or more server tags. It may contain the keyword "all" to fetchg the subnets
          associated with all servers. When the <command>server-tags</command> list contains
          the <command>null</command> value the returned response contains a list of
          unassigned subnets, i.e. the subnets which are associated with no servers.
          For example:
          <screen>
{
    "command": "remote-subnet4-list"
    "arguments": {
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ null ]
    }
}
          </screen>
          </para>
          <para>The example response to this command when non-null server tags are specified
          looks similar to this:
          <screen>
{
    "result": 0,
    "text": "2 IPv4 subnet(s) found.",
    "arguments": {
        "subnets": [
            {
                "id": 1,
                "subnet": "192.0.2.0/24",
                "shared-network-name": null,
                "metadata": {
                    "server-tags": [ "server1", "server2" ]
                }
            },
            {
                "id": 2,
                "subnet": "192.0.3.0/24",
                "shared-network-name": null,
                "metadata": {
                    "server-tags": [ "all" ]
                }
            }
        ],
        "count": 2
    }
}
          </screen>
          </para>
          <para>The returned information about each subnet is limited to subnet identifier,
          prefix and associated shared network name. In order to retrieve full
          information about the selected subnet use the
          <command>remote-subnet[46]-get-by-id</command> or
          <command>remote-subnet[46]-get-by-prefix</command>.
          </para>
          <para>The example response above contains two subnets. One of the subnets is
          associated with both servers: "server1" and "server2". The second subnet is
          associated with all servers, thus it is also present in the configuration for
          the "server1" and "server2".
          </para>
          <para>When listing unassigned subnets, the response will look similar to this:
          <screen>
{
    "result": 0,
    "text": "1 IPv4 subnet(s) found.",
    "arguments": {
        "subnets": [
            {
                "id": 3,
                "subnet": "192.0.4.0/24",
                "shared-network-name": null,
                "metadata": {
                    "server-tags": [ null ]
                }
            }
        ],
        "count": 1
    }
}
          </screen>
          </para>
          <para>The <command>null</command> value in the metadata indicates that the
          returned subnet is unassigned.
          </para>
        </section>

        <section id="command-remote-subnet4-set">
          <title>remote-subnet4-set, remote-subnet6-set commands</title>
          <para id="command-remote-subnet6-set">These commands are used to create
          a new IPv4 or IPv6 subnet or replace an existing subnet in the database.
          Setting the subnet also associates or disassociates the subnet with a
          shared network.</para>

          <para>The structure of the subnet information is similar to the structure
          used in the configuration file (see <xref linkend="dhcp4-configuration"/>
          and <xref linkend="dhcp6-configuration"/>). The subnet information
          conveyed in the <command>remote-subnet[46]-set</command> must include
          additional parameter <command>shared-network-name</command> which denotes
          whether the subnet belongs to a shared network or not.
          </para>

          <para>Consider the following example:
          <screen>
{
    "command": "remote-subnet4-set",
    "arguments": {
        "subnets": [
            {
                "id": 5,
                "subnet": "192.0.2.0/24",
                "shared-network-name": "level3",
                "pools": [ { "pool": "192.0.2.100-192.0.2.200" } ],
                "option-data": [ {
                    "name": "routers",
                    "data": "192.0.2.1"
                } ]
            }
        ],
        "remote": {
            "type": "mysql"
        },
        "server-tags": [ "all" ]
    }
}
          </screen>
          </para>

          <para>It creates the subnet and associates the subnet with the "level3"
          shared network. The "level3" must be created with the
          <command>remote-network4-set</command> prior to creating the subnet.
          </para>

          <para>If the created subnet must be global (not associated with any
          shared network), the <command>shared-network-name</command> must be
          explicitly set to <command>null</command>:
          <screen>
{
    "command": "remote-subnet4-set",
    "arguments": {
        "subnets": [
            {
                "id": 5,
                "subnet": "192.0.2.0/24",
                "shared-network-name": null,
                "pools": [ { "pool": "192.0.2.100-192.0.2.200" } ],
                "option-data": [ {
                    "name": "routers",
                    "data": "192.0.2.1"
                } ]
           }
        ],
        "server-tags": [ "all" ]
    }
}
          </screen>
          </para>

          <para>The subnet created in the previous example is replaced with the
          new subnet having the same parameters but it becomes global.</para>

          <para>The <command>shared-network-name</command> parameter is mandatory
          for the <command>remote-subnet4-set</command> command. The
          <command>server-tags</command> list is mandatory and it must include
          one or more server tags. As a result, the subnet is associated with
          all of the listed servers. It may also be associated with "all" servers
          connecting to the database when the keyword "all" is used as the server
          tag.</para>

          <note>
            <para>
              Same as for other "set" commands, this command replaces the entire
              information about the particular subnet in the database, if the subnet
              information is already present. Therefore, when sending this command,
              make sure to always include all parameters that must be specified for
              the updated subnet instance. Any unspecified parameter will be marked
              as unspecified in the database, even if its value was present prior to
              sending the command.
            </para>
          </note>
        </section>

      </section>

    </section>

// Copyright (C) 2016 Internet Systems Consortium, Inc. ("ISC")
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

/**

@mainpage Kea Legal Log Hooks Library

Welcome to Kea Legal Log Hooks Library. This documentation is
addressed at Kea developers, and provides information needed to write,
extend and maintain Kea hooks.

This documentation is stand-alone: you should have read and
understood <a href="http://git.kea.isc.org/~tester/kea/doxygen/">Kea
Developer's Guide</a> and in particular its section about hooks: <a
href="http://git.kea.isc.org/~tester/kea/doxygen/df/d46/hooksdgDevelopersGuide.html">
Hooks Developer's Guide</a>.

@section libdhcp_legal_logUser How To Use Libdhcp_legal_log
## Introduction
libdhcp_legal_log is a hooks library which customizes the
DHCP lease management provided by Kea DHCP server modules (kea-dhcp4
and kea-dhcp6).  Specifically it implements recording a detailed log of lease
assignments and renewals as might be required for legal purposes.  It is
also described in the <a href="http://kea.isc.org/docs/kea-guide.html">Kea
Administrator Reference Manual</a> instead in the section titled
Forensic Logging Hooks.

This library is designed to help with the requirement
that in many legal jurisdictions companies, especially ISPs, must
record information about the addresses they have leased to
DHCP clients.  If the information that it records is sufficient
it may be used directly. If your jurisdiction requires that
you save a different set of information you may use it as a
template or example and create your own custom logging hooks.

## Log Files
Legal logs are appended into a text file implemented by the class
@c isc::legal_log::RotatingFile. On a daily basis it is rotated to a new file.

Legal file names have the form:
@verbatim
<path>/<base-name>.<CCYYMMDD>.txt
@endverbatim

## DHCPv4 Log Detailed Structure
For DHCPv4 the library creates entries based on DHCPREQUEST messages
and corresponding DHCPv4 leases intercepted by the lease4_select
(for new leases) and lease4_renew (for renewed leases) hooks.

An entry is a single string with no embedded end-of-line markers
and has the following sections:
@code
<address><duration><device-id>{client-info}{relay-info}
@endcode
Where:
 - @b address - the leased IPv4 address given out and whether it was
   assigned or renewed.
 - @b duration - the lease lifetime expressed in days (if present),
   hours, minutes and seconds.  A lease lifetime of 0xFFFFFFFF will be
   denoted with the text "infinite duration".
 - @b device-id - the client's hardware address shown as numerical type
   and hex digit string.
 - @b client-info - the DHCP client id option (61) if present, shown as
   hex digit string.
 - @b relay-info - for relayed packets the giaddr and the RAI circuit id
   and remote id options (option 82 sub options 1 and 2) if present.

For instance:
@verbatim
Address: 192.2.1.100 has been renewed for 1 hrs 52 min 15 secs to a device with hardware address: hwtype=1 08:00:2b:02:3f:4e, client-id: 17:34:e2:ff:09:92:54 connected via relay at address: 192.2.16.33, identified by circuit-id: 68:6f:77:64:79 and remote-id: 87:f6:79:77:ef
@endverbatim

## DHCPv6 Log Detailed Structure
For DHCPv6 the library creates entries based on lease management interesting
actions intercepted by the lease6_select (for new leases), lease6_renew
(for renewed leases) and lease6_rebind (for rebound leases).

An entry is a single string with no embedded end-of-line markers
and has the following sections:
@code
<address><duration><device-id>{relay-info}*
@endcode
Where:
 - @b address - the leased IPv6 address or prefix given out and whether
   it was assigned or renewed.
 - @b duration - the lease lifetime expressed in days (if present),
   hours, minutes and seconds.  A lease lifetime of 0xFFFFFFFF will be
   denoted with the text "infinite duration".
 - @b device-id - the client's DUID and hardware address (if present).
 - @b relay-info - for relayed packets the content of relay agent
   messages, remote id and subscriber id options (x and xx) if present.

For instance:
@verbatim
Address:2001:db8:1:: has been assigned for 0 hrs 11 mins 53 secs to a device with DUID: 17:34:e2:ff:09:92:54 and hardware address: hwtype=1 08:00:2b:02:3f:4e (from Raw Socket) connected via relay at address: fe80::abcd for client on link address: 3001::1, hop count: 1, identified by remote-id: 01:02:03:04:0a:0b:0c:0d:0e:0f and subscriber-id: 1a:2b:3c:4d:5e:6f
@endverbatim

## Configuring the DHCP Modules

It must be configured as a hook library for the desired DHCP server
modules.  Note that the legal_log library is installed alongside the
Kea libraries in "<install-dir>/lib" where <install-dir> is determined
by the --prefix option of the configure script.  It defaults to
"/usr/local". Assuming the default value then, configuring kea-dhcp4
to load the legal_log library could be done with the following Kea4
configuration:

@code
"Dhcp4": {
    "hook_libraries": [
        { "library": "/usr/local/lib/libdhcp_legal_log.so",
          "parameters": {
            "path": "/var/kea/var",
            "base-name": "kea-legal4" } },
        ...
    ]
}
@endcode

To configure it for kea-dhcp6, the commands are simply as shown below:

@code
"Dhcp6": {
    "hook_libraries": [
        { "library": "/usr/local/lib/libdhcp_legal_log.so",
          "parameters": {
            "path": "/var/kea/var",
            "base-name": "kea-legal6" } },
        ...
    ]
}
@endcode

Two string Hook Library Parameters are supported:
 - @b path - Directory in which the legal file(s) will be written.  The
 default value is "<prefix>/kea/var".  The directory must exist.
 - @b base-name - An arbitrary value which is used in conjunction with
 the current system date to form the current legal file name.  It defaults
 to "kea-legal".

When running Kea servers for both DHCPv4 and DHCPv6 the log names must
be distinct, either the path or the base-name (or both) should be
different for DHCP4 vs DHCP6.

@section libdhcp_legal_logDesign Commented Design for Libdhcp_legal_log
## Introduction
Some countries require ISPs to log the connection meta-data for legal purposes.
A legal log hook library demonstrating how to log this information is then
useful as both an example explaining how to program with hooks and for direct
use.

As explained in the tutorial of the Hook Developer's Guide <a
href="http://git.kea.isc.org/~tester/kea/doxygen/df/d46/hooksdgDevelopersGuide.html#hooksdgTutorial">
Tutorial</a> a hook library is a Dynamic Shared Object with known
entry points for the framework functions and hooks. The DSO is (when
not static linked) dynamically loaded by a Kea server module. Some
parameters can be passed to configure it and DSO entry points with
a well known hook names are auto-magically registered.

The Kea server module invokes the registered callouts during processing
and passes some context arguments.  The returned status is used to
control further prosessing, e.g., by dropping a message to cancel
the current action.

## Framework
The file version.cc defines the required framework version() function
which protects against Hooks API changes. The file load_unload.cc
defines a load() function which processes the configuration parameters
and creates and opens the legal log file (implemented by class @c
isc::legal_log::RotatingFile in rotating_file.h and
rotating_file.cc). The unload() function destroys the object which by
side effect closes the legal log file. Note the load() function does
not register callouts nor a logger: the Hooks Library Manager takes
care of this (triggered for the logger by legal_log_log.h,
legal_log_log.cc and legal_log_messages.h files).

## Callouts
For DHCPv4 lease4_select() and lease4_renew() hook callouts are defined,
for DHCPv6 lease6_select(), lease6_renew() and lease6_rebind() are defined
in lease4_callouts.cc and lease6_callouts.cc files.

Lease select callouts return on fake_allocation, i.e., on the reception
of DHCPDISCOVER or DHCPV6_SOLICIT messages. legalLog4Handler() or
legalLog6Handler() is called with the callout handle (to get the
parsed query message and the lease) and a boolean renewal flag.

When something goes wrong callouts return 1 (next step skip)
which tells the server to skip processing the next step. So
in the server any legal log error is converted to an internal
error and the client is denied service.

## Log Generation
For DHCPv4 the only difficulty is to get the relay agent information
option and its two interesting (i.e., to log) circuit ID and remote
ID sub-options for any queries that were relayed.

For DHCPv6 the hardware address is not built-in but can be recovered and
recorded by kea-dhcp6 in many cases. A DHCPv6 query can be relayed
more than once but the current code logs only the first (closest
to the client) relay information with first found remote ID and
subscriber ID relay options.

*/

#line 1 "d2_lexer.cc"

#line 3 "d2_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer d2_parser__create_buffer
#define yy_delete_buffer d2_parser__delete_buffer
#define yy_flex_debug d2_parser__flex_debug
#define yy_init_buffer d2_parser__init_buffer
#define yy_flush_buffer d2_parser__flush_buffer
#define yy_load_buffer_state d2_parser__load_buffer_state
#define yy_switch_to_buffer d2_parser__switch_to_buffer
#define yyin d2_parser_in
#define yyleng d2_parser_leng
#define yylex d2_parser_lex
#define yylineno d2_parser_lineno
#define yyout d2_parser_out
#define yyrestart d2_parser_restart
#define yytext d2_parser_text
#define yywrap d2_parser_wrap
#define yyalloc d2_parser_alloc
#define yyrealloc d2_parser_realloc
#define yyfree d2_parser_free

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    #define yy_create_buffer d2_parser__create_buffer

    #define yy_delete_buffer d2_parser__delete_buffer

    #define yy_scan_buffer d2_parser__scan_buffer

    #define yy_scan_string d2_parser__scan_string

    #define yy_scan_bytes d2_parser__scan_bytes

    #define yy_init_buffer d2_parser__init_buffer

    #define yy_flush_buffer d2_parser__flush_buffer

    #define yy_load_buffer_state d2_parser__load_buffer_state

    #define yy_switch_to_buffer d2_parser__switch_to_buffer

    #define yypush_buffer_state d2_parser_push_buffer_state

    #define yypop_buffer_state d2_parser_pop_buffer_state

    #define yyensure_buffer_stack d2_parser_ensure_buffer_stack

    #define yylex d2_parser_lex

    #define yyrestart d2_parser_restart

    #define yylex_init d2_parser_lex_init

    #define yylex_init_extra d2_parser_lex_init_extra

    #define yylex_destroy d2_parser_lex_destroy

    #define yyget_debug d2_parser_get_debug

    #define yyset_debug d2_parser_set_debug

    #define yyget_extra d2_parser_get_extra

    #define yyset_extra d2_parser_set_extra

    #define yyget_in d2_parser_get_in

    #define yyset_in d2_parser_set_in

    #define yyget_out d2_parser_get_out

    #define yyset_out d2_parser_set_out

    #define yyget_leng d2_parser_get_leng

    #define yyget_text d2_parser_get_text

    #define yyget_lineno d2_parser_get_lineno

    #define yyset_lineno d2_parser_set_lineno

    #define yywrap d2_parser_wrap

/* %endif */

    #define yyalloc d2_parser_alloc

    #define yyrealloc d2_parser_realloc

    #define yyfree d2_parser_free

/* %if-c-only */

    #define yytext d2_parser_text

    #define yyleng d2_parser_leng

    #define yyin d2_parser_in

    #define yyout d2_parser_out

    #define yy_flex_debug d2_parser__flex_debug

    #define yylineno d2_parser_lineno

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE d2_parser_restart(d2_parser_in  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int d2_parser_leng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *d2_parser_in, *d2_parser_out;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up d2_parser_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up d2_parser_text again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via d2_parser_restart()), so that the user can continue scanning by
	 * just pointing d2_parser_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when d2_parser_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int d2_parser_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow d2_parser_wrap()'s to do buffer switches
 * instead of setting up a fresh d2_parser_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void d2_parser_restart ( FILE *input_file  );
void d2_parser__switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE d2_parser__create_buffer ( FILE *file, int size  );
void d2_parser__delete_buffer ( YY_BUFFER_STATE b  );
void d2_parser__flush_buffer ( YY_BUFFER_STATE b  );
void d2_parser_push_buffer_state ( YY_BUFFER_STATE new_buffer  );
void d2_parser_pop_buffer_state ( void );

static void d2_parser_ensure_buffer_stack ( void );
static void d2_parser__load_buffer_state ( void );
static void d2_parser__init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER d2_parser__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE d2_parser__scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE d2_parser__scan_string ( const char *yy_str  );
YY_BUFFER_STATE d2_parser__scan_bytes ( const char *bytes, int len  );

/* %endif */

void *d2_parser_alloc ( yy_size_t  );
void *d2_parser_realloc ( void *, yy_size_t  );
void d2_parser_free ( void *  );

#define yy_new_buffer d2_parser__create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        d2_parser_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            d2_parser__create_buffer(d2_parser_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        d2_parser_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            d2_parser__create_buffer(d2_parser_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] d2_parser_text/d2_parser_in/d2_parser_out/yy_state_type/d2_parser_lineno etc. def's & init go here */
/* Begin user sect3 */

#define d2_parser_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *d2_parser_in = NULL, *d2_parser_out = NULL;

typedef int yy_state_type;

extern int d2_parser_lineno;
int d2_parser_lineno = 1;

extern char *d2_parser_text;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr d2_parser_text

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up d2_parser_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle d2_parser_text and d2_parser_leng for yymore() goes here \ */\
	d2_parser_leng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to d2_parser_text[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[336] =
    {   0,
       51,   51,    0,    0,    0,    0,    0,    0,    0,    0,
       59,   57,   10,   11,   57,    1,   51,   48,   51,   51,
       57,   50,   49,   57,   57,   57,   57,   57,   44,   45,
       57,   57,   57,   46,   47,    5,    5,    5,   57,   57,
       57,   10,   11,    0,    0,   40,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    1,   51,   51,    0,   50,
       51,    3,    2,    6,    0,   51,    0,    0,    0,    0,
        0,    0,    4,    0,    0,    9,    0,   41,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,    0,    0,    0,    0,
        0,    0,    8,    0,    0,    0,    0,    0,    0,    0,
       42,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   56,   54,    0,   53,   52,    0,    0,    0,    0,
        0,   19,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,   52,    0,    0,    0,    0,    0,   20,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   35,    0,    0,    0,   14,    0,    0,    0,
        0,    0,    0,   38,   39,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,    0,   30,    0,    0,    0,   31,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
        0,    0,    0,   12,    0,    0,    0,    0,    0,    0,
       26,    0,   24,    0,    0,    0,    0,   37,    0,   28,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

       27,    0,   36,    0,    0,    0,    0,   13,   17,    0,
        0,    0,    0,   29,    0,   25,    0,    0,    0,    0,
       23,    0,   21,   16,    0,   22,    0,    0,    0,   33,
        0,    0,    0,   15,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    5,    5,    5,    5,    5,
        5,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   15,   14,   16,   14,   14,   14,   17,    5,   18,
        5,   19,   20,    5,   21,   22,   23,   24,   25,   26,
        5,    5,    5,   27,    5,   28,    5,   29,   30,   31,
        5,   32,   33,   34,   35,    5,    5,    5,    5,    5,
       36,   37,   38,    5,   39,    5,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    5,   56,   57,   58,   59,   60,   61,    5,
       62,    5,   63,    5,   64,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static const YY_CHAR yy_meta[65] =
    {   0,
        1,    1,    2,    3,    3,    4,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    5,    5,    5,    5,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[348] =
    {   0,
        0,    0,   63,   66,   69,    0,   67,   71,   52,   68,
      296, 2262,   87,  289,  133,    0,   96, 2262,  130,  133,
       84,  150, 2262,  268,  109,   69,   67,   72, 2262, 2262,
      110,   71,   97, 2262, 2262, 2262,   97,  271,  229,    0,
      235,  139,  247,  132,  194, 2262,  200,  206,  212,  218,
      224,  227,  250,  256,  268,  275,  288,  305,  313,  329,
      335,  345,  351,  359,  374,    0,  375,  390,  312,  398,
      393, 2262,    0, 2262,  220,  230,  128,  165,  163,  177,
      214,  164, 2262,  196,  226, 2262,  148, 2262,  380,  426,
      442,  448,  455,  464,  211,  472,  506,  487,  481,  501,

      534,  551,  557,  563,  572,  584,  590,  596,  604,  613,
      622,  628,  637,  650,    0,  240,  247,  127,  246,  267,
      185,  160, 2262,    0,  666,  679,  688,  698,  704,  198,
     2262,  728,  711,  721,  727,  754,  773,  760,  779,  786,
      793,  799,  805,  811,  826,  832,  838,  849,  855,  864,
      295, 2262, 2262,  315, 2262, 2262,  113,    0,  882,  870,
      910, 2262, 2262,  945,  919,  925,  936,  942,  975,  990,
      999, 1005, 1012, 1018, 1032, 1038, 1044, 1055, 1065, 1071,
     1083, 1093, 2262, 2262,  120,    0, 1104, 1110, 1116, 2262,
     1123, 1163, 1132, 1155, 1162, 1194, 1209, 1217, 1223, 1231,

     1238, 1255, 2262, 1263, 1278, 1284, 2262, 1292, 1300, 1306,
     1322,  115,    0, 2262, 2262, 1329, 1338, 1344, 1350, 1359,
     1368, 1387, 1405, 1412, 1419, 1425, 1431, 1444, 1452, 1464,
     1470, 1481, 1489, 1496, 2262, 1507, 1514, 1521, 1528, 1535,
     1547, 1553, 1560, 1572, 1580, 1590, 1598, 1604, 1617, 2262,
     1627, 1636, 2262, 1642, 1649, 1656, 2262, 1664, 1681, 1688,
     1694, 1704, 1721, 1732, 1743, 1749, 2262, 1759, 1765, 1771,
     1781, 1788, 1803, 2262, 1809, 1826, 1832, 1841, 1847, 1853,
     2262, 1864, 2262, 1870, 1885, 1879, 1892, 2262, 1903, 2262,
     1909, 1917, 1930, 1941, 1947, 1954, 1962, 1968, 1979, 1987,

     2262, 2000, 2262, 2006, 2012, 2027, 2044, 2262, 2262, 2052,
     2059, 2065, 2071, 2262, 2077, 2262, 2084, 2091, 2103, 2109,
     2262, 2117, 2262, 2262, 2128, 2262, 2135, 2141, 2147, 2262,
     2156, 2165, 2174, 2262, 2262, 2223, 2228, 2233, 2238, 2243,
     2248, 2253, 2256,  146,  132,   91,   88
    } ;

static const flex_int16_t yy_def[348] =
    {   0,
      335,    1,  336,  336,    1,    5,    5,    5,    5,    5,
      335,  335,  335,  335,  337,  338,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  339,
      335,  335,  335,  340,  337,  335,  337,  337,  337,  337,
      337,  341,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  338,  335,  335,  335,  335,
      335,  335,  342,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  339,  335,  340,  335,  335,  337,
      337,  337,  337,  337,  343,  337,  341,  337,  337,  337,

      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  342,  335,  335,  335,  335,  335,
      335,  335,  335,  344,  337,  337,  337,  337,  337,  343,
      335,  341,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      335,  335,  335,  335,  335,  335,  335,  345,  337,  337,
      337,  335,  335,  341,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  335,  335,  335,  346,  337,  337,  337,  335,
      337,  341,  337,  337,  337,  337,  337,  337,  337,  337,

      337,  337,  335,  337,  337,  337,  335,  337,  337,  337,
      337,  335,  347,  335,  335,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  335,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  335,
      337,  337,  335,  337,  337,  337,  335,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  335,  337,  337,  337,
      337,  337,  337,  335,  337,  337,  337,  337,  337,  337,
      335,  337,  335,  337,  337,  337,  337,  335,  337,  335,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,

      335,  337,  335,  337,  337,  337,  337,  335,  335,  337,
      337,  337,  337,  335,  337,  335,  337,  337,  337,  337,
      335,  337,  335,  335,  337,  335,  337,  337,  337,  335,
      337,  337,  337,  335,    0,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335
    } ;

static const flex_int16_t yy_nxt[2327] =
    {   0,
       12,   13,   14,   13,   12,   15,   16,   12,   17,   18,
       19,   20,   21,   22,   22,   22,   23,   24,   12,   12,
       12,   12,   12,   12,   25,   26,   12,   12,   27,   12,
       12,   12,   12,   28,   12,   29,   12,   30,   12,   12,
       12,   12,   12,   25,   31,   12,   12,   12,   12,   12,
       12,   12,   32,   12,   12,   12,   12,   33,   12,   12,
       12,   12,   34,   35,   37,   14,   37,   37,   14,   37,
       38,   41,   40,   38,   12,   12,   40,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   41,   42,   77,
       42,   72,   87,   12,   12,  213,   73,   12,   42,   12,

       42,   78,   12,   79,   12,   78,   12,   67,   77,   68,
       68,   68,   12,   12,   12,   12,   39,   75,   12,   75,
       69,   12,   76,   76,   76,   78,   12,   79,   79,   81,
       77,   12,   12,   44,   44,   44,  186,   88,   46,   69,
       42,   67,   42,   70,   70,   70,   71,   71,   71,   80,
      158,  153,   82,   88,   69,  116,   47,   69,  235,   48,
       49,   67,  212,   70,   70,   70,   50,   51,   89,   52,
      153,  185,   53,   69,   69,   54,   69,   55,  116,   56,
       57,   48,   58,   59,   89,   60,   61,   62,   63,   64,
       65,   51,  117,   69,   44,   44,   44,  118,  118,   46,

       44,   44,   44,  131,  116,   46,   44,   44,   44,  153,
      157,   46,   44,   44,   44,  117,  131,   46,   44,   44,
       44,  118,  121,   46,   44,   44,   44,  119,  156,   46,
       52,  123,   96,   76,   76,   76,   52,  122,   91,   45,
       93,  117,   52,   76,   76,   76,   90,   94,   52,   43,
       44,   44,   44,   86,   52,   46,   44,   44,   44,   93,
       52,   46,   91,   45,  120,   92,   94,   45,   44,   44,
       44,   45,  151,   46,  152,   44,   44,   44,  151,   45,
       46,   84,   45,   83,   45,   97,   52,   74,   44,   44,
       44,   43,   52,   46,  152,  335,  151,  152,   99,  100,

       98,  335,  154,  101,   52,   44,   44,   44,  102,  335,
       46,   52,  335,   44,   44,   44,  335,  155,   46,  183,
       75,  103,   75,  335,   52,   76,   76,   76,  104,   44,
       44,   44,  335,  335,   46,   44,   44,   44,  183,  183,
       46,   52,  105,  335,  335,   44,   44,   44,  106,   52,
       46,   44,   44,   44,  335,  335,   46,  335,  184,   44,
       44,   44,  335,  335,   46,   52,  107,  335,  108,  335,
      109,   52,  335,  335,   44,   44,   44,  335,  335,   46,
      335,   52,  335,  335,  335,   87,  335,   52,   71,   71,
       71,  335,   87,  110,  112,   52,   93,  335,  111,   69,

      335,   67,  113,   68,   68,   68,   71,   71,   71,   67,
       52,   70,   70,   70,   69,   93,   87,   69,   69,  335,
       87,  335,   69,  335,   87,  335,   44,   44,   44,  335,
      114,   46,   87,   69,  335,   87,   69,   87,  124,  335,
      335,   69,   44,   44,   44,  335,  335,   46,   44,   44,
       44,  335,  335,   46,  335,   44,   44,   44,  335,  335,
       46,  335,   52,  335,   44,   44,   44,  125,  335,   46,
      335,  126,   44,   44,   44,  335,  335,   46,   52,  335,
      335,   44,   44,   44,   52,  128,   46,   44,   44,   44,
      335,   52,   46,  127,  129,  126,  335,  335,  335,  335,

       52,   44,   44,   44,  335,  335,   46,  335,   52,  128,
      335,  335,  335,  335,  335,  335,  335,   52,  129,  132,
      132,  132,  335,   52,  335,  335,  132,  132,  132,  132,
      132,  132,  133,  134,   44,   44,   44,   52,  335,   46,
      335,  135,  335,  335,  335,  132,  132,  132,  132,  132,
      132,   44,   44,   44,  335,  335,   46,   44,   44,   44,
      335,  335,   46,   44,   44,   44,  335,  335,   46,  335,
       52,  335,   44,   44,   44,  335,  335,   46,  335,  136,
      335,  335,  140,  335,   44,   44,   44,   52,  335,   46,
       44,   44,   44,   52,  335,   46,   44,   44,   44,   52,

      335,   46,  335,  335,   44,   44,   44,  137,   52,   46,
      335,  335,  138,   44,   44,   44,  335,  335,   46,  139,
       52,  335,   44,   44,   44,  335,   52,   46,   44,   44,
       44,  335,   52,   46,  335,  142,  335,   44,   44,   44,
       52,  335,   46,  335,  335,  141,  335,  143,  335,   52,
       44,   44,   44,  335,  335,   46,  335,  335,   52,  144,
      335,  335,  335,  335,   52,  335,   44,   44,   44,  335,
      145,   46,  335,   52,  335,  335,  335,  146,  148,   44,
       44,   44,  335,  335,   46,  335,   52,  147,   44,   44,
       44,  335,  335,   46,  335,  335,  149,  150,   44,   44,

       44,  335,   52,  162,   44,   44,   44,  160,  335,  163,
      335,   44,   44,   44,  335,   52,   46,  335,  335,  335,
      159,   44,   44,   44,   52,  335,   46,   44,   44,   44,
      335,  160,   46,  161,   52,  335,  335,  335,  335,  335,
       52,  164,  164,  164,  335,  335,  335,   52,  164,  164,
      164,  164,  164,  164,   44,   44,   44,   52,  335,   46,
       44,   44,   44,   52,  165,   46,  335,  164,  164,  164,
      164,  164,  164,   44,   44,   44,  335,  166,   46,   44,
       44,   44,  335,  169,   46,  167,   44,   44,   44,  335,
       52,   46,  335,   44,   44,   44,   52,  168,   46,   44,

       44,   44,  335,  173,   46,   44,   44,   44,  335,   52,
       46,   44,   44,   44,  335,   52,   46,  335,  335,  335,
      170,  176,   52,  335,  335,  172,   44,   44,   44,   52,
      335,   46,   44,   44,   44,   52,  171,   46,   44,   44,
       44,   52,  335,   46,  174,  335,  335,   52,  175,   44,
       44,   44,  335,  335,   46,   44,   44,   44,  335,  335,
       46,  335,   52,  335,   44,   44,   44,  335,   52,   46,
       44,   44,   44,  335,   52,  190,  335,  335,  335,  335,
      177,  179,   44,   44,   44,   52,  335,   46,  335,  178,
      335,   52,  335,  335,  335,  335,  187,  188,  181,  335,

       52,  335,  335,  335,  180,  189,   52,  335,  335,  182,
       44,   44,   44,  335,  335,   46,  335,  335,   52,   44,
       44,   44,  335,  335,   46,   44,   44,   44,  335,  335,
       46,  335,  335,  335,  335,  194,   44,   44,   44,  335,
      335,   46,   44,   44,   44,  335,   52,   46,  335,  335,
      335,  335,  335,  335,  335,   52,  335,  191,  192,  192,
      192,   52,  335,  335,  335,  192,  192,  192,  192,  192,
      192,  335,   52,  335,  193,   44,   44,   44,   52,  335,
       46,  195,  335,  335,  192,  192,  192,  192,  192,  192,
       44,   44,   44,  335,  335,   46,  335,  335,  196,   44,

       44,   44,  335,  335,   46,   44,   44,   44,  335,  335,
       46,   52,   44,   44,   44,  335,  335,   46,   44,   44,
       44,  335,  335,   46,  335,  335,   52,  335,  335,  198,
      335,  197,   44,   44,   44,   52,  335,  203,   44,   44,
       44,   52,  335,   46,   44,   44,   44,  200,   52,   46,
      335,  199,  335,  335,   52,   44,   44,   44,  335,  335,
      207,  202,  335,  335,  201,   44,   44,   44,   52,  335,
       46,   44,   44,   44,   52,  335,   46,  335,  335,  335,
       52,  335,  204,   44,   44,   44,  335,  335,   46,  335,
      335,   52,  205,   44,   44,   44,  335,  335,   46,  335,

      335,   52,  206,  211,   44,   44,   44,   52,  335,  214,
       44,   44,   44,  335,  209,  215,   44,   44,   44,   52,
      208,   46,  335,   44,   44,   44,  335,  335,   46,   52,
      335,  335,   44,   44,   44,  335,  335,   46,  210,  335,
       52,  335,  335,  335,  335,  335,   52,  335,  335,  335,
      335,  335,   52,  335,  335,   44,   44,   44,  216,   52,
       46,  335,   44,   44,   44,  335,  335,   46,   52,  335,
      335,  335,  335,  335,  335,  217,   45,   45,   45,  218,
      335,  335,  335,   45,   45,   45,   45,   45,   45,  335,
      335,   52,  335,  335,   44,   44,   44,  219,   52,   46,

      335,  335,   45,   45,   45,   45,   45,   45,  335,   44,
       44,   44,  220,  335,   46,  335,  335,   44,   44,   44,
      335,  335,   46,   44,   44,   44,  335,  335,   46,  335,
       52,   44,   44,   44,  335,  335,   46,  335,   44,   44,
       44,  335,  335,   46,  335,   52,  335,  335,  335,  335,
      335,  221,  222,   52,  335,   44,   44,   44,  335,   52,
       46,  335,  224,   44,   44,   44,  335,   52,   46,  335,
      335,  335,  223,  225,   52,  335,  335,  226,   44,   44,
       44,  335,  335,   46,   44,   44,   44,  335,  335,   46,
      335,   52,   44,   44,   44,  335,  335,   46,  335,   52,

       44,   44,   44,  335,  335,   46,   44,   44,   44,  335,
      227,   46,  335,  335,   52,  335,  228,  335,  335,  335,
       52,  335,   44,   44,   44,  335,  335,   46,   52,   44,
       44,   44,  335,  229,   46,  335,   52,  335,   44,   44,
       44,  230,   52,   46,   44,   44,   44,  335,  231,   46,
       44,   44,   44,  233,  335,   46,  335,  232,   52,   44,
       44,   44,  335,  335,   46,   52,  335,  335,   44,   44,
       44,  234,  335,   46,   52,  335,  335,  335,  241,  335,
       52,  236,  335,  237,  335,  335,   52,   44,   44,   44,
      335,  335,   46,  335,  335,   52,  335,  335,  335,  335,

      335,  238,  240,  239,   52,   44,   44,   44,  335,  335,
       46,  335,   44,   44,   44,  335,  335,   46,  335,   44,
       44,   44,  335,   52,   46,   44,   44,   44,  335,  335,
       46,   44,   44,   44,  335,  335,   46,  335,  335,  335,
      335,   52,  242,  335,   44,   44,   44,  243,   52,   46,
      335,  335,   44,   44,   44,   52,  335,   46,  335,  335,
      335,   52,  335,  244,   44,   44,   44,   52,  335,  250,
       44,   44,   44,  335,  245,   46,  246,  335,  335,  335,
       52,   44,   44,   44,  335,  335,  253,  247,   52,   44,
       44,   44,  335,  335,   46,  335,   44,   44,   44,  248,

       52,   46,  251,  335,  335,  249,   52,   44,   44,   44,
      335,  335,   46,  252,   44,   44,   44,   52,  335,  257,
      335,   44,   44,   44,  335,   52,   46,  335,   44,   44,
       44,  335,   52,   46,  335,   44,   44,   44,  335,  255,
       46,  335,  335,   52,  335,  335,  254,   44,   44,   44,
       52,  335,   46,   44,   44,   44,  335,   52,   46,  335,
       44,   44,   44,  256,   52,   46,  335,  258,  335,  335,
      263,   52,   44,   44,   44,  335,  335,   46,  335,  259,
       44,   44,   44,   52,  335,   46,  335,  261,  335,   52,
       44,   44,   44,  335,  260,   46,   52,  335,   44,   44,

       44,  335,  335,  267,   44,   44,   44,  335,   52,   46,
      335,  335,  262,  335,  335,  264,   52,   44,   44,   44,
      335,  335,   46,  265,  335,  335,   52,   44,   44,   44,
      335,  335,   46,  266,   52,  335,   44,   44,   44,  335,
       52,   46,   44,   44,   44,  335,  271,   46,  335,   44,
       44,   44,  335,   52,   46,  268,   44,   44,   44,  335,
      335,  274,  335,   52,   44,   44,   44,  335,  335,   46,
      335,  335,   52,  335,  269,  335,  335,  335,   52,  335,
      270,   44,   44,   44,  335,   52,   46,  335,   44,   44,
       44,  335,   52,   46,   44,   44,   44,  335,  335,   46,

       52,  335,  335,  272,   44,   44,   44,  335,  335,   46,
      273,  335,  335,  335,  335,  275,  335,   52,  335,  335,
      276,   44,   44,   44,   52,  335,   46,  335,  335,  335,
       52,  277,   44,   44,   44,  335,  335,  281,  335,  335,
       52,  278,  335,   44,   44,   44,  335,  279,   46,   44,
       44,   44,  335,  335,  283,  335,  335,   52,  335,   44,
       44,   44,  335,  280,   46,   44,   44,   44,   52,  335,
       46,   44,   44,   44,  335,  335,   46,  335,  335,   52,
      335,   44,   44,   44,  335,   52,   46,  335,   44,   44,
       44,  335,  335,  288,  335,   52,  335,  335,  284,  282,

      335,   52,  335,   44,   44,   44,  335,   52,   46,   44,
       44,   44,  335,  335,  290,  335,  335,   52,  285,  335,
      335,  335,  335,  287,   52,  286,   44,   44,   44,  335,
      335,   46,   44,   44,   44,  335,  335,   46,  335,   52,
      335,   44,   44,   44,  335,   52,   46,   44,   44,   44,
      335,  335,   46,   44,   44,   44,  335,  335,   46,  289,
      335,  335,   52,  335,   44,   44,   44,  335,   52,   46,
       44,   44,   44,  291,  335,   46,  335,   52,  335,   44,
       44,   44,  292,   52,   46,   44,   44,   44,  335,   52,
       46,  335,   44,   44,   44,  295,  335,   46,  293,  335,

       52,  335,  294,   44,   44,   44,   52,  335,  301,   44,
       44,   44,  335,  335,   46,   52,  335,   44,   44,   44,
      296,   52,  303,  335,  335,  335,  298,  297,   52,  335,
       44,   44,   44,  335,  300,   46,  299,  335,  335,   52,
      335,   44,   44,   44,  335,   52,   46,   44,   44,   44,
      335,  305,   46,   52,   44,   44,   44,  335,  335,  308,
      335,  302,   44,   44,   44,  335,   52,  309,   44,   44,
       44,  335,  335,   46,  335,  335,  335,   52,  335,   44,
       44,   44,  335,   52,   46,  335,  304,   44,   44,   44,
       52,  335,   46,  335,  335,  335,  335,  306,   52,  307,

       44,   44,   44,  335,   52,   46,   44,   44,   44,  335,
      335,  314,   44,   44,   44,   52,  335,   46,  335,  335,
      335,  310,  335,   52,  335,  335,  311,   44,   44,   44,
      335,  335,  316,  335,  335,  335,   52,  335,  335,  312,
      335,  335,   52,  335,   44,   44,   44,  335,   52,   46,
      335,  335,   44,   44,   44,  335,  313,   46,  335,   44,
       44,   44,  335,   52,   46,   44,   44,   44,  335,  315,
       46,   44,   44,   44,  335,  335,  321,   44,   44,   44,
       52,  335,   46,  335,   44,   44,   44,  335,   52,  323,
      335,   44,   44,   44,  335,   52,  324,  335,  335,  335,

      317,   52,  318,   44,   44,   44,  335,   52,   46,   44,
       44,   44,  319,   52,  326,  335,  335,   44,   44,   44,
       52,  320,   46,  335,  322,  335,  335,   52,   44,   44,
       44,  335,  335,   46,  335,   44,   44,   44,  335,   52,
       46,   44,   44,   44,  335,   52,  330,   44,   44,   44,
      335,  335,   46,   52,  335,  325,   44,   44,   44,  335,
      335,   46,  335,  335,   52,   44,   44,   44,  327,  335,
       46,   52,  335,  335,   44,   44,   44,   52,  329,  334,
      335,  335,  335,   52,  328,  335,  335,  335,  335,  335,
      335,  335,   52,  335,  335,  335,  335,  335,  335,  335,

      331,   52,  335,  335,  335,  335,  335,  335,  335,  335,
       52,  335,  335,  335,  332,  335,  335,  335,  335,  335,
      335,  335,  333,   36,   36,   36,   36,   36,   45,   45,
       45,   45,   45,   66,  335,   66,   66,   66,   85,  335,
       85,  335,   85,   87,   87,   87,   87,   87,   95,   95,
       95,   95,   95,  115,  335,  115,  115,  115,  130,  130,
      130,   11,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335
    } ;

static const flex_int16_t yy_chk[2327] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    4,    4,    4,
        3,    9,    7,    4,    5,    5,    8,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   10,   13,   26,
       13,   21,  347,    5,    5,  346,   21,    5,   37,    9,

       37,   27,    5,   28,    5,   32,    5,   17,   26,   17,
       17,   17,    5,    5,    7,   10,    5,   25,    8,   25,
       17,    5,   25,   25,   25,   27,    5,   28,   33,   32,
       31,    5,    5,   15,   15,   15,  345,   44,   15,   17,
       42,   19,   42,   19,   19,   19,   20,   20,   20,   31,
      344,  118,   33,   87,   19,   77,   15,   20,  212,   15,
       15,   22,  185,   22,   22,   22,   15,   15,   44,   15,
      118,  157,   15,   19,   22,   15,   20,   15,   77,   15,
       15,   15,   15,   15,   87,   15,   15,   15,   15,   15,
       15,   15,   78,   22,   45,   45,   45,   79,   82,   45,

       47,   47,   47,  130,   80,   47,   48,   48,   48,  121,
      122,   48,   49,   49,   49,   78,   95,   49,   50,   50,
       50,   79,   82,   50,   51,   51,   51,   80,  121,   51,
       45,   85,   52,   75,   75,   75,   47,   84,   48,   52,
       50,   81,   48,   76,   76,   76,   47,   51,   49,   43,
       53,   53,   53,   41,   50,   53,   54,   54,   54,   50,
       51,   54,   48,   52,   81,   49,   51,   52,   55,   55,
       55,   52,  116,   55,  117,   56,   56,   56,  119,   52,
       56,   39,   52,   38,   52,   52,   53,   24,   57,   57,
       57,   14,   54,   57,  120,   11,  116,  117,   54,   54,

       53,    0,  119,   54,   55,   58,   58,   58,   54,    0,
       58,   56,    0,   59,   59,   59,    0,  120,   59,  151,
       69,   55,   69,    0,   57,   69,   69,   69,   56,   60,
       60,   60,    0,    0,   60,   61,   61,   61,  151,  154,
       61,   58,   57,    0,    0,   62,   62,   62,   58,   59,
       62,   63,   63,   63,    0,    0,   63,    0,  154,   64,
       64,   64,    0,    0,   64,   60,   59,    0,   60,    0,
       60,   61,    0,    0,   65,   65,   65,    0,    0,   65,
        0,   62,    0,    0,    0,   89,    0,   63,   67,   67,
       67,    0,   89,   61,   63,   64,   65,    0,   62,   67,

        0,   68,   64,   68,   68,   68,   71,   71,   71,   70,
       65,   70,   70,   70,   68,   65,   89,   71,   67,    0,
       89,    0,   70,    0,   89,    0,   90,   90,   90,    0,
       65,   90,   89,   68,    0,   89,   71,   89,   89,    0,
        0,   70,   91,   91,   91,    0,    0,   91,   92,   92,
       92,    0,    0,   92,    0,   93,   93,   93,    0,    0,
       93,    0,   90,    0,   94,   94,   94,   90,    0,   94,
        0,   91,   96,   96,   96,    0,    0,   96,   91,    0,
        0,   99,   99,   99,   92,   93,   99,   98,   98,   98,
        0,   93,   98,   92,   94,   91,    0,    0,    0,    0,

       94,  100,  100,  100,    0,    0,  100,    0,   96,   93,
        0,    0,    0,    0,    0,    0,    0,   99,   94,   97,
       97,   97,    0,   98,    0,    0,   97,   97,   97,   97,
       97,   97,   98,   99,  101,  101,  101,  100,    0,  101,
        0,  100,    0,    0,    0,   97,   97,   97,   97,   97,
       97,  102,  102,  102,    0,    0,  102,  103,  103,  103,
        0,    0,  103,  104,  104,  104,    0,    0,  104,    0,
      101,    0,  105,  105,  105,    0,    0,  105,    0,  101,
        0,    0,  105,    0,  106,  106,  106,  102,    0,  106,
      107,  107,  107,  103,    0,  107,  108,  108,  108,  104,

        0,  108,    0,    0,  109,  109,  109,  102,  105,  109,
        0,    0,  103,  110,  110,  110,    0,    0,  110,  104,
      106,    0,  111,  111,  111,    0,  107,  111,  112,  112,
      112,    0,  108,  112,    0,  107,    0,  113,  113,  113,
      109,    0,  113,    0,    0,  106,    0,  108,    0,  110,
      114,  114,  114,    0,    0,  114,    0,    0,  111,  109,
        0,    0,    0,    0,  112,    0,  125,  125,  125,    0,
      110,  125,    0,  113,    0,    0,    0,  111,  113,  126,
      126,  126,    0,    0,  126,    0,  114,  112,  127,  127,
      127,    0,    0,  127,    0,    0,  113,  114,  128,  128,

      128,    0,  125,  128,  129,  129,  129,  126,    0,  129,
        0,  133,  133,  133,    0,  126,  133,    0,    0,    0,
      125,  134,  134,  134,  127,    0,  134,  135,  135,  135,
        0,  126,  135,  127,  128,    0,    0,    0,    0,    0,
      129,  132,  132,  132,    0,    0,    0,  133,  132,  132,
      132,  132,  132,  132,  136,  136,  136,  134,    0,  136,
      138,  138,  138,  135,  133,  138,    0,  132,  132,  132,
      132,  132,  132,  137,  137,  137,    0,  134,  137,  139,
      139,  139,    0,  137,  139,  135,  140,  140,  140,    0,
      136,  140,    0,  141,  141,  141,  138,  136,  141,  142,

      142,  142,    0,  141,  142,  143,  143,  143,    0,  137,
      143,  144,  144,  144,    0,  139,  144,    0,    0,    0,
      138,  144,  140,    0,    0,  140,  145,  145,  145,  141,
        0,  145,  146,  146,  146,  142,  139,  146,  147,  147,
      147,  143,    0,  147,  142,    0,    0,  144,  143,  148,
      148,  148,    0,    0,  148,  149,  149,  149,    0,    0,
      149,    0,  145,    0,  150,  150,  150,    0,  146,  150,
      160,  160,  160,    0,  147,  160,    0,    0,    0,    0,
      145,  147,  159,  159,  159,  148,    0,  159,    0,  146,
        0,  149,    0,    0,    0,    0,  159,  159,  149,    0,

      150,    0,    0,    0,  148,  159,  160,    0,    0,  150,
      161,  161,  161,    0,    0,  161,    0,    0,  159,  165,
      165,  165,    0,    0,  165,  166,  166,  166,    0,    0,
      166,    0,    0,    0,    0,  166,  167,  167,  167,    0,
        0,  167,  168,  168,  168,    0,  161,  168,    0,    0,
        0,    0,    0,    0,    0,  165,    0,  161,  164,  164,
      164,  166,    0,    0,    0,  164,  164,  164,  164,  164,
      164,    0,  167,    0,  165,  169,  169,  169,  168,    0,
      169,  167,    0,    0,  164,  164,  164,  164,  164,  164,
      170,  170,  170,    0,    0,  170,    0,    0,  168,  171,

      171,  171,    0,    0,  171,  172,  172,  172,    0,    0,
      172,  169,  173,  173,  173,    0,    0,  173,  174,  174,
      174,    0,    0,  174,    0,    0,  170,    0,    0,  170,
        0,  169,  175,  175,  175,  171,    0,  175,  176,  176,
      176,  172,    0,  176,  177,  177,  177,  172,  173,  177,
        0,  171,    0,    0,  174,  178,  178,  178,    0,    0,
      178,  174,    0,    0,  173,  179,  179,  179,  175,    0,
      179,  180,  180,  180,  176,    0,  180,    0,    0,    0,
      177,    0,  176,  181,  181,  181,    0,    0,  181,    0,
        0,  178,  176,  182,  182,  182,    0,    0,  182,    0,

        0,  179,  177,  182,  187,  187,  187,  180,    0,  187,
      188,  188,  188,    0,  180,  188,  189,  189,  189,  181,
      179,  189,    0,  191,  191,  191,    0,    0,  191,  182,
        0,    0,  193,  193,  193,    0,    0,  193,  181,    0,
      187,    0,    0,    0,    0,    0,  188,    0,    0,    0,
        0,    0,  189,    0,    0,  194,  194,  194,  189,  191,
      194,    0,  195,  195,  195,    0,    0,  195,  193,    0,
        0,    0,    0,    0,    0,  191,  192,  192,  192,  193,
        0,    0,    0,  192,  192,  192,  192,  192,  192,    0,
        0,  194,    0,    0,  196,  196,  196,  194,  195,  196,

        0,    0,  192,  192,  192,  192,  192,  192,    0,  197,
      197,  197,  195,    0,  197,    0,    0,  198,  198,  198,
        0,    0,  198,  199,  199,  199,    0,    0,  199,    0,
      196,  200,  200,  200,    0,    0,  200,    0,  201,  201,
      201,    0,    0,  201,    0,  197,    0,    0,    0,    0,
        0,  196,  197,  198,    0,  202,  202,  202,    0,  199,
      202,    0,  199,  204,  204,  204,    0,  200,  204,    0,
        0,    0,  198,  200,  201,    0,    0,  201,  205,  205,
      205,    0,    0,  205,  206,  206,  206,    0,    0,  206,
        0,  202,  208,  208,  208,    0,    0,  208,    0,  204,

      209,  209,  209,    0,    0,  209,  210,  210,  210,    0,
      202,  210,    0,    0,  205,    0,  204,    0,    0,    0,
      206,    0,  211,  211,  211,    0,    0,  211,  208,  216,
      216,  216,    0,  205,  216,    0,  209,    0,  217,  217,
      217,  206,  210,  217,  218,  218,  218,    0,  208,  218,
      219,  219,  219,  210,    0,  219,    0,  209,  211,  220,
      220,  220,    0,    0,  220,  216,    0,    0,  221,  221,
      221,  211,    0,  221,  217,    0,    0,    0,  221,    0,
      218,  216,    0,  217,    0,    0,  219,  222,  222,  222,
        0,    0,  222,    0,    0,  220,    0,    0,    0,    0,

        0,  218,  220,  219,  221,  223,  223,  223,    0,    0,
      223,    0,  224,  224,  224,    0,    0,  224,    0,  225,
      225,  225,    0,  222,  225,  226,  226,  226,    0,    0,
      226,  227,  227,  227,    0,    0,  227,    0,    0,    0,
        0,  223,  222,    0,  228,  228,  228,  223,  224,  228,
        0,    0,  229,  229,  229,  225,    0,  229,    0,    0,
        0,  226,    0,  224,  230,  230,  230,  227,    0,  230,
      231,  231,  231,    0,  225,  231,  226,    0,    0,    0,
      228,  232,  232,  232,    0,    0,  232,  227,  229,  233,
      233,  233,    0,    0,  233,    0,  234,  234,  234,  228,

      230,  234,  230,    0,    0,  229,  231,  236,  236,  236,
        0,    0,  236,  231,  237,  237,  237,  232,    0,  237,
        0,  238,  238,  238,    0,  233,  238,    0,  239,  239,
      239,    0,  234,  239,    0,  240,  240,  240,    0,  234,
      240,    0,    0,  236,    0,    0,  233,  241,  241,  241,
      237,    0,  241,  242,  242,  242,    0,  238,  242,    0,
      243,  243,  243,  236,  239,  243,    0,  238,    0,    0,
      243,  240,  244,  244,  244,    0,    0,  244,    0,  239,
      245,  245,  245,  241,    0,  245,    0,  241,    0,  242,
      246,  246,  246,    0,  240,  246,  243,    0,  247,  247,

      247,    0,    0,  247,  248,  248,  248,    0,  244,  248,
        0,    0,  242,    0,    0,  244,  245,  249,  249,  249,
        0,    0,  249,  245,    0,    0,  246,  251,  251,  251,
        0,    0,  251,  246,  247,    0,  252,  252,  252,    0,
      248,  252,  254,  254,  254,    0,  252,  254,    0,  255,
      255,  255,    0,  249,  255,  248,  256,  256,  256,    0,
        0,  256,    0,  251,  258,  258,  258,    0,    0,  258,
        0,    0,  252,    0,  249,    0,    0,    0,  254,    0,
      251,  259,  259,  259,    0,  255,  259,    0,  260,  260,
      260,    0,  256,  260,  261,  261,  261,    0,    0,  261,

      258,    0,    0,  254,  262,  262,  262,    0,    0,  262,
      255,    0,    0,    0,    0,  258,    0,  259,    0,    0,
      259,  263,  263,  263,  260,    0,  263,    0,    0,    0,
      261,  260,  264,  264,  264,    0,    0,  264,    0,    0,
      262,  261,    0,  265,  265,  265,    0,  262,  265,  266,
      266,  266,    0,    0,  266,    0,    0,  263,    0,  268,
      268,  268,    0,  263,  268,  269,  269,  269,  264,    0,
      269,  270,  270,  270,    0,    0,  270,    0,    0,  265,
        0,  271,  271,  271,    0,  266,  271,    0,  272,  272,
      272,    0,    0,  272,    0,  268,    0,    0,  268,  265,

        0,  269,    0,  273,  273,  273,    0,  270,  273,  275,
      275,  275,    0,    0,  275,    0,    0,  271,  269,    0,
        0,    0,    0,  271,  272,  270,  276,  276,  276,    0,
        0,  276,  277,  277,  277,    0,    0,  277,    0,  273,
        0,  278,  278,  278,    0,  275,  278,  279,  279,  279,
        0,    0,  279,  280,  280,  280,    0,    0,  280,  273,
        0,    0,  276,    0,  282,  282,  282,    0,  277,  282,
      284,  284,  284,  276,    0,  284,    0,  278,    0,  286,
      286,  286,  277,  279,  286,  285,  285,  285,    0,  280,
      285,    0,  287,  287,  287,  280,    0,  287,  278,    0,

      282,    0,  279,  289,  289,  289,  284,    0,  289,  291,
      291,  291,    0,    0,  291,  286,    0,  292,  292,  292,
      282,  285,  292,    0,    0,    0,  285,  284,  287,    0,
      293,  293,  293,    0,  287,  293,  286,    0,    0,  289,
        0,  294,  294,  294,    0,  291,  294,  295,  295,  295,
        0,  294,  295,  292,  296,  296,  296,    0,    0,  296,
        0,  291,  297,  297,  297,    0,  293,  297,  298,  298,
      298,    0,    0,  298,    0,    0,    0,  294,    0,  299,
      299,  299,    0,  295,  299,    0,  293,  300,  300,  300,
      296,    0,  300,    0,    0,    0,    0,  294,  297,  295,

      302,  302,  302,    0,  298,  302,  304,  304,  304,    0,
        0,  304,  305,  305,  305,  299,    0,  305,    0,    0,
        0,  298,    0,  300,    0,    0,  299,  306,  306,  306,
        0,    0,  306,    0,    0,    0,  302,    0,    0,  300,
        0,    0,  304,    0,  307,  307,  307,    0,  305,  307,
        0,    0,  310,  310,  310,    0,  302,  310,    0,  311,
      311,  311,    0,  306,  311,  312,  312,  312,    0,  305,
      312,  313,  313,  313,    0,    0,  313,  315,  315,  315,
      307,    0,  315,    0,  317,  317,  317,    0,  310,  317,
        0,  318,  318,  318,    0,  311,  318,    0,    0,    0,

      307,  312,  310,  319,  319,  319,    0,  313,  319,  320,
      320,  320,  311,  315,  320,    0,    0,  322,  322,  322,
      317,  312,  322,    0,  315,    0,    0,  318,  325,  325,
      325,    0,    0,  325,    0,  327,  327,  327,    0,  319,
      327,  328,  328,  328,    0,  320,  328,  329,  329,  329,
        0,    0,  329,  322,    0,  319,  331,  331,  331,    0,
        0,  331,    0,    0,  325,  332,  332,  332,  322,    0,
      332,  327,    0,    0,  333,  333,  333,  328,  327,  333,
        0,    0,    0,  329,  325,    0,    0,    0,    0,    0,
        0,    0,  331,    0,    0,    0,    0,    0,    0,    0,

      329,  332,    0,    0,    0,    0,    0,    0,    0,    0,
      333,    0,    0,    0,  331,    0,    0,    0,    0,    0,
        0,    0,  332,  336,  336,  336,  336,  336,  337,  337,
      337,  337,  337,  338,    0,  338,  338,  338,  339,    0,
      339,    0,  339,  340,  340,  340,  340,  340,  341,  341,
      341,  341,  341,  342,    0,  342,  342,  342,  343,  343,
      343,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int d2_parser__flex_debug;
int d2_parser__flex_debug = 1;

static const flex_int16_t yy_rule_linenum[58] =
    {   0,
      117,  119,  121,  126,  127,  132,  133,  134,  146,  149,
      154,  160,  169,  179,  189,  198,  207,  216,  226,  236,
      246,  255,  264,  274,  283,  292,  302,  311,  320,  329,
      339,  348,  357,  366,  375,  386,  395,  404,  413,  423,
      521,  526,  531,  536,  537,  538,  539,  540,  541,  543,
      561,  574,  579,  583,  585,  587,  589
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *d2_parser_text;
#line 1 "d2_lexer.ll"
/* Copyright (C) 2017 Internet Systems Consortium, Inc. ("ISC")

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#line 8 "d2_lexer.ll"
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>
#include <d2/parser_context.h>
#include <asiolink/io_address.h>
#include <boost/lexical_cast.hpp>
#include <exceptions/exceptions.h>

// Work around an incompatibility in flex (at least versions
// 2.5.31 through 2.5.33): it generates code that does
// not conform to C89.  See Debian bug 333231
// <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
# undef yywrap
# define yywrap() 1

namespace {

bool start_token_flag = false;

isc::d2::D2ParserContext::ParserType start_token_value;
unsigned int comment_start_line = 0;

};

// To avoid the call to exit... oops!
#define YY_FATAL_ERROR(msg) isc::d2::D2ParserContext::fatal(msg)
#line 1282 "d2_lexer.cc"
/* noyywrap disables automatic rewinding for the next file to parse. Since we
   always parse only a single string, there's no need to do any wraps. And
   using yywrap requires linking with -lfl, which provides the default yywrap
   implementation that always returns 1 anyway. */
/* nounput simplifies the lexer, by removing support for putting a character
   back into the input stream. We never use such capability anyway. */
/* batch means that we'll never use the generated lexer interactively. */
/* avoid to get static global variables to remain with C++. */
/* in last resort %option reentrant */
/* Enables debug mode. To see the debug messages, one needs to also set
   yy_flex_debug to 1, then the debug messages will be printed on stderr. */
/* I have no idea what this option does, except it was specified in the bison
   examples and Postgres folks added it to remove gcc 4.3 warnings. Let's
   be on the safe side and keep it. */
#define YY_NO_INPUT 1

/* These are not token expressions yet, just convenience expressions that
   can be used during actual token definitions. Note some can match
   incorrect inputs (e.g., IP addresses) which must be checked. */
/* for errors */
#line 86 "d2_lexer.ll"
// This code run each time a pattern is matched. It updates the location
// by moving it ahead by yyleng bytes. yyleng specifies the length of the
// currently matched token.
#define YY_USER_ACTION  driver.loc_.columns(yyleng);
#line 1308 "d2_lexer.cc"
#line 1309 "d2_lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define DIR_ENTER 2
#define DIR_INCLUDE 3
#define DIR_EXIT 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int d2_parser_lex_destroy ( void );

int d2_parser_get_debug ( void );

void d2_parser_set_debug ( int debug_flag  );

YY_EXTRA_TYPE d2_parser_get_extra ( void );

void d2_parser_set_extra ( YY_EXTRA_TYPE user_defined  );

FILE *d2_parser_get_in ( void );

void d2_parser_set_in  ( FILE * _in_str  );

FILE *d2_parser_get_out ( void );

void d2_parser_set_out  ( FILE * _out_str  );

			int d2_parser_get_leng ( void );

char *d2_parser_get_text ( void );

int d2_parser_get_lineno ( void );

void d2_parser_set_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int d2_parser_wrap ( void );
#else
extern int d2_parser_wrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( d2_parser_text, (size_t) d2_parser_leng, 1, d2_parser_out )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( d2_parser_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( d2_parser_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, d2_parser_in)) == 0 && ferror(d2_parser_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(d2_parser_in); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int d2_parser_lex (void);

#define YY_DECL int d2_parser_lex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after d2_parser_text and d2_parser_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! d2_parser_in )
/* %if-c-only */
			d2_parser_in = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! d2_parser_out )
/* %if-c-only */
			d2_parser_out = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			d2_parser_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				d2_parser__create_buffer(d2_parser_in,YY_BUF_SIZE );
		}

		d2_parser__load_buffer_state( );
		}

	{
/* %% [7.0] user's declarations go here */
#line 92 "d2_lexer.ll"



#line 96 "d2_lexer.ll"
    // This part of the code is copied over to the verbatim to the top
    // of the generated yylex function. Explanation:
    // http://www.gnu.org/software/bison/manual/html_node/Multiple-start_002dsymbols.html

    // Code run each time yylex is called.
    driver.loc_.step();

    if (start_token_flag) {
        start_token_flag = false;
        switch (start_token_value) {
        case D2ParserContext::PARSER_JSON:
        default:
            return isc::d2::D2Parser::make_TOPLEVEL_JSON(driver.loc_);
        case D2ParserContext::PARSER_DHCPDDNS:
            return isc::d2::D2Parser::make_TOPLEVEL_DHCPDDNS(driver.loc_);
        case D2ParserContext::PARSER_SUB_DHCPDDNS:
            return isc::d2::D2Parser::make_SUB_DHCPDDNS(driver.loc_);
        }
    }


#line 1617 "d2_lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of d2_parser_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 336 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 335 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for d2_parser_lineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( d2_parser__flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 58 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], d2_parser_text );
			else if ( yy_act == 58 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         d2_parser_text );
			else if ( yy_act == 59 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 117 "d2_lexer.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 119 "d2_lexer.ll"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 121 "d2_lexer.ll"
{
  BEGIN(COMMENT);
  comment_start_line = driver.loc_.end.line;;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 126 "d2_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 127 "d2_lexer.ll"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 128 "d2_lexer.ll"
{
    isc_throw(D2ParseError, "Comment not closed. (/* in line " << comment_start_line);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 132 "d2_lexer.ll"
BEGIN(DIR_ENTER);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 133 "d2_lexer.ll"
BEGIN(DIR_INCLUDE);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 134 "d2_lexer.ll"
{
    // Include directive.

    // Extract the filename.
    std::string tmp(yytext+1);
    tmp.resize(tmp.size() - 1);

    driver.includeFile(tmp);
}
	YY_BREAK
case YY_STATE_EOF(DIR_ENTER):
case YY_STATE_EOF(DIR_INCLUDE):
case YY_STATE_EOF(DIR_EXIT):
#line 143 "d2_lexer.ll"
{
    isc_throw(D2ParseError, "Directive not closed.");
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 146 "d2_lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 149 "d2_lexer.ll"
{
    // Ok, we found a with space. Let's ignore it and update loc variable.
    driver.loc_.step();
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 154 "d2_lexer.ll"
{
    // Newline found. Let's update the location and continue.
    driver.loc_.lines(yyleng);
    driver.loc_.step();
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 160 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::CONFIG:
        return isc::d2::D2Parser::make_DHCPDDNS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("DhcpDdns", driver.loc_);
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 169 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
    case isc::d2::D2ParserContext::DNS_SERVERS:
        return isc::d2::D2Parser::make_IP_ADDRESS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("ip-address", driver.loc_);
    }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 179 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
    case isc::d2::D2ParserContext::DNS_SERVERS:
        return isc::d2::D2Parser::make_PORT(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("port", driver.loc_);
    }
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 189 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
        return isc::d2::D2Parser::make_DNS_SERVER_TIMEOUT(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("dns-server-timeout", driver.loc_);
    }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 198 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
        return isc::d2::D2Parser::make_NCR_PROTOCOL(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("ncr-protocol", driver.loc_);
    }
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 207 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
        return isc::d2::D2Parser::make_NCR_FORMAT(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("ncr-format", driver.loc_);
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 216 "d2_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::d2::D2ParserContext::NCR_PROTOCOL) {
        return isc::d2::D2Parser::make_UDP(driver.loc_);
    }
    std::string tmp(yytext+1);
    tmp.resize(tmp.size() - 1);
    return isc::d2::D2Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 226 "d2_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::d2::D2ParserContext::NCR_PROTOCOL) {
        return isc::d2::D2Parser::make_TCP(driver.loc_);
    }
    std::string tmp(yytext+1);
    tmp.resize(tmp.size() - 1);
    return isc::d2::D2Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 236 "d2_lexer.ll"
{
    /* dhcp-ddns value keywords are case insensitive */
    if (driver.ctx_ == isc::d2::D2ParserContext::NCR_FORMAT) {
        return isc::d2::D2Parser::make_JSON(driver.loc_);
    }
    std::string tmp(yytext+1);
    tmp.resize(tmp.size() - 1);
    return isc::d2::D2Parser::make_STRING(tmp, driver.loc_);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 246 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
        return isc::d2::D2Parser::make_FORWARD_DDNS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("forward-ddns", driver.loc_);
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 255 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
        return isc::d2::D2Parser::make_REVERSE_DDNS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("reverse-ddns", driver.loc_);
    }
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 264 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::FORWARD_DDNS:
    case isc::d2::D2ParserContext::REVERSE_DDNS:
        return isc::d2::D2Parser::make_DDNS_DOMAINS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("ddns-domains", driver.loc_);
    }
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 274 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DDNS_DOMAINS:
        return isc::d2::D2Parser::make_KEY_NAME(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("key-name", driver.loc_);
    }
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 283 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DDNS_DOMAINS:
        return isc::d2::D2Parser::make_DNS_SERVERS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("dns-servers", driver.loc_);
    }
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 292 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DNS_SERVERS:
        return isc::d2::D2Parser::make_HOSTNAME(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("hostname", driver.loc_);
    }
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 302 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::DHCPDDNS:
        return isc::d2::D2Parser::make_TSIG_KEYS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("tsig-keys", driver.loc_);
    }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 311 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::TSIG_KEYS:
        return isc::d2::D2Parser::make_ALGORITHM(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("algorithm", driver.loc_);
    }
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 320 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::TSIG_KEYS:
        return isc::d2::D2Parser::make_DIGEST_BITS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("digest-bits", driver.loc_);
    }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 329 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::TSIG_KEYS:
        return isc::d2::D2Parser::make_SECRET(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("secret", driver.loc_);
    }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 339 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::CONFIG:
        return isc::d2::D2Parser::make_LOGGING(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("Logging", driver.loc_);
    }
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 348 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::LOGGING:
        return isc::d2::D2Parser::make_LOGGERS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("loggers", driver.loc_);
    }
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 357 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::LOGGERS:
        return isc::d2::D2Parser::make_OUTPUT_OPTIONS(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("output_options", driver.loc_);
    }
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 366 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::OUTPUT_OPTIONS:
        return isc::d2::D2Parser::make_OUTPUT(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("output", driver.loc_);
    }
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 375 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::LOGGERS:
    case isc::d2::D2ParserContext::TSIG_KEYS:
    case isc::d2::D2ParserContext::DDNS_DOMAINS:
        return isc::d2::D2Parser::make_NAME(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("name", driver.loc_);
    }
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 386 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::LOGGERS:
        return isc::d2::D2Parser::make_DEBUGLEVEL(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("debuglevel", driver.loc_);
    }
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 395 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::LOGGERS:
        return isc::d2::D2Parser::make_SEVERITY(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("severity", driver.loc_);
    }
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 404 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::CONFIG:
        return isc::d2::D2Parser::make_DHCP4(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("Dhcp4", driver.loc_);
    }
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 413 "d2_lexer.ll"
{
    switch(driver.ctx_) {
    case isc::d2::D2ParserContext::CONFIG:
        return isc::d2::D2Parser::make_DHCP6(driver.loc_);
    default:
        return isc::d2::D2Parser::make_STRING("Dhcp6", driver.loc_);
    }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 423 "d2_lexer.ll"
{
    // A string has been matched. It contains the actual string and single quotes.
    // We need to get those quotes out of the way and just use its content, e.g.
    // for 'foo' we should get foo
    std::string raw(yytext+1);
    size_t len = raw.size() - 1;
    raw.resize(len);
    std::string decoded;
    decoded.reserve(len);
    for (size_t pos = 0; pos < len; ++pos) {
        int b = 0;
        char c = raw[pos];
        switch (c) {
        case '"':
            // impossible condition
            driver.error(driver.loc_, "Bad quote in \"" + raw + "\"");
        case '\\':
            ++pos;
            if (pos >= len) {
                // impossible condition
                driver.error(driver.loc_, "Overflow escape in \"" + raw + "\"");
            }
            c = raw[pos];
            switch (c) {
            case '"':
            case '\\':
            case '/':
                decoded.push_back(c);
                break;
            case 'b':
                decoded.push_back('\b');
                break;
            case 'f':
                decoded.push_back('\f');
                break;
            case 'n':
                decoded.push_back('\n');
                break;
            case 'r':
                decoded.push_back('\r');
                break;
            case 't':
                decoded.push_back('\t');
                break;
            case 'u':
                // support only \u0000 to \u00ff
                ++pos;
                if (pos + 4 > len) {
                    // impossible condition
                    driver.error(driver.loc_,
                                 "Overflow unicode escape in \"" + raw + "\"");
                }
                if ((raw[pos] != '0') || (raw[pos + 1] != '0')) {
                    driver.error(driver.loc_, "Unsupported unicode escape in \"" + raw + "\"");
                }
                pos += 2;
                c = raw[pos];
                if ((c >= '0') && (c <= '9')) {
                    b = (c - '0') << 4;
                } else if ((c >= 'A') && (c <= 'F')) {
                    b = (c - 'A' + 10) << 4;
                } else if ((c >= 'a') && (c <= 'f')) {
                    b = (c - 'a' + 10) << 4;
                } else {
                    // impossible condition
                    driver.error(driver.loc_, "Not hexadecimal in unicode escape in \"" + raw + "\"");
                }
                pos++;
                c = raw[pos];
                if ((c >= '0') && (c <= '9')) {
                    b |= c - '0';
                } else if ((c >= 'A') && (c <= 'F')) {
                    b |= c - 'A' + 10;
                } else if ((c >= 'a') && (c <= 'f')) {
                    b |= c - 'a' + 10;
                } else {
                    // impossible condition
                    driver.error(driver.loc_, "Not hexadecimal in unicode escape in \"" + raw + "\"");
                }
                decoded.push_back(static_cast<char>(b & 0xff));
                break;
            default:
                // impossible condition
                driver.error(driver.loc_, "Bad escape in \"" + raw + "\"");
            }
            break;
        default:
            if ((c >= 0) && (c < 0x20)) {
                // impossible condition
                driver.error(driver.loc_, "Invalid control in \"" + raw + "\"");
            }
            decoded.push_back(c);
        }
    }

    return isc::d2::D2Parser::make_STRING(decoded, driver.loc_);
}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 521 "d2_lexer.ll"
{
    // Bad string with a forbidden control character inside
    driver.error(driver.loc_, "Invalid control in " + std::string(yytext));
}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 526 "d2_lexer.ll"
{
    // Bad string with a bad escape inside
    driver.error(driver.loc_, "Bad escape in " + std::string(yytext));
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 531 "d2_lexer.ll"
{
    // Bad string with an open escape at the end
    driver.error(driver.loc_, "Overflow escape in " + std::string(yytext));
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 536 "d2_lexer.ll"
{ return isc::d2::D2Parser::make_LSQUARE_BRACKET(driver.loc_); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 537 "d2_lexer.ll"
{ return isc::d2::D2Parser::make_RSQUARE_BRACKET(driver.loc_); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 538 "d2_lexer.ll"
{ return isc::d2::D2Parser::make_LCURLY_BRACKET(driver.loc_); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 539 "d2_lexer.ll"
{ return isc::d2::D2Parser::make_RCURLY_BRACKET(driver.loc_); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 540 "d2_lexer.ll"
{ return isc::d2::D2Parser::make_COMMA(driver.loc_); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 541 "d2_lexer.ll"
{ return isc::d2::D2Parser::make_COLON(driver.loc_); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 543 "d2_lexer.ll"
{
    // An integer was found.
    std::string tmp(yytext);
    int64_t integer = 0;
    try {
        // In substring we want to use negative values (e.g. -1).
        // In enterprise-id we need to use values up to 0xffffffff.
        // To cover both of those use cases, we need at least
        // int64_t.
        integer = boost::lexical_cast<int64_t>(tmp);
    } catch (const boost::bad_lexical_cast &) {
        driver.error(driver.loc_, "Failed to convert " + tmp + " to an integer.");
    }

    // The parser needs the string form as double conversion is no lossless
    return isc::d2::D2Parser::make_INTEGER(integer, driver.loc_);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 561 "d2_lexer.ll"
{
    // A floating point was found.
    std::string tmp(yytext);
    double fp = 0.0;
    try {
        fp = boost::lexical_cast<double>(tmp);
    } catch (const boost::bad_lexical_cast &) {
        driver.error(driver.loc_, "Failed to convert " + tmp + " to a floating point.");
    }

    return isc::d2::D2Parser::make_FLOAT(fp, driver.loc_);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 574 "d2_lexer.ll"
{
    string tmp(yytext);
    return isc::d2::D2Parser::make_BOOLEAN(tmp == "true", driver.loc_);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 579 "d2_lexer.ll"
{
   return isc::d2::D2Parser::make_NULL_TYPE(driver.loc_);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 583 "d2_lexer.ll"
driver.error (driver.loc_, "JSON true reserved keyword is lower case only");
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 585 "d2_lexer.ll"
driver.error (driver.loc_, "JSON false reserved keyword is lower case only");
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 587 "d2_lexer.ll"
driver.error (driver.loc_, "JSON null reserved keyword is lower case only");
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 589 "d2_lexer.ll"
driver.error (driver.loc_, "Invalid character: " + std::string(yytext));
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 591 "d2_lexer.ll"
{
    if (driver.states_.empty()) {
        return isc::d2::D2Parser::make_END(driver.loc_);
    }
    driver.loc_ = driver.locs_.back();
    driver.locs_.pop_back();
    driver.file_ = driver.files_.back();
    driver.files_.pop_back();
    if (driver.sfile_) {
        fclose(driver.sfile_);
        driver.sfile_ = 0;
    }
    if (!driver.sfiles_.empty()) {
        driver.sfile_ = driver.sfiles_.back();
        driver.sfiles_.pop_back();
    }
    d2_parser__delete_buffer(YY_CURRENT_BUFFER);
    d2_parser__switch_to_buffer(driver.states_.back());
    driver.states_.pop_back();

    BEGIN(DIR_EXIT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 614 "d2_lexer.ll"
ECHO;
	YY_BREAK
#line 2384 "d2_lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed d2_parser_in at a new source and called
			 * d2_parser_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = d2_parser_in;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( d2_parser_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * d2_parser_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of d2_parser_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					d2_parser_realloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			d2_parser_restart(d2_parser_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) d2_parser_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 336 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 336 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 335);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					d2_parser_restart(d2_parser_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( d2_parser_wrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve d2_parser_text */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and d2_parser_lineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void d2_parser_restart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        d2_parser_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            d2_parser__create_buffer(d2_parser_in,YY_BUF_SIZE );
	}

	d2_parser__init_buffer(YY_CURRENT_BUFFER,input_file );
	d2_parser__load_buffer_state( );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void d2_parser__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		d2_parser_pop_buffer_state();
	 *		d2_parser_push_buffer_state(new_buffer);
     */
	d2_parser_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	d2_parser__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (d2_parser_wrap()) processing, but the only time this flag
	 * is looked at is after d2_parser_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void d2_parser__load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	d2_parser_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE d2_parser__create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) d2_parser_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in d2_parser__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) d2_parser_alloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in d2_parser__create_buffer()" );

	b->yy_is_our_buffer = 1;

	d2_parser__init_buffer(b,file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with d2_parser__create_buffer()
 * 
 */
/* %if-c-only */
    void d2_parser__delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		d2_parser_free((void *) b->yy_ch_buf  );

	d2_parser_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a d2_parser_restart() or at EOF.
 */
/* %if-c-only */
    static void d2_parser__init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	d2_parser__flush_buffer(b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then d2_parser__init_buffer was _probably_
     * called from d2_parser_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void d2_parser__flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		d2_parser__load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void d2_parser_push_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	d2_parser_ensure_buffer_stack();

	/* This block is copied from d2_parser__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from d2_parser__switch_to_buffer. */
	d2_parser__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void d2_parser_pop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	d2_parser__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		d2_parser__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void d2_parser_ensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)d2_parser_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in d2_parser_ensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)d2_parser_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in d2_parser_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE d2_parser__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) d2_parser_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in d2_parser__scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	d2_parser__switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to d2_parser_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       d2_parser__scan_bytes() instead.
 */
YY_BUFFER_STATE d2_parser__scan_string (const char * yystr )
{
    
	return d2_parser__scan_bytes(yystr,(int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to d2_parser_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE d2_parser__scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) d2_parser_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in d2_parser__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = d2_parser__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in d2_parser__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up d2_parser_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		d2_parser_text[d2_parser_leng] = (yy_hold_char); \
		(yy_c_buf_p) = d2_parser_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		d2_parser_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int d2_parser_get_lineno  (void)
{
    
    return d2_parser_lineno;
}

/** Get the input stream.
 * 
 */
FILE *d2_parser_get_in  (void)
{
        return d2_parser_in;
}

/** Get the output stream.
 * 
 */
FILE *d2_parser_get_out  (void)
{
        return d2_parser_out;
}

/** Get the length of the current token.
 * 
 */
int d2_parser_get_leng  (void)
{
        return d2_parser_leng;
}

/** Get the current token.
 * 
 */

char *d2_parser_get_text  (void)
{
        return d2_parser_text;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void d2_parser_set_lineno (int  _line_number )
{
    
    d2_parser_lineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see d2_parser__switch_to_buffer
 */
void d2_parser_set_in (FILE *  _in_str )
{
        d2_parser_in = _in_str ;
}

void d2_parser_set_out (FILE *  _out_str )
{
        d2_parser_out = _out_str ;
}

int d2_parser_get_debug  (void)
{
        return d2_parser__flex_debug;
}

void d2_parser_set_debug (int  _bdebug )
{
        d2_parser__flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from d2_parser_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    d2_parser_in = stdin;
    d2_parser_out = stdout;
#else
    d2_parser_in = NULL;
    d2_parser_out = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * d2_parser_lex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* d2_parser_lex_destroy is for both reentrant and non-reentrant scanners. */
int d2_parser_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		d2_parser__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		d2_parser_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	d2_parser_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * d2_parser_lex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *d2_parser_alloc (yy_size_t  size )
{
			return malloc(size);
}

void *d2_parser_realloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void d2_parser_free (void * ptr )
{
			free( (char *) ptr );	/* see d2_parser_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 614 "d2_lexer.ll"


using namespace isc::dhcp;

void
D2ParserContext::scanStringBegin(const std::string& str, ParserType parser_type)
{
    start_token_flag = true;
    start_token_value = parser_type;

    file_ = "<string>";
    sfile_ = 0;
    loc_.initialize(&file_);
    yy_flex_debug = trace_scanning_;
    YY_BUFFER_STATE buffer;
    buffer = yy_scan_bytes(str.c_str(), str.size());
    if (!buffer) {
        fatal("cannot scan string");
        // fatal() throws an exception so this can't be reached
    }
}

void
D2ParserContext::scanFileBegin(FILE * f,
                              const std::string& filename,
                              ParserType parser_type)
{
    start_token_flag = true;
    start_token_value = parser_type;

    file_ = filename;
    sfile_ = f;
    loc_.initialize(&file_);
    yy_flex_debug = trace_scanning_;
    YY_BUFFER_STATE buffer;

    // See d2_lexer.cc header for available definitions
    buffer = d2_parser__create_buffer(f, 65536 /*buffer size*/);
    if (!buffer) {
        fatal("cannot scan file " + filename);
    }
    d2_parser__switch_to_buffer(buffer);
}

void
D2ParserContext::scanEnd() {
    if (sfile_)
        fclose(sfile_);
    sfile_ = 0;
    static_cast<void>(d2_parser_lex_destroy());
    // Close files
    while (!sfiles_.empty()) {
        FILE* f = sfiles_.back();
        if (f) {
            fclose(f);
        }
        sfiles_.pop_back();
    }
    // Delete states
    while (!states_.empty()) {
        d2_parser__delete_buffer(states_.back());
        states_.pop_back();
    }
}

void
D2ParserContext::includeFile(const std::string& filename) {
    if (states_.size() > 10) {
        fatal("Too many nested include.");
    }

    FILE* f = fopen(filename.c_str(), "r");
    if (!f) {
        fatal("Can't open include file " + filename);
    }
    if (sfile_) {
        sfiles_.push_back(sfile_);
    }
    sfile_ = f;
    states_.push_back(YY_CURRENT_BUFFER);
    YY_BUFFER_STATE buffer;
    buffer = d2_parser__create_buffer(f, 65536 /*buffer size*/);
    if (!buffer) {
        fatal( "Can't scan include file " + filename);
    }
    d2_parser__switch_to_buffer(buffer);
    files_.push_back(file_);
    file_ = filename;
    locs_.push_back(loc_);
    loc_.initialize(&file_);

    BEGIN(INITIAL);
}

namespace {
/// To avoid unused function error
class Dummy {
    // cppcheck-suppress unusedPrivateFunction
    void dummy() { yy_fatal_error("Fix me: how to disable its definition?"); }
};
}


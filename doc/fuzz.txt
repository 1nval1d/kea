This file documents the process of initial trial runs for running
AFL fuzzer for Kea. Currently only Kea-dhcp6 is extended with this
capability. Once we get more experience with it, we should implement
this capability for Kea-dhcp4.

I have used Ubuntu 16.04 for this. I read somewhere that FreeBSD is
ok for fuzzing, but Mac OS is not.

1. Download AFL
  Homepage: http://lcamtuf.coredump.cx/afl/
  Version used: 2.35b (afl-latest.tgz)

2. Compile AFL
  cd afl-2.35b
  make
  cd llvm_mode
  make

the last step requires to have LLVM installed. On
Ubuntu 16.04 I had to do this:
 
  sudo apt-get install llvm

3. Set up path to AFL binaries

 export AFL_PATH=/home/thomson/devel/afl-2.35b
 export PATH=$PATH:/home/thomson/devel/afl-2.35b

4. Build Kea using AFL

 cd kea
 git pull
 git checkout experiments/fuzz
 autoreconf -i
 CXX=afl-clang-fast++ ./configure --enable-fuzz --enable-static-link
 make

 Note: no unit-tests needed. We will be fuzzing the
 production code only.

5. Configure destination address

 The defaults (see src/bin/dhcp6/fuzz.cc) are:
 interface: eth0
 dest address: ff02::1:2
 dest port: 547

 Those can be changed with the following env. variables:
 KEA_AFL_INTERFACE
 KEA_AFL_ADDR
 KEA_AFL_PORT

 E.g.
 export KEA_AFL_INTERFACE=eth1

 Overriding the parameters with variables has not been tested.

6. Run fuzzer

 Set up max size of a virtual memory allowed to 4GB:
 ulimit -v 4096000

 You may be asked by AFL to tweak your kernel. In my case (ubuntu
 16.04), I had to tweak the scaling_governor. The instructions AFL
 gives are very easy to follow.

 Instruct AFL to allow 4096MB of virtual memory and run AFL:
 afl-fuzz -m 4096 -i tests/fuzz-data -o fuzz-out ./kea-dhcp6 -c tests/fuzz-config/fuzz.json

 Here's what the switches do:
 -m 4096 - allow Kea to take up to 4GB memory
 -i tests/fuzz-data - Input seeds. These are the packet files used
    to initiate the packet randomization. Several examples are in
    src/bin/dhcp6/tests/fuzz-data. You can extract them using wireshark,
    right click on a packet, then export as binary data. Make sure you
    export the payload of UDP content. the first exported byte should
    by message-type.
 -o dir - that's the output directory. It doesn't have to exist.

7. Checking that the fuzzer is really working

 a) the harness prints out a line to /tmp/kea-fuzz-harness.txt every
 time a new packet is sent. This generated 4,5MB of entries in 20
 minutes. Obviously, this has to be disabled for production fuzzing,
 but it's good for initial trials.

 b) I have my fuzz.json (which is renamed doc/examples/kea6/simple.json)
 that tell Kea to use logging on level INFO and write output to a
 file. This file keeps growing. That's around 3,8MB after 20 minutes.

8. Tweak Kea harness if needed

 There are several variables in src/bin/dhcp6/fuzz.cc that you can
 tweak. By default, it will write the log to /tmp/kea-fuzz-harness.txt
 every 5 packets and will terminate after 100.000 packets processed.
 That mechanism is to avoid cases when Kea gets stuck and technically
 running, but not processing packets. AFL should be able to restart
 Kea and continue running.

<!--
 - Copyright (C) 2019 Internet Systems Consortium, Inc. ("ISC")
 -
 - This Source Code Form is subject to the terms of the Mozilla Public
 - License, v. 2.0. If a copy of the MPL was not distributed with this
 - file, you can obtain one at http://mozilla.org/MPL/2.0/.
-->

<section xml:id="config-backend">
  <title>Kea Configuration Backend</title>

  <section xml:id="cb-applicability">
    <title>Applicability</title>

    <para>
      Kea Configuration Backend (abbreviated as CB) is a feature first
      introduced in 1.6.0 release, which provides Kea servers with the
      ability to manage and fetch their configuration from one or more
      databases. In the documentation, the term "Configuration Backend"
      may also refer to the particular Kea module providing support
      to manage and fetch the configuration information from the particular
      database type. For example: MySQL Configuration Backend is the logic
      implemented within the "mysql_cb" hooks library which provides a
      complete set of functions to manage and fetch the configuration
      information from the MySQL database.
    </para>

    <para>
      In small deployments, e.g. those comprising a single DHCP server instance
      with limited and infrequently changing number of subnets, it may
      be impractical to use the CB as a configuration repository because
      it requires additional third party software to be installed and
      configured - in particular the  MySQL server and MySQL client.
      Once the number of DHCP servers and/or the number of managed
      subnets in the network grows, the usefulness of the CB becomes
      obvious.
    </para>

    <para>
      A good example is a pair of the Kea DHCP servers which can be
      configured to support High Availability as described in
      <xref linkend="high-availability-library"/>.
      The configurations of both servers are almost exactly the same.
      They may differ by the server identifier and designation of the
      server as a primary or standby (or secondary). They may also
      differ by the interfaces configuration. Typically, the subnets,
      shared networks, option definitions, global parameters are
      the same for both servers and can be sourced from a single
      database instance to both Kea servers.
    </para>

    <para>
      Using the database as a single source of configuration for subnets
      and/or other configuration information supported by the CB has
      the advantage that any modifications to the configuration in
      the database is automatically applied to both servers.
    </para>

    <para>
      Another case when the centralized configuration repository is desired
      is in deployments including large number of the DHCP servers, possibly
      using a common lease database to provide redundancy. The new servers
      can be added to the pool frequently to fulfil growing scalability
      requirements. Adding the new server does not require replicating
      the entire configuration to the new server when common database is
      used.
    </para>

    <para>
      Using the database as a configuration repository for Kea servers also
      brings other benefits, such as:
      <itemizedlist>
        <listitem><simpara>an ability to use database specific tools to access
        the configuration information,</simpara></listitem>
        <listitem><simpara>an ability to create customized statistics based
        on the information stored in the database,</simpara></listitem>
        <listitem><simpara>an ability to backup the configuration information
        using the database builtin replication mechanisms.</simpara></listitem>
      </itemizedlist>
    </para>

  </section>

  <section xml:id="cb-limitations">
    <title>CB Capabilities and Limitations</title>
    <para>
      Kea CB has been introduced in the 1.6.0 release, but this
      implementation comes with a number of limitations being the
      result of the overall complexity of this feature and the development
      time constraints. This feature will evolve over time and the new
      capabilities will be added in subsequent releases. In this
      section we present the limitations of the CB, present in the
      current Kea 1.6.0 release:
    </para>

    <itemizedlist>
      <listitem><simpara>
        Kea CB is currently supported for the MySQL database only.
      </simpara></listitem>
      <listitem><simpara>
        Kea CB is only supported for DHCPv4 and DHCPv6 servers.
        Neither Control Agent nor D2 deamon can be configured via the database.
      </simpara></listitem>
      <listitem><simpara>
        Configuration to be stored for the DHCP servers includes: global parameters,
        option definitions, global options, shared networks and subnets. Other
        configuration parameters are not stored in the database at the moment.
        They have to be configured via the JSON configuration file.
      </simpara></listitem>
    </itemizedlist>

    <note>
      <para>
        We strongly recommend to not duplicate the configuration information
        in the file and the database. For example, when specifying subnets
        for the DHCP server, please store them in the configuration backend
        or in the configuration file, not in both places. Storing some subnets
        in the database and other in the file may put you at risk of potential
        configuration conflicts. Note that the configuration from the database
        takes precedence over the configuration from the file, thus it is possible
        that parts of the configuration specified in the file may be overriden.
      </para>
    </note>

    <note>
      <para>
        It is recommended that <command>subnet_cmds</command> hooks library is
        not used to manage the subnets when the configuration backend is used
        as a source of information about the subnets. The
        <command>subnet_cmds</command> hooks library modifies the local subnets
        configuration (in the server's memory), not in the database. Use
        the <command>cb_cmds</command> hooks library to manage the subnets
        information in the database instead.
      </para>
    </note>

  </section>

  <section xml:id="cb-components">
    <title>CB Components</title>
    <para>
      In order to use the Kea CB feature, the Kea 1.6.0 version or later is
      required. The <command>mysql_cb</command> open source hooks library
      implementing the Configuration Backend for MySQL must be compiled and
      loaded by the DHCP servers. This hooks library is compiled when the
      <filename>--with-mysql</filename> configuration switch is used during
      Kea build. The MySQL C client libraries must be installed
      as explained in the <xref linkend="dhcp-install-configure"/>.
    </para>

    <note>
      <simpara>Any existing MySQL schema must be upgraded to the latest schema
      required by the particular Kea version using <command>kea-admin</command>
      tool described in <xref linkend="kea-admin"/>.</simpara>
    </note>

    <para>
      The <command>cb_cmds</command> premium hooks library is available to
      ISC paid supported customers, which provides a complete set of commands
      to manage the servers' configuration information within the database.
      This library can be attached to both DHCPv4 and DHCPv6 server instances.
      It is still possible to manage the configuration information without the
      <command>cb_cmds</command> hooks library with commonly available tools
      such as MySQL Workbench or command line MySQL client, by directly working
      with the database.
    </para>

    <para>
      Refer to the <xref linkend="cb-cmds-library"/> for the details regarding
      the <command>cb_cmds</command> hooks library.
    </para>

    <para>
      The DHCPv4 and DHCPv6 server specific configuration of the CB as well as
      the list of supported configuration parameters can be found in the
      <xref linkend="dhcp4-cb"/> and <xref linkend="dhcp6-cb"/>
      respectively.
    </para>
  </section>

  <section xml:id="cb-sharing">
    <title>Configuration Sharing and Server Tags</title>
    <para>
      The configuration database is designed to store the configuration information
      for multiple Kea servers. Depending on the use case, the entire configuration
      may be shared by all servers, parts of the configuration may be shared by
      multiple servers and the rest of the configuration may be different for these
      servers or, finally, each server may have its own non-shared configuration.
    </para>

    <para>
      The configuration elements in the database are associated with the servers
      by "server tags". The server tag is an arbitrary string holding the name
      of the Kea server instance. The tags of the DHCPv4 and DHCPv6 servers are
      independent in the database, i.e. the same server tag can be created for
      the DHCPv4 and the DHCPv6 server respectively.
    </para>

    <para>
      The server definition, which consists of the server tag and the server
      description, must be stored in the configuration database prior to creating
      the dedicated configuration for that server. In cases when all servers use
      the same configuration, e.g. a pair of servers running as the High Availability
      peers, there is no need to configure the server tags for these
      servers in the database. The database by default includes the logical
      server <command>all</command>, which is used as a keyword to indicate that
      the particular piece of configuration must be shared between all servers
      connecting to the database. The <command>all</command> server can't be
      deleted or modified. It is not even returned among other servers
      as a result of the <command>remote-server[46]-get-all</command>
      commands. Also, slightly different rules may apply to "all" keyword
      than to any user defined server when running the commands provided by
      the <command>cb_cmds</command> hooks library
      (see <xref linkend="cb-cmds-library"/> for details).
    </para>

    <note>
      <simpara>
        In the simplest case there are no server tags defined in the configuration
        database and all connecting servers will get the same configuration
        regardless of the server tag they are using. The server tag that the
        particular Kea instance presents to the database to fetch its configuration
        is specified in the Kea configuration file, using the
        <command>config-control</command> map (please refer to the
        <xref linkend="dhcp4-cb-json"/> and <xref linkend="dhcp6-cb-json"/>
        for details).
      </simpara>
    </note>

    <para>
      All Kea instances presenting the same server tag to the configuration database
      are given the same configuration. It is the administrator's choice whether
      multiple Kea instances use the same server tag or each Kea instance is using
      a different sever tag. Also, there is no requirement that the instances
      running on the same physical or virtual machine use the same server tag. It is
      even possible to configure the Kea server without assigning it a server tag.
      In such case the server will be given the configuration specified for "all"
      servers.
    </para>

    <para>
      In order to differentiate the configurations between the Kea servers, a
      collection of the server tags used by the servers must be stored in the
      database. For the DHCPv4 and DHCPv6 servers, it can be done using the
      commands described in <xref linkend="command-remote-server4-set"/> and
      <xref linkend="command-remote-server6-set"/>. Next, the
      server tags can be used to associate the configuration information with
      the servers. However, it is important to note that some DHCP
      configuration elements may be associated with multiple server tags and
      other configuration elements may be associated with exactly one
      server tag. The former configuration elements are referred to as
      shareable configuration elements and the latter are referred to as
      non-shareable configuration elements. The <xref linkend="dhcp4-cb"/>
      and <xref linkend="dhcp6-cb"/> list the DHCP specific shareable and
      non-shareable configuration elements. However, in this section we
      want to briefly explain the difference between them.
    </para>

    <para>
      The shareable configuration element is the one having some unique
      property identifying it and which instance may appear only once in
      the database. An example of the shareable DHCP element is a subnet
      instance. The subnet is a part of the network topology and we assume
      that the particular subnet may have only one definition within this
      network. The subnet has two unique identifiers: subnet id and the
      subnet prefix. The subnet identifier is used in Kea to uniquely
      identify the subnet and to connect it with other configuration elements,
      e.g. in host reservations. The subnet identifier uniquely identifies
      the subnet within the network. Some commands provided by the
      <command>cb_cmds</command> hooks library allow for accessing the subnet
      information by subnet identifier (or prefix) and explicitly prohibit
      using the server tag to access the subnet. This is because, in a
      general case, the subnet definition is associated with multiple servers
      rather than single server. In fact, it may even be associated
      with no servers (unassigned). Still, the unassigned subnet has an
      identifier and prefix which can be used to access the subnet.
    </para>

    <para>
      A shareable configuration element may be associated with multiple
      servers, one server or no servers. Deletion of the server which is
      associated with the shareable element does not cause the deletion of
      the shareable element. It merely deletes the association of the
      deleted server with the element.
    </para>

    <para>
      Unlike the shareable element, the non-shareable element must not be
      explicitly associated with more than one server and must not exist
      after the server is deleted (must not remain unassigned). The
      non-shareable element only exists within the context of the server.
      An example of the non-shareable element in DHCP is a global
      parameter, e.g. <command>renew-timer</command>. The renew timer
      is the value to be used by the particular server and only this
      server. Other servers may have their respective renew timers
      set to the same or different value. The renew timer is the
      parameter which has no unique identifier by which it could be
      accessed, modified or otherwise used. The global parameters like
      the renew timer can be accessed by the parameter name and the
      tag of the server for which they are configured. For example:
      the commands described in
      <xref linkend="command-remote-global-parameter4-get"/> allow for
      fetching the value of the global parameter by the parameter name and
      the server name. Getting the global parameter only by its name (without
      specifying the server tag) is not possible because there may be many
      global parameters with the given name in the database.
    </para>

    <para>
      When the server associated with a non-shareable configuration element
      is deleted, the configuration element is automatically deleted from
      the database along with the server because the non-shareable element
      must be always assigned to some server (or the logical server "all").
    </para>

    <para>
      The terms "shareable" and "non-shareable" only apply to the associations
      with user defined servers. All configuration elements associated with
      the logical server "all" are by definition shareable. For example: the
      <command>renew-timer</command> associated with "all" servers is used
      by all servers connecting to the database which don't have their specific
      renew timers defined. In the special case, when none of the configuration
      elements are associated with user defined servers, the entire
      configuration in the database is shareable because all its pieces
      belong to "all" servers.
    </para>

    <note>
      <simpara>
        Be very careful when associating the configuration elements with
        different server tags. The configuration backend doesn't protect you
        against some possible misconfigurations that may arise from the
        wrong server tags' assignments. For example: if you assign a shared
        network to one server and the subnets belonging to this shared network
        to another server, the servers will fail upon trying to fetch and
        use this configuration. The server fetching the subnets will be
        aware that the subnets are associated with the shared network but
        the shared network will not be found by this server as it doesn't
        belong to it. In such case, both the shared network and the subnets
        should be assigned to the same set of servers.
      </simpara>
    </note>
  </section>

</section>

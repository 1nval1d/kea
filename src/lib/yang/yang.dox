// Copyright (C) 2018 Internet Systems Consortium, Inc. ("ISC")
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

/**
 @page libyang libkea-yang - Kea Yang Utilities Library

The libkea-yang library was developed to handle base YANG operations,
such are retrieving YANG schema and configuration and translating
data between YANG syntax and JSON that is understandable by Kea.

@section yangTranslator Translator between Yang and JSON

An essential concept is the idea of translator. It is a primitive that is able
to convert certain data structure between YANG and JSON. It is envisaged
that more complex translators will use other translators to handle more
complex data structures. For details, see @ref isc::yang::TranslatorBasic.

Note that although the initial focus is on translation from YANG to JSON (so
Kea can retrieve its configuration), the opposite translation direction -
from JSON to YANG - is also very useful, for at least two reasons. First,
in many cases we can use it in tests to check that conversion back and forth
doesn't lose anything: yang = toYang(toJson(yang)). Second, YANG models
cover two major types of data: configuration and run-time state. While
we're initially focusing on getting the configuration, the run-time state
is something that Kea is expected to provide. Kea uses JSON internally in many
places and that data will have to be exported in YANG format.

All translators take a Session pointer (a structure provided by Sysrepo that
is responsible for maintaining a connection) in constructors and derive from
the basic / base class and recursively of translators for embedded parts.

@c isc::yang::TranslatorBasic provides some methods:
 - getItem() gets and translates basic value from Yang to JSON
 - getItems() gets and translates a leaf-list from Yang to JSON
   (for a list please use an iterator)
 - setItem() translates and sets a basic value from JSON to Yang
 - delItem() deletes a value
 - getIter() gets an iterator over a Yang list
 - getNext() returns the xpath of the next item

@section yangTranslatorPool Pool translator

@c isc::yang::TranslatorPool is the standard example of a translator
for a structured value. Its constructor takes a model name: the code
implements some variants to accommodate the model with shared code
moved into a common private routine.

@c isc::yang::TranslatorPools deals with a list of pools. The getPools
method iterates over the list in both ways. Look at examples in unit
tests to understand how can be filled.

Note pools show two shortcomings in IETF models:
 - option sets make to track changes nearly impossible: the only easy
  code is to translate the whole configuration.
 - prefix and start - end forms of pool ranges are both mandatory.

@section yangTranslatorSubnet Subnet translator

The new thing here is the use of adaptors to move timers from subnets
to pools and back.

@section yangAdaptor Adapting JSON configuration

Adaptors are tools which adapts JSON complete or partial configuration
before translation to Yang to ease this translation or after translation
from Yang to follow the Kea syntax, for instance by adding static
components which are not in the model.

Methods provided by adaptors are class methods (i.e. declared static).
Specific adaptors are derived from the isc::yang::Adaptor base class.

 @page unitTestsSysrepo Running unit-tests with Sysrepo

To run YANG/NETCONF/Sysrepo tests you obviously need to compile Kea with
Sysrepo support:

@verbatim
./configure --with-sysrepo
@endverbatim

For details, see Section 20 "YANG/NETCONF support" in the Kea User's Guide.

You also need to install YANG schemas, so the unit-tests are able to
retrieve, add, update and generally interact with the sysrepo information.
There are several production Kea models (src/lib/yang/models) and one test
specific model (src/lib/yang/tests/keatest-module.yang).

To install the test module, issue the following command:

@verbatim
sudo sysrepoctl --install --yang=src/lib/yang/tests/keatest-module.yang
@endverbatim

To verify that you have the schemas installed, do this:
@verbatim
sysrepoctl -l
@endverbatim
Make sure that keatest-module is on the list.
*/
